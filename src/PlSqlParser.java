// Generated from /home/serii/work/antlr/antlr_java/PlSqlParser.g4 by ANTLR 4.7
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class PlSqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.7", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		A_LETTER=1, ADD=2, AFTER=3, AGENT=4, AGGREGATE=5, ALL=6, ALTER=7, ANALYZE=8, 
		AND=9, ANY=10, ARRAY=11, AS=12, ASC=13, ASSOCIATE=14, AT=15, ATTRIBUTE=16, 
		AUDIT=17, AUTHID=18, AUTO=19, AUTOMATIC=20, AUTONOMOUS_TRANSACTION=21, 
		BATCH=22, BEFORE=23, BEGIN=24, BETWEEN=25, BFILE=26, BINARY_DOUBLE=27, 
		BINARY_FLOAT=28, BINARY_INTEGER=29, BLOB=30, BLOCK=31, BODY=32, BOOLEAN=33, 
		BOTH=34, BREADTH=35, BULK=36, BY=37, BYTE=38, C_LETTER=39, CACHE=40, CALL=41, 
		CANONICAL=42, CASCADE=43, CASE=44, CAST=45, CHAR=46, CHAR_CS=47, CHARACTER=48, 
		CHECK=49, CHR=50, CLOB=51, CLOSE=52, CLUSTER=53, COALESCE=54, COLLECT=55, 
		COLUMN=56, COLUMNS=57, COMMENT=58, COMMIT=59, COMMITTED=60, COMPATIBILITY=61, 
		COMPILE=62, COMPOUND=63, CONNECT=64, CONNECT_BY_ROOT=65, CONSTANT=66, 
		CONSTRAINT=67, CONSTRAINTS=68, CONSTRUCTOR=69, CONTENT=70, CONTEXT=71, 
		CONTINUE=72, CONVERT=73, CORRUPT_XID=74, CORRUPT_XID_ALL=75, COST=76, 
		COUNT=77, CREATE=78, CROSS=79, CUBE=80, CURRENT=81, CURRENT_USER=82, CURSOR=83, 
		CUSTOMDATUM=84, CYCLE=85, DATA=86, DATABASE=87, DATE=88, DAY=89, DB_ROLE_CHANGE=90, 
		DBTIMEZONE=91, DDL=92, DEBUG=93, DEC=94, DECIMAL=95, DECLARE=96, DECOMPOSE=97, 
		DECREMENT=98, DEFAULT=99, DEFAULTS=100, DEFERRED=101, DEFINER=102, DELETE=103, 
		DEPTH=104, DESC=105, DETERMINISTIC=106, DIMENSION=107, DISABLE=108, DISASSOCIATE=109, 
		DISTINCT=110, DOCUMENT=111, DOUBLE=112, DROP=113, DSINTERVAL_UNCONSTRAINED=114, 
		EACH=115, ELEMENT=116, ELSE=117, ELSIF=118, EMPTY=119, ENABLE=120, ENCODING=121, 
		END=122, ENTITYESCAPING=123, ERR=124, ERRORS=125, ESCAPE=126, EVALNAME=127, 
		EXCEPTION=128, EXCEPTION_INIT=129, EXCEPTIONS=130, EXCLUDE=131, EXCLUSIVE=132, 
		EXECUTE=133, EXISTS=134, EXIT=135, EXPLAIN=136, EXTERNAL=137, EXTRACT=138, 
		FAILURE=139, FALSE=140, FETCH=141, FINAL=142, FIRST=143, FIRST_VALUE=144, 
		FLOAT=145, FOLLOWING=146, FOLLOWS=147, FOR=148, FORALL=149, FORCE=150, 
		FOREIGN=151, FROM=152, FULL=153, FUNCTION=154, GOTO=155, GRANT=156, GROUP=157, 
		GROUPING=158, HASH=159, HAVING=160, HIDE=161, HOUR=162, IF=163, IGNORE=164, 
		IMMEDIATE=165, IN=166, INCLUDE=167, INCLUDING=168, INCREMENT=169, INDENT=170, 
		INDEX=171, INDEXED=172, INDICATOR=173, INDICES=174, INFINITE=175, INLINE=176, 
		INNER=177, INOUT=178, INSERT=179, INSTANTIABLE=180, INSTEAD=181, INT=182, 
		INTEGER=183, INTERSECT=184, INTERVAL=185, INTO=186, INVALIDATE=187, IS=188, 
		ISOLATION=189, ITERATE=190, JAVA=191, JOIN=192, KEEP=193, KEY=194, LANGUAGE=195, 
		LAST=196, LAST_VALUE=197, LEADING=198, LEFT=199, LEVEL=200, LIBRARY=201, 
		LIKE=202, LIKE2=203, LIKE4=204, LIKEC=205, LIMIT=206, LOCAL=207, LOCK=208, 
		LOCKED=209, LOG=210, LOGOFF=211, LOGON=212, LONG=213, LOOP=214, MAIN=215, 
		MAP=216, MATCHED=217, MAXVALUE=218, MEASURES=219, MEMBER=220, MERGE=221, 
		MINUS=222, MINUTE=223, MINVALUE=224, MLSLABEL=225, MODE=226, MODEL=227, 
		MODIFY=228, MONTH=229, MULTISET=230, NAME=231, NAN=232, NATURAL=233, NATURALN=234, 
		NAV=235, NCHAR=236, NCHAR_CS=237, NCLOB=238, NESTED=239, NEW=240, NO=241, 
		NOAUDIT=242, NOCACHE=243, NOCOPY=244, NOCYCLE=245, NOENTITYESCAPING=246, 
		NOMAXVALUE=247, NOMINVALUE=248, NONE=249, NOORDER=250, NOSCHEMACHECK=251, 
		NOT=252, NOWAIT=253, NULL=254, NULLS=255, NUMBER=256, NUMERIC=257, NVARCHAR2=258, 
		OBJECT=259, OF=260, OFF=261, OID=262, OLD=263, ON=264, ONLY=265, OPEN=266, 
		OPTION=267, OR=268, ORADATA=269, ORDER=270, ORDINALITY=271, OSERROR=272, 
		OUT=273, OUTER=274, OVER=275, OVERRIDING=276, PACKAGE=277, PARALLEL_ENABLE=278, 
		PARAMETERS=279, PARENT=280, PARTITION=281, PASSING=282, PATH=283, PERCENT_ISOPEN=284, 
		PERCENT_FOUND=285, PERCENT_NOTFOUND=286, PERCENT_ROWCOUNT=287, PERCENT_ROWTYPE=288, 
		PERCENT_TYPE=289, PIPE=290, PIPELINED=291, PIVOT=292, PLAN=293, PUBLIC=294, 
		PLS_INTEGER=295, POSITIVE=296, POSITIVEN=297, PRAGMA=298, PRECEDING=299, 
		PRECISION=300, PRESENT=301, PRIMARY=302, PRIOR=303, PROCEDURE=304, RAISE=305, 
		RANGE=306, RAW=307, READ=308, REAL=309, RECORD=310, REF=311, REFERENCE=312, 
		REFERENCES=313, REFERENCING=314, REJECT=315, RELIES_ON=316, RENAME=317, 
		REPLACE=318, RESPECT=319, RESTRICT_REFERENCES=320, RESULT=321, RESULT_CACHE=322, 
		RETURN=323, RETURNING=324, REUSE=325, REVERSE=326, REVOKE=327, RIGHT=328, 
		ROLLBACK=329, ROLLUP=330, ROW=331, ROWID=332, ROWS=333, RULES=334, SAMPLE=335, 
		SAVE=336, SAVEPOINT=337, SCHEMA=338, SCHEMACHECK=339, SCN=340, SEARCH=341, 
		SECOND=342, SEED=343, SEGMENT=344, SELECT=345, SELF=346, SEQUENCE=347, 
		SEQUENTIAL=348, SERIALIZABLE=349, SERIALLY_REUSABLE=350, SERVERERROR=351, 
		SESSIONTIMEZONE=352, SET=353, SETS=354, SETTINGS=355, SHARE=356, SHOW=357, 
		SHUTDOWN=358, SIBLINGS=359, SIGNTYPE=360, SIMPLE_INTEGER=361, SINGLE=362, 
		SIZE=363, SKIP_=364, SMALLINT=365, SNAPSHOT=366, SOME=367, SPECIFICATION=368, 
		SQLDATA=369, SQLERROR=370, STANDALONE=371, START=372, STARTUP=373, STATEMENT=374, 
		STATEMENT_ID=375, STATIC=376, STATISTICS=377, STRING=378, SUBMULTISET=379, 
		SUBPARTITION=380, SUBSTITUTABLE=381, SUBTYPE=382, SUCCESS=383, SUSPEND=384, 
		SYNONYM=385, TABLE=386, THE=387, THEN=388, TIME=389, TIMESTAMP=390, TIMESTAMP_LTZ_UNCONSTRAINED=391, 
		TIMESTAMP_TZ_UNCONSTRAINED=392, TIMESTAMP_UNCONSTRAINED=393, TIMEZONE_ABBR=394, 
		TIMEZONE_HOUR=395, TIMEZONE_MINUTE=396, TIMEZONE_REGION=397, TO=398, TRAILING=399, 
		TRANSACTION=400, TRANSLATE=401, TREAT=402, TRIGGER=403, TRUE=404, TRUNCATE=405, 
		TYPE=406, UNBOUNDED=407, UNDER=408, UNION=409, UNIQUE=410, UNLIMITED=411, 
		UNPIVOT=412, UNTIL=413, UPDATE=414, UPDATED=415, UPSERT=416, UROWID=417, 
		USE=418, USING=419, VALIDATE=420, VALUE=421, VALUES=422, VARCHAR=423, 
		VARCHAR2=424, VARIABLE=425, VARRAY=426, VARYING=427, VERSION=428, VERSIONS=429, 
		WAIT=430, WARNING=431, WELLFORMED=432, WHEN=433, WHENEVER=434, WHERE=435, 
		WHILE=436, WITH=437, WITHIN=438, WORK=439, WRITE=440, XML=441, XMLAGG=442, 
		XMLATTRIBUTES=443, XMLCAST=444, XMLCOLATTVAL=445, XMLELEMENT=446, XMLEXISTS=447, 
		XMLFOREST=448, XMLNAMESPACES=449, XMLPARSE=450, XMLPI=451, XMLQUERY=452, 
		XMLROOT=453, XMLSERIALIZE=454, XMLTABLE=455, YEAR=456, YES=457, YMINTERVAL_UNCONSTRAINED=458, 
		ZONE=459, PREDICTION=460, PREDICTION_BOUNDS=461, PREDICTION_COST=462, 
		PREDICTION_DETAILS=463, PREDICTION_PROBABILITY=464, PREDICTION_SET=465, 
		CUME_DIST=466, DENSE_RANK=467, LISTAGG=468, PERCENT_RANK=469, PERCENTILE_CONT=470, 
		PERCENTILE_DISC=471, RANK=472, AVG=473, CORR=474, COVAR_=475, DECODE=476, 
		LAG=477, LEAD=478, MAX=479, MEDIAN=480, MIN=481, NTILE=482, NVL=483, RATIO_TO_REPORT=484, 
		REGR_=485, ROUND=486, ROW_NUMBER=487, SUBSTR=488, TO_CHAR=489, TRIM=490, 
		SUM=491, STDDEV=492, VAR_=493, VARIANCE=494, LEAST=495, GREATEST=496, 
		TO_DATE=497, NATIONAL_CHAR_STRING_LIT=498, BIT_STRING_LIT=499, HEX_STRING_LIT=500, 
		DOUBLE_PERIOD=501, PERIOD=502, UNSIGNED_INTEGER=503, APPROXIMATE_NUM_LIT=504, 
		CHAR_STRING=505, DELIMITED_ID=506, PERCENT=507, AMPERSAND=508, LEFT_PAREN=509, 
		RIGHT_PAREN=510, DOUBLE_ASTERISK=511, ASTERISK=512, PLUS_SIGN=513, MINUS_SIGN=514, 
		COMMA=515, SOLIDUS=516, AT_SIGN=517, ASSIGN_OP=518, BINDVAR=519, COLON=520, 
		SEMICOLON=521, LESS_THAN_OR_EQUALS_OP=522, LESS_THAN_OP=523, GREATER_THAN_OR_EQUALS_OP=524, 
		NOT_EQUAL_OP=525, CARRET_OPERATOR_PART=526, TILDE_OPERATOR_PART=527, EXCLAMATION_OPERATOR_PART=528, 
		GREATER_THAN_OP=529, CONCATENATION_OP=530, VERTICAL_BAR=531, EQUALS_OP=532, 
		LEFT_BRACKET=533, RIGHT_BRACKET=534, INTRODUCER=535, SPACES=536, SINGLE_LINE_COMMENT=537, 
		MULTI_LINE_COMMENT=538, PROMPT=539, START_CMD=540, REGULAR_ID=541, ZV=542;
	public static final int
		RULE_swallow_to_semi = 0, RULE_compilation_unit = 1, RULE_sql_script = 2, 
		RULE_unit_statement = 3, RULE_drop_function = 4, RULE_alter_function = 5, 
		RULE_create_function_body = 6, RULE_parallel_enable_clause = 7, RULE_partition_by_clause = 8, 
		RULE_result_cache_clause = 9, RULE_relies_on_part = 10, RULE_streaming_clause = 11, 
		RULE_drop_package = 12, RULE_alter_package = 13, RULE_create_package = 14, 
		RULE_create_package_body = 15, RULE_package_obj_spec = 16, RULE_procedure_spec = 17, 
		RULE_function_spec = 18, RULE_package_obj_body = 19, RULE_drop_procedure = 20, 
		RULE_alter_procedure = 21, RULE_function_body = 22, RULE_procedure_body = 23, 
		RULE_create_procedure_body = 24, RULE_drop_trigger = 25, RULE_alter_trigger = 26, 
		RULE_create_trigger = 27, RULE_trigger_follows_clause = 28, RULE_trigger_when_clause = 29, 
		RULE_simple_dml_trigger = 30, RULE_for_each_row = 31, RULE_compound_dml_trigger = 32, 
		RULE_non_dml_trigger = 33, RULE_trigger_body = 34, RULE_routine_clause = 35, 
		RULE_compound_trigger_block = 36, RULE_timing_point_section = 37, RULE_non_dml_event = 38, 
		RULE_dml_event_clause = 39, RULE_dml_event_element = 40, RULE_dml_event_nested_clause = 41, 
		RULE_referencing_clause = 42, RULE_referencing_element = 43, RULE_drop_type = 44, 
		RULE_alter_type = 45, RULE_compile_type_clause = 46, RULE_replace_type_clause = 47, 
		RULE_alter_method_spec = 48, RULE_alter_method_element = 49, RULE_alter_attribute_definition = 50, 
		RULE_attribute_definition = 51, RULE_alter_collection_clauses = 52, RULE_dependent_handling_clause = 53, 
		RULE_dependent_exceptions_part = 54, RULE_create_type = 55, RULE_type_definition = 56, 
		RULE_object_type_def = 57, RULE_object_as_part = 58, RULE_object_under_part = 59, 
		RULE_nested_table_type_def = 60, RULE_sqlj_object_type = 61, RULE_type_body = 62, 
		RULE_type_body_elements = 63, RULE_map_order_func_declaration = 64, RULE_subprog_decl_in_type = 65, 
		RULE_proc_decl_in_type = 66, RULE_func_decl_in_type = 67, RULE_constructor_declaration = 68, 
		RULE_modifier_clause = 69, RULE_object_member_spec = 70, RULE_sqlj_object_type_attr = 71, 
		RULE_element_spec = 72, RULE_element_spec_options = 73, RULE_subprogram_spec = 74, 
		RULE_type_procedure_spec = 75, RULE_type_function_spec = 76, RULE_constructor_spec = 77, 
		RULE_map_order_function_spec = 78, RULE_pragma_clause = 79, RULE_pragma_elements = 80, 
		RULE_type_elements_parameter = 81, RULE_drop_sequence = 82, RULE_alter_sequence = 83, 
		RULE_create_sequence = 84, RULE_sequence_spec = 85, RULE_sequence_start_clause = 86, 
		RULE_create_table = 87, RULE_drop_table = 88, RULE_comment_on_column = 89, 
		RULE_create_synonym = 90, RULE_comment_on_table = 91, RULE_alter_table = 92, 
		RULE_add_constraint = 93, RULE_foreign_key_clause = 94, RULE_references_clause = 95, 
		RULE_on_delete_clause = 96, RULE_unique_key_clause = 97, RULE_primary_key_clause = 98, 
		RULE_anonymous_block = 99, RULE_invoker_rights_clause = 100, RULE_compiler_parameters_clause = 101, 
		RULE_call_spec = 102, RULE_java_spec = 103, RULE_c_spec = 104, RULE_c_agent_in_clause = 105, 
		RULE_c_parameters_clause = 106, RULE_parameter = 107, RULE_default_value_part = 108, 
		RULE_declare_spec = 109, RULE_variable_declaration = 110, RULE_subtype_declaration = 111, 
		RULE_cursor_declaration = 112, RULE_parameter_spec = 113, RULE_exception_declaration = 114, 
		RULE_pragma_declaration = 115, RULE_record_type_def = 116, RULE_field_spec = 117, 
		RULE_ref_cursor_type_def = 118, RULE_type_declaration = 119, RULE_table_type_def = 120, 
		RULE_table_indexed_by_part = 121, RULE_varray_type_def = 122, RULE_seq_of_statements = 123, 
		RULE_label_declaration = 124, RULE_statement = 125, RULE_assignment_statement = 126, 
		RULE_continue_statement = 127, RULE_exit_statement = 128, RULE_goto_statement = 129, 
		RULE_if_statement = 130, RULE_elsif_part = 131, RULE_else_part = 132, 
		RULE_loop_statement = 133, RULE_cursor_loop_param = 134, RULE_forall_statement = 135, 
		RULE_bounds_clause = 136, RULE_between_bound = 137, RULE_lower_bound = 138, 
		RULE_upper_bound = 139, RULE_null_statement = 140, RULE_raise_statement = 141, 
		RULE_return_statement = 142, RULE_function_call = 143, RULE_pipe_row_statement = 144, 
		RULE_body = 145, RULE_exception_handler = 146, RULE_trigger_block = 147, 
		RULE_block = 148, RULE_sql_statement = 149, RULE_execute_immediate = 150, 
		RULE_dynamic_returning_clause = 151, RULE_data_manipulation_language_statements = 152, 
		RULE_cursor_manipulation_statements = 153, RULE_close_statement = 154, 
		RULE_open_statement = 155, RULE_fetch_statement = 156, RULE_open_for_statement = 157, 
		RULE_transaction_control_statements = 158, RULE_set_transaction_command = 159, 
		RULE_set_constraint_command = 160, RULE_commit_statement = 161, RULE_write_clause = 162, 
		RULE_rollback_statement = 163, RULE_savepoint_statement = 164, RULE_explain_statement = 165, 
		RULE_select_statement = 166, RULE_subquery_factoring_clause = 167, RULE_factoring_element = 168, 
		RULE_search_clause = 169, RULE_cycle_clause = 170, RULE_subquery = 171, 
		RULE_subquery_operation_part = 172, RULE_subquery_basic_elements = 173, 
		RULE_query_block = 174, RULE_selected_element = 175, RULE_from_clause = 176, 
		RULE_select_list_elements = 177, RULE_table_ref_list = 178, RULE_table_ref = 179, 
		RULE_table_ref_aux = 180, RULE_table_ref_aux_internal = 181, RULE_join_clause = 182, 
		RULE_join_on_part = 183, RULE_join_using_part = 184, RULE_outer_join_type = 185, 
		RULE_query_partition_clause = 186, RULE_flashback_query_clause = 187, 
		RULE_pivot_clause = 188, RULE_pivot_element = 189, RULE_pivot_for_clause = 190, 
		RULE_pivot_in_clause = 191, RULE_pivot_in_clause_element = 192, RULE_pivot_in_clause_elements = 193, 
		RULE_unpivot_clause = 194, RULE_unpivot_in_clause = 195, RULE_unpivot_in_elements = 196, 
		RULE_hierarchical_query_clause = 197, RULE_start_part = 198, RULE_group_by_clause = 199, 
		RULE_group_by_elements = 200, RULE_rollup_cube_clause = 201, RULE_grouping_sets_clause = 202, 
		RULE_grouping_sets_elements = 203, RULE_having_clause = 204, RULE_model_clause = 205, 
		RULE_cell_reference_options = 206, RULE_return_rows_clause = 207, RULE_reference_model = 208, 
		RULE_main_model = 209, RULE_model_column_clauses = 210, RULE_model_column_partition_part = 211, 
		RULE_model_column_list = 212, RULE_model_column = 213, RULE_model_rules_clause = 214, 
		RULE_model_rules_part = 215, RULE_model_rules_element = 216, RULE_cell_assignment = 217, 
		RULE_model_iterate_clause = 218, RULE_until_part = 219, RULE_order_by_clause = 220, 
		RULE_order_by_elements = 221, RULE_for_update_clause = 222, RULE_for_update_of_part = 223, 
		RULE_for_update_options = 224, RULE_update_statement = 225, RULE_update_set_clause = 226, 
		RULE_column_based_update_set_clause = 227, RULE_delete_statement = 228, 
		RULE_insert_statement = 229, RULE_single_table_insert = 230, RULE_multi_table_insert = 231, 
		RULE_multi_table_element = 232, RULE_conditional_insert_clause = 233, 
		RULE_conditional_insert_when_part = 234, RULE_conditional_insert_else_part = 235, 
		RULE_insert_into_clause = 236, RULE_values_clause = 237, RULE_merge_statement = 238, 
		RULE_merge_update_clause = 239, RULE_merge_element = 240, RULE_merge_update_delete_part = 241, 
		RULE_merge_insert_clause = 242, RULE_selected_tableview = 243, RULE_lock_table_statement = 244, 
		RULE_wait_nowait_part = 245, RULE_lock_table_element = 246, RULE_lock_mode = 247, 
		RULE_general_table_ref = 248, RULE_static_returning_clause = 249, RULE_error_logging_clause = 250, 
		RULE_error_logging_into_part = 251, RULE_error_logging_reject_part = 252, 
		RULE_dml_table_expression_clause = 253, RULE_table_collection_expression = 254, 
		RULE_subquery_restriction_clause = 255, RULE_sample_clause = 256, RULE_seed_part = 257, 
		RULE_cursor_expression = 258, RULE_expression_list = 259, RULE_condition = 260, 
		RULE_expression = 261, RULE_logical_or_expression = 262, RULE_logical_and_expression = 263, 
		RULE_negated_expression = 264, RULE_equality_expression = 265, RULE_multiset_expression = 266, 
		RULE_multiset_type = 267, RULE_relational_expression = 268, RULE_compound_expression = 269, 
		RULE_relational_operator = 270, RULE_like_type = 271, RULE_like_escape_part = 272, 
		RULE_in_elements = 273, RULE_between_elements = 274, RULE_concatenation = 275, 
		RULE_additive_expression = 276, RULE_multiply_expression = 277, RULE_datetime_expression = 278, 
		RULE_interval_expression = 279, RULE_model_expression = 280, RULE_model_expression_element = 281, 
		RULE_single_column_for_loop = 282, RULE_for_like_part = 283, RULE_for_increment_decrement_type = 284, 
		RULE_multi_column_for_loop = 285, RULE_unary_expression = 286, RULE_case_statement = 287, 
		RULE_simple_case_statement = 288, RULE_simple_case_when_part = 289, RULE_searched_case_statement = 290, 
		RULE_searched_case_when_part = 291, RULE_case_else_part = 292, RULE_atom = 293, 
		RULE_expression_or_vector = 294, RULE_vector_expr = 295, RULE_quantified_expression = 296, 
		RULE_string_function = 297, RULE_standard_function = 298, RULE_numeric_function_wrapper = 299, 
		RULE_numeric_function = 300, RULE_other_function = 301, RULE_over_clause_keyword = 302, 
		RULE_within_or_over_clause_keyword = 303, RULE_standard_prediction_function_keyword = 304, 
		RULE_over_clause = 305, RULE_windowing_clause = 306, RULE_windowing_type = 307, 
		RULE_windowing_elements = 308, RULE_using_clause = 309, RULE_using_element = 310, 
		RULE_collect_order_by_part = 311, RULE_within_or_over_part = 312, RULE_cost_matrix_clause = 313, 
		RULE_xml_passing_clause = 314, RULE_xml_attributes_clause = 315, RULE_xml_namespaces_clause = 316, 
		RULE_xml_table_column = 317, RULE_xml_general_default_part = 318, RULE_xml_multiuse_expression_element = 319, 
		RULE_xmlroot_param_version_part = 320, RULE_xmlroot_param_standalone_part = 321, 
		RULE_xmlserialize_param_enconding_part = 322, RULE_xmlserialize_param_version_part = 323, 
		RULE_xmlserialize_param_ident_part = 324, RULE_sql_plus_command = 325, 
		RULE_whenever_command = 326, RULE_set_command = 327, RULE_exit_command = 328, 
		RULE_prompt_command = 329, RULE_show_errors_command = 330, RULE_start_command = 331, 
		RULE_partition_extension_clause = 332, RULE_column_alias = 333, RULE_table_alias = 334, 
		RULE_alias_quoted_string = 335, RULE_where_clause = 336, RULE_current_of_clause = 337, 
		RULE_into_clause = 338, RULE_xml_column_name = 339, RULE_cost_class_name = 340, 
		RULE_attribute_name = 341, RULE_savepoint_name = 342, RULE_rollback_segment_name = 343, 
		RULE_table_var_name = 344, RULE_schema_name = 345, RULE_routine_name = 346, 
		RULE_package_name = 347, RULE_implementation_type_name = 348, RULE_parameter_name = 349, 
		RULE_reference_model_name = 350, RULE_main_model_name = 351, RULE_aggregate_function_name = 352, 
		RULE_query_name = 353, RULE_constraint_name = 354, RULE_label_name = 355, 
		RULE_type_name = 356, RULE_sequence_name = 357, RULE_exception_name = 358, 
		RULE_function_name = 359, RULE_procedure_name = 360, RULE_trigger_name = 361, 
		RULE_variable_name = 362, RULE_index_name = 363, RULE_cursor_name = 364, 
		RULE_record_name = 365, RULE_collection_name = 366, RULE_link_name = 367, 
		RULE_column_name = 368, RULE_tableview_name = 369, RULE_char_set_name = 370, 
		RULE_synonym_name = 371, RULE_schema_object_name = 372, RULE_keep_clause = 373, 
		RULE_function_argument = 374, RULE_function_argument_analytic = 375, RULE_function_argument_modeling = 376, 
		RULE_respect_or_ignore_nulls = 377, RULE_argument = 378, RULE_type_spec = 379, 
		RULE_datatype = 380, RULE_precision_part = 381, RULE_native_datatype_element = 382, 
		RULE_bind_variable = 383, RULE_general_element = 384, RULE_general_element_part = 385, 
		RULE_table_element = 386, RULE_constant = 387, RULE_numeric = 388, RULE_numeric_negative = 389, 
		RULE_quoted_string = 390, RULE_identifier = 391, RULE_id_expression = 392, 
		RULE_not_equal_op = 393, RULE_greater_than_or_equals_op = 394, RULE_less_than_or_equals_op = 395, 
		RULE_concatenation_op = 396, RULE_outer_join_sign = 397, RULE_regular_id = 398, 
		RULE_string_function_name = 399, RULE_numeric_function_name = 400;
	public static final String[] ruleNames = {
		"swallow_to_semi", "compilation_unit", "sql_script", "unit_statement", 
		"drop_function", "alter_function", "create_function_body", "parallel_enable_clause", 
		"partition_by_clause", "result_cache_clause", "relies_on_part", "streaming_clause", 
		"drop_package", "alter_package", "create_package", "create_package_body", 
		"package_obj_spec", "procedure_spec", "function_spec", "package_obj_body", 
		"drop_procedure", "alter_procedure", "function_body", "procedure_body", 
		"create_procedure_body", "drop_trigger", "alter_trigger", "create_trigger", 
		"trigger_follows_clause", "trigger_when_clause", "simple_dml_trigger", 
		"for_each_row", "compound_dml_trigger", "non_dml_trigger", "trigger_body", 
		"routine_clause", "compound_trigger_block", "timing_point_section", "non_dml_event", 
		"dml_event_clause", "dml_event_element", "dml_event_nested_clause", "referencing_clause", 
		"referencing_element", "drop_type", "alter_type", "compile_type_clause", 
		"replace_type_clause", "alter_method_spec", "alter_method_element", "alter_attribute_definition", 
		"attribute_definition", "alter_collection_clauses", "dependent_handling_clause", 
		"dependent_exceptions_part", "create_type", "type_definition", "object_type_def", 
		"object_as_part", "object_under_part", "nested_table_type_def", "sqlj_object_type", 
		"type_body", "type_body_elements", "map_order_func_declaration", "subprog_decl_in_type", 
		"proc_decl_in_type", "func_decl_in_type", "constructor_declaration", "modifier_clause", 
		"object_member_spec", "sqlj_object_type_attr", "element_spec", "element_spec_options", 
		"subprogram_spec", "type_procedure_spec", "type_function_spec", "constructor_spec", 
		"map_order_function_spec", "pragma_clause", "pragma_elements", "type_elements_parameter", 
		"drop_sequence", "alter_sequence", "create_sequence", "sequence_spec", 
		"sequence_start_clause", "create_table", "drop_table", "comment_on_column", 
		"create_synonym", "comment_on_table", "alter_table", "add_constraint", 
		"foreign_key_clause", "references_clause", "on_delete_clause", "unique_key_clause", 
		"primary_key_clause", "anonymous_block", "invoker_rights_clause", "compiler_parameters_clause", 
		"call_spec", "java_spec", "c_spec", "c_agent_in_clause", "c_parameters_clause", 
		"parameter", "default_value_part", "declare_spec", "variable_declaration", 
		"subtype_declaration", "cursor_declaration", "parameter_spec", "exception_declaration", 
		"pragma_declaration", "record_type_def", "field_spec", "ref_cursor_type_def", 
		"type_declaration", "table_type_def", "table_indexed_by_part", "varray_type_def", 
		"seq_of_statements", "label_declaration", "statement", "assignment_statement", 
		"continue_statement", "exit_statement", "goto_statement", "if_statement", 
		"elsif_part", "else_part", "loop_statement", "cursor_loop_param", "forall_statement", 
		"bounds_clause", "between_bound", "lower_bound", "upper_bound", "null_statement", 
		"raise_statement", "return_statement", "function_call", "pipe_row_statement", 
		"body", "exception_handler", "trigger_block", "block", "sql_statement", 
		"execute_immediate", "dynamic_returning_clause", "data_manipulation_language_statements", 
		"cursor_manipulation_statements", "close_statement", "open_statement", 
		"fetch_statement", "open_for_statement", "transaction_control_statements", 
		"set_transaction_command", "set_constraint_command", "commit_statement", 
		"write_clause", "rollback_statement", "savepoint_statement", "explain_statement", 
		"select_statement", "subquery_factoring_clause", "factoring_element", 
		"search_clause", "cycle_clause", "subquery", "subquery_operation_part", 
		"subquery_basic_elements", "query_block", "selected_element", "from_clause", 
		"select_list_elements", "table_ref_list", "table_ref", "table_ref_aux", 
		"table_ref_aux_internal", "join_clause", "join_on_part", "join_using_part", 
		"outer_join_type", "query_partition_clause", "flashback_query_clause", 
		"pivot_clause", "pivot_element", "pivot_for_clause", "pivot_in_clause", 
		"pivot_in_clause_element", "pivot_in_clause_elements", "unpivot_clause", 
		"unpivot_in_clause", "unpivot_in_elements", "hierarchical_query_clause", 
		"start_part", "group_by_clause", "group_by_elements", "rollup_cube_clause", 
		"grouping_sets_clause", "grouping_sets_elements", "having_clause", "model_clause", 
		"cell_reference_options", "return_rows_clause", "reference_model", "main_model", 
		"model_column_clauses", "model_column_partition_part", "model_column_list", 
		"model_column", "model_rules_clause", "model_rules_part", "model_rules_element", 
		"cell_assignment", "model_iterate_clause", "until_part", "order_by_clause", 
		"order_by_elements", "for_update_clause", "for_update_of_part", "for_update_options", 
		"update_statement", "update_set_clause", "column_based_update_set_clause", 
		"delete_statement", "insert_statement", "single_table_insert", "multi_table_insert", 
		"multi_table_element", "conditional_insert_clause", "conditional_insert_when_part", 
		"conditional_insert_else_part", "insert_into_clause", "values_clause", 
		"merge_statement", "merge_update_clause", "merge_element", "merge_update_delete_part", 
		"merge_insert_clause", "selected_tableview", "lock_table_statement", "wait_nowait_part", 
		"lock_table_element", "lock_mode", "general_table_ref", "static_returning_clause", 
		"error_logging_clause", "error_logging_into_part", "error_logging_reject_part", 
		"dml_table_expression_clause", "table_collection_expression", "subquery_restriction_clause", 
		"sample_clause", "seed_part", "cursor_expression", "expression_list", 
		"condition", "expression", "logical_or_expression", "logical_and_expression", 
		"negated_expression", "equality_expression", "multiset_expression", "multiset_type", 
		"relational_expression", "compound_expression", "relational_operator", 
		"like_type", "like_escape_part", "in_elements", "between_elements", "concatenation", 
		"additive_expression", "multiply_expression", "datetime_expression", "interval_expression", 
		"model_expression", "model_expression_element", "single_column_for_loop", 
		"for_like_part", "for_increment_decrement_type", "multi_column_for_loop", 
		"unary_expression", "case_statement", "simple_case_statement", "simple_case_when_part", 
		"searched_case_statement", "searched_case_when_part", "case_else_part", 
		"atom", "expression_or_vector", "vector_expr", "quantified_expression", 
		"string_function", "standard_function", "numeric_function_wrapper", "numeric_function", 
		"other_function", "over_clause_keyword", "within_or_over_clause_keyword", 
		"standard_prediction_function_keyword", "over_clause", "windowing_clause", 
		"windowing_type", "windowing_elements", "using_clause", "using_element", 
		"collect_order_by_part", "within_or_over_part", "cost_matrix_clause", 
		"xml_passing_clause", "xml_attributes_clause", "xml_namespaces_clause", 
		"xml_table_column", "xml_general_default_part", "xml_multiuse_expression_element", 
		"xmlroot_param_version_part", "xmlroot_param_standalone_part", "xmlserialize_param_enconding_part", 
		"xmlserialize_param_version_part", "xmlserialize_param_ident_part", "sql_plus_command", 
		"whenever_command", "set_command", "exit_command", "prompt_command", "show_errors_command", 
		"start_command", "partition_extension_clause", "column_alias", "table_alias", 
		"alias_quoted_string", "where_clause", "current_of_clause", "into_clause", 
		"xml_column_name", "cost_class_name", "attribute_name", "savepoint_name", 
		"rollback_segment_name", "table_var_name", "schema_name", "routine_name", 
		"package_name", "implementation_type_name", "parameter_name", "reference_model_name", 
		"main_model_name", "aggregate_function_name", "query_name", "constraint_name", 
		"label_name", "type_name", "sequence_name", "exception_name", "function_name", 
		"procedure_name", "trigger_name", "variable_name", "index_name", "cursor_name", 
		"record_name", "collection_name", "link_name", "column_name", "tableview_name", 
		"char_set_name", "synonym_name", "schema_object_name", "keep_clause", 
		"function_argument", "function_argument_analytic", "function_argument_modeling", 
		"respect_or_ignore_nulls", "argument", "type_spec", "datatype", "precision_part", 
		"native_datatype_element", "bind_variable", "general_element", "general_element_part", 
		"table_element", "constant", "numeric", "numeric_negative", "quoted_string", 
		"identifier", "id_expression", "not_equal_op", "greater_than_or_equals_op", 
		"less_than_or_equals_op", "concatenation_op", "outer_join_sign", "regular_id", 
		"string_function_name", "numeric_function_name"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "'A'", "'ADD'", "'AFTER'", "'AGENT'", "'AGGREGATE'", "'ALL'", "'ALTER'", 
		"'ANALYZE'", "'AND'", "'ANY'", "'ARRAY'", "'AS'", "'ASC'", "'ASSOCIATE'", 
		"'AT'", "'ATTRIBUTE'", "'AUDIT'", "'AUTHID'", "'AUTO'", "'AUTOMATIC'", 
		"'AUTONOMOUS_TRANSACTION'", "'BATCH'", "'BEFORE'", "'BEGIN'", "'BETWEEN'", 
		"'BFILE'", "'BINARY_DOUBLE'", "'BINARY_FLOAT'", "'BINARY_INTEGER'", "'BLOB'", 
		"'BLOCK'", "'BODY'", "'BOOLEAN'", "'BOTH'", "'BREADTH'", "'BULK'", "'BY'", 
		"'BYTE'", "'C'", "'CACHE'", "'CALL'", "'CANONICAL'", "'CASCADE'", "'CASE'", 
		"'CAST'", "'CHAR'", "'CHAR_CS'", "'CHARACTER'", "'CHECK'", "'CHR'", "'CLOB'", 
		"'CLOSE'", "'CLUSTER'", "'COALESCE'", "'COLLECT'", "'COLUMN'", "'COLUMNS'", 
		"'COMMENT'", "'COMMIT'", "'COMMITTED'", "'COMPATIBILITY'", "'COMPILE'", 
		"'COMPOUND'", "'CONNECT'", "'CONNECT_BY_ROOT'", "'CONSTANT'", "'CONSTRAINT'", 
		"'CONSTRAINTS'", "'CONSTRUCTOR'", "'CONTENT'", "'CONTEXT'", "'CONTINUE'", 
		"'CONVERT'", "'CORRUPT_XID'", "'CORRUPT_XID_ALL'", "'COST'", "'COUNT'", 
		"'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_USER'", "'CURSOR'", 
		"'CUSTOMDATUM'", "'CYCLE'", "'DATA'", "'DATABASE'", "'DATE'", "'DAY'", 
		"'DB_ROLE_CHANGE'", "'DBTIMEZONE'", "'DDL'", "'DEBUG'", "'DEC'", "'DECIMAL'", 
		"'DECLARE'", "'DECOMPOSE'", "'DECREMENT'", "'DEFAULT'", "'DEFAULTS'", 
		"'DEFERRED'", "'DEFINER'", "'DELETE'", "'DEPTH'", "'DESC'", "'DETERMINISTIC'", 
		"'DIMENSION'", "'DISABLE'", "'DISASSOCIATE'", "'DISTINCT'", "'DOCUMENT'", 
		"'DOUBLE'", "'DROP'", "'DSINTERVAL_UNCONSTRAINED'", "'EACH'", "'ELEMENT'", 
		"'ELSE'", "'ELSIF'", "'EMPTY'", "'ENABLE'", "'ENCODING'", "'END'", "'ENTITYESCAPING'", 
		"'ERR'", "'ERRORS'", "'ESCAPE'", "'EVALNAME'", "'EXCEPTION'", "'EXCEPTION_INIT'", 
		"'EXCEPTIONS'", "'EXCLUDE'", "'EXCLUSIVE'", "'EXECUTE'", "'EXISTS'", "'EXIT'", 
		"'EXPLAIN'", "'EXTERNAL'", "'EXTRACT'", "'FAILURE'", "'FALSE'", "'FETCH'", 
		"'FINAL'", "'FIRST'", "'FIRST_VALUE'", "'FLOAT'", "'FOLLOWING'", "'FOLLOWS'", 
		"'FOR'", "'FORALL'", "'FORCE'", "'FOREIGN'", "'FROM'", "'FULL'", "'FUNCTION'", 
		"'GOTO'", "'GRANT'", "'GROUP'", "'GROUPING'", "'HASH'", "'HAVING'", "'HIDE'", 
		"'HOUR'", "'IF'", "'IGNORE'", "'IMMEDIATE'", "'IN'", "'INCLUDE'", "'INCLUDING'", 
		"'INCREMENT'", "'INDENT'", "'INDEX'", "'INDEXED'", "'INDICATOR'", "'INDICES'", 
		"'INFINITE'", "'INLINE'", "'INNER'", "'INOUT'", "'INSERT'", "'INSTANTIABLE'", 
		"'INSTEAD'", "'INT'", "'INTEGER'", "'INTERSECT'", "'INTERVAL'", "'INTO'", 
		"'INVALIDATE'", "'IS'", "'ISOLATION'", "'ITERATE'", "'JAVA'", "'JOIN'", 
		"'KEEP'", "'KEY'", "'LANGUAGE'", "'LAST'", "'LAST_VALUE'", "'LEADING'", 
		"'LEFT'", "'LEVEL'", "'LIBRARY'", "'LIKE'", "'LIKE2'", "'LIKE4'", "'LIKEC'", 
		"'LIMIT'", "'LOCAL'", "'LOCK'", "'LOCKED'", "'LOG'", "'LOGOFF'", "'LOGON'", 
		"'LONG'", "'LOOP'", "'MAIN'", "'MAP'", "'MATCHED'", "'MAXVALUE'", "'MEASURES'", 
		"'MEMBER'", "'MERGE'", "'MINUS'", "'MINUTE'", "'MINVALUE'", "'MLSLABEL'", 
		"'MODE'", "'MODEL'", "'MODIFY'", "'MONTH'", "'MULTISET'", "'NAME'", "'NAN'", 
		"'NATURAL'", "'NATURALN'", "'NAV'", "'NCHAR'", "'NCHAR_CS'", "'NCLOB'", 
		"'NESTED'", "'NEW'", "'NO'", "'NOAUDIT'", "'NOCACHE'", "'NOCOPY'", "'NOCYCLE'", 
		"'NOENTITYESCAPING'", "'NOMAXVALUE'", "'NOMINVALUE'", "'NONE'", "'NOORDER'", 
		"'NOSCHEMACHECK'", "'NOT'", "'NOWAIT'", "'NULL'", "'NULLS'", "'NUMBER'", 
		"'NUMERIC'", "'NVARCHAR2'", "'OBJECT'", "'OF'", "'OFF'", "'OID'", "'OLD'", 
		"'ON'", "'ONLY'", "'OPEN'", "'OPTION'", "'OR'", "'ORADATA'", "'ORDER'", 
		"'ORDINALITY'", "'OSERROR'", "'OUT'", "'OUTER'", "'OVER'", "'OVERRIDING'", 
		"'PACKAGE'", "'PARALLEL_ENABLE'", "'PARAMETERS'", "'PARENT'", "'PARTITION'", 
		"'PASSING'", "'PATH'", "'%ISOPEN'", "'%FOUND'", "'%NOTFOUND'", "'%ROWCOUNT'", 
		"'%ROWTYPE'", "'%TYPE'", "'PIPE'", "'PIPELINED'", "'PIVOT'", "'PLAN'", 
		"'PUBLIC'", "'PLS_INTEGER'", "'POSITIVE'", "'POSITIVEN'", "'PRAGMA'", 
		"'PRECEDING'", "'PRECISION'", "'PRESENT'", "'PRIMARY'", "'PRIOR'", "'PROCEDURE'", 
		"'RAISE'", "'RANGE'", "'RAW'", "'READ'", "'REAL'", "'RECORD'", "'REF'", 
		"'REFERENCE'", "'REFERENCES'", "'REFERENCING'", "'REJECT'", "'RELIES_ON'", 
		"'RENAME'", "'REPLACE'", "'RESPECT'", "'RESTRICT_REFERENCES'", "'RESULT'", 
		"'RESULT_CACHE'", "'RETURN'", "'RETURNING'", "'REUSE'", "'REVERSE'", "'REVOKE'", 
		"'RIGHT'", "'ROLLBACK'", "'ROLLUP'", "'ROW'", "'ROWID'", "'ROWS'", "'RULES'", 
		"'SAMPLE'", "'SAVE'", "'SAVEPOINT'", "'SCHEMA'", "'SCHEMACHECK'", "'SCN'", 
		"'SEARCH'", "'SECOND'", "'SEED'", "'SEGMENT'", "'SELECT'", "'SELF'", "'SEQUENCE'", 
		"'SEQUENTIAL'", "'SERIALIZABLE'", "'SERIALLY_REUSABLE'", "'SERVERERROR'", 
		"'SESSIONTIMEZONE'", "'SET'", "'SETS'", "'SETTINGS'", "'SHARE'", "'SHOW'", 
		"'SHUTDOWN'", "'SIBLINGS'", "'SIGNTYPE'", "'SIMPLE_INTEGER'", "'SINGLE'", 
		"'SIZE'", "'SKIP'", "'SMALLINT'", "'SNAPSHOT'", "'SOME'", "'SPECIFICATION'", 
		"'SQLDATA'", "'SQLERROR'", "'STANDALONE'", "'START'", "'STARTUP'", "'STATEMENT'", 
		"'STATEMENT_ID'", "'STATIC'", "'STATISTICS'", "'STRING'", "'SUBMULTISET'", 
		"'SUBPARTITION'", "'SUBSTITUTABLE'", "'SUBTYPE'", "'SUCCESS'", "'SUSPEND'", 
		"'SYNONYM'", "'TABLE'", "'THE'", "'THEN'", "'TIME'", "'TIMESTAMP'", "'TIMESTAMP_LTZ_UNCONSTRAINED'", 
		"'TIMESTAMP_TZ_UNCONSTRAINED'", "'TIMESTAMP_UNCONSTRAINED'", "'TIMEZONE_ABBR'", 
		"'TIMEZONE_HOUR'", "'TIMEZONE_MINUTE'", "'TIMEZONE_REGION'", "'TO'", "'TRAILING'", 
		"'TRANSACTION'", "'TRANSLATE'", "'TREAT'", "'TRIGGER'", "'TRUE'", "'TRUNCATE'", 
		"'TYPE'", "'UNBOUNDED'", "'UNDER'", "'UNION'", "'UNIQUE'", "'UNLIMITED'", 
		"'UNPIVOT'", "'UNTIL'", "'UPDATE'", "'UPDATED'", "'UPSERT'", "'UROWID'", 
		"'USE'", "'USING'", "'VALIDATE'", "'VALUE'", "'VALUES'", "'VARCHAR'", 
		"'VARCHAR2'", "'VARIABLE'", "'VARRAY'", "'VARYING'", "'VERSION'", "'VERSIONS'", 
		"'WAIT'", "'WARNING'", "'WELLFORMED'", "'WHEN'", "'WHENEVER'", "'WHERE'", 
		"'WHILE'", "'WITH'", "'WITHIN'", "'WORK'", "'WRITE'", "'XML'", "'XMLAGG'", 
		"'XMLATTRIBUTES'", "'XMLCAST'", "'XMLCOLATTVAL'", "'XMLELEMENT'", "'XMLEXISTS'", 
		"'XMLFOREST'", "'XMLNAMESPACES'", "'XMLPARSE'", "'XMLPI'", "'XMLQUERY'", 
		"'XMLROOT'", "'XMLSERIALIZE'", "'XMLTABLE'", "'YEAR'", "'YES'", "'YMINTERVAL_UNCONSTRAINED'", 
		"'ZONE'", "'PREDICTION'", "'PREDICTION_BOUNDS'", "'PREDICTION_COST'", 
		"'PREDICTION_DETAILS'", "'PREDICTION_PROBABILITY'", "'PREDICTION_SET'", 
		"'CUME_DIST'", "'DENSE_RANK'", "'LISTAGG'", "'PERCENT_RANK'", "'PERCENTILE_CONT'", 
		"'PERCENTILE_DISC'", "'RANK'", "'AVG'", "'CORR'", "'COVAR_'", "'DECODE'", 
		"'LAG'", "'LEAD'", "'MAX'", "'MEDIAN'", "'MIN'", "'NTILE'", "'NVL'", "'RATIO_TO_REPORT'", 
		"'REGR_'", "'ROUND'", "'ROW_NUMBER'", "'SUBSTR'", "'TO_CHAR'", "'TRIM'", 
		"'SUM'", "'STDDEV'", "'VAR_'", "'VARIANCE'", "'LEAST'", "'GREATEST'", 
		"'TO_DATE'", null, null, null, "'..'", "'.'", null, null, null, null, 
		"'%'", "'&'", "'('", "')'", "'**'", "'*'", "'+'", "'-'", "','", "'/'", 
		"'@'", "':='", null, "':'", "';'", "'<='", "'<'", "'>='", null, "'^'", 
		"'~'", "'!'", "'>'", "'||'", "'|'", "'='", "'['", "']'", "'_'", null, 
		null, null, null, null, null, "'@!'"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, "A_LETTER", "ADD", "AFTER", "AGENT", "AGGREGATE", "ALL", "ALTER", 
		"ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC", "ASSOCIATE", "AT", "ATTRIBUTE", 
		"AUDIT", "AUTHID", "AUTO", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", "BATCH", 
		"BEFORE", "BEGIN", "BETWEEN", "BFILE", "BINARY_DOUBLE", "BINARY_FLOAT", 
		"BINARY_INTEGER", "BLOB", "BLOCK", "BODY", "BOOLEAN", "BOTH", "BREADTH", 
		"BULK", "BY", "BYTE", "C_LETTER", "CACHE", "CALL", "CANONICAL", "CASCADE", 
		"CASE", "CAST", "CHAR", "CHAR_CS", "CHARACTER", "CHECK", "CHR", "CLOB", 
		"CLOSE", "CLUSTER", "COALESCE", "COLLECT", "COLUMN", "COLUMNS", "COMMENT", 
		"COMMIT", "COMMITTED", "COMPATIBILITY", "COMPILE", "COMPOUND", "CONNECT", 
		"CONNECT_BY_ROOT", "CONSTANT", "CONSTRAINT", "CONSTRAINTS", "CONSTRUCTOR", 
		"CONTENT", "CONTEXT", "CONTINUE", "CONVERT", "CORRUPT_XID", "CORRUPT_XID_ALL", 
		"COST", "COUNT", "CREATE", "CROSS", "CUBE", "CURRENT", "CURRENT_USER", 
		"CURSOR", "CUSTOMDATUM", "CYCLE", "DATA", "DATABASE", "DATE", "DAY", "DB_ROLE_CHANGE", 
		"DBTIMEZONE", "DDL", "DEBUG", "DEC", "DECIMAL", "DECLARE", "DECOMPOSE", 
		"DECREMENT", "DEFAULT", "DEFAULTS", "DEFERRED", "DEFINER", "DELETE", "DEPTH", 
		"DESC", "DETERMINISTIC", "DIMENSION", "DISABLE", "DISASSOCIATE", "DISTINCT", 
		"DOCUMENT", "DOUBLE", "DROP", "DSINTERVAL_UNCONSTRAINED", "EACH", "ELEMENT", 
		"ELSE", "ELSIF", "EMPTY", "ENABLE", "ENCODING", "END", "ENTITYESCAPING", 
		"ERR", "ERRORS", "ESCAPE", "EVALNAME", "EXCEPTION", "EXCEPTION_INIT", 
		"EXCEPTIONS", "EXCLUDE", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXIT", "EXPLAIN", 
		"EXTERNAL", "EXTRACT", "FAILURE", "FALSE", "FETCH", "FINAL", "FIRST", 
		"FIRST_VALUE", "FLOAT", "FOLLOWING", "FOLLOWS", "FOR", "FORALL", "FORCE", 
		"FOREIGN", "FROM", "FULL", "FUNCTION", "GOTO", "GRANT", "GROUP", "GROUPING", 
		"HASH", "HAVING", "HIDE", "HOUR", "IF", "IGNORE", "IMMEDIATE", "IN", "INCLUDE", 
		"INCLUDING", "INCREMENT", "INDENT", "INDEX", "INDEXED", "INDICATOR", "INDICES", 
		"INFINITE", "INLINE", "INNER", "INOUT", "INSERT", "INSTANTIABLE", "INSTEAD", 
		"INT", "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVALIDATE", "IS", 
		"ISOLATION", "ITERATE", "JAVA", "JOIN", "KEEP", "KEY", "LANGUAGE", "LAST", 
		"LAST_VALUE", "LEADING", "LEFT", "LEVEL", "LIBRARY", "LIKE", "LIKE2", 
		"LIKE4", "LIKEC", "LIMIT", "LOCAL", "LOCK", "LOCKED", "LOG", "LOGOFF", 
		"LOGON", "LONG", "LOOP", "MAIN", "MAP", "MATCHED", "MAXVALUE", "MEASURES", 
		"MEMBER", "MERGE", "MINUS", "MINUTE", "MINVALUE", "MLSLABEL", "MODE", 
		"MODEL", "MODIFY", "MONTH", "MULTISET", "NAME", "NAN", "NATURAL", "NATURALN", 
		"NAV", "NCHAR", "NCHAR_CS", "NCLOB", "NESTED", "NEW", "NO", "NOAUDIT", 
		"NOCACHE", "NOCOPY", "NOCYCLE", "NOENTITYESCAPING", "NOMAXVALUE", "NOMINVALUE", 
		"NONE", "NOORDER", "NOSCHEMACHECK", "NOT", "NOWAIT", "NULL", "NULLS", 
		"NUMBER", "NUMERIC", "NVARCHAR2", "OBJECT", "OF", "OFF", "OID", "OLD", 
		"ON", "ONLY", "OPEN", "OPTION", "OR", "ORADATA", "ORDER", "ORDINALITY", 
		"OSERROR", "OUT", "OUTER", "OVER", "OVERRIDING", "PACKAGE", "PARALLEL_ENABLE", 
		"PARAMETERS", "PARENT", "PARTITION", "PASSING", "PATH", "PERCENT_ISOPEN", 
		"PERCENT_FOUND", "PERCENT_NOTFOUND", "PERCENT_ROWCOUNT", "PERCENT_ROWTYPE", 
		"PERCENT_TYPE", "PIPE", "PIPELINED", "PIVOT", "PLAN", "PUBLIC", "PLS_INTEGER", 
		"POSITIVE", "POSITIVEN", "PRAGMA", "PRECEDING", "PRECISION", "PRESENT", 
		"PRIMARY", "PRIOR", "PROCEDURE", "RAISE", "RANGE", "RAW", "READ", "REAL", 
		"RECORD", "REF", "REFERENCE", "REFERENCES", "REFERENCING", "REJECT", "RELIES_ON", 
		"RENAME", "REPLACE", "RESPECT", "RESTRICT_REFERENCES", "RESULT", "RESULT_CACHE", 
		"RETURN", "RETURNING", "REUSE", "REVERSE", "REVOKE", "RIGHT", "ROLLBACK", 
		"ROLLUP", "ROW", "ROWID", "ROWS", "RULES", "SAMPLE", "SAVE", "SAVEPOINT", 
		"SCHEMA", "SCHEMACHECK", "SCN", "SEARCH", "SECOND", "SEED", "SEGMENT", 
		"SELECT", "SELF", "SEQUENCE", "SEQUENTIAL", "SERIALIZABLE", "SERIALLY_REUSABLE", 
		"SERVERERROR", "SESSIONTIMEZONE", "SET", "SETS", "SETTINGS", "SHARE", 
		"SHOW", "SHUTDOWN", "SIBLINGS", "SIGNTYPE", "SIMPLE_INTEGER", "SINGLE", 
		"SIZE", "SKIP_", "SMALLINT", "SNAPSHOT", "SOME", "SPECIFICATION", "SQLDATA", 
		"SQLERROR", "STANDALONE", "START", "STARTUP", "STATEMENT", "STATEMENT_ID", 
		"STATIC", "STATISTICS", "STRING", "SUBMULTISET", "SUBPARTITION", "SUBSTITUTABLE", 
		"SUBTYPE", "SUCCESS", "SUSPEND", "SYNONYM", "TABLE", "THE", "THEN", "TIME", 
		"TIMESTAMP", "TIMESTAMP_LTZ_UNCONSTRAINED", "TIMESTAMP_TZ_UNCONSTRAINED", 
		"TIMESTAMP_UNCONSTRAINED", "TIMEZONE_ABBR", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", 
		"TIMEZONE_REGION", "TO", "TRAILING", "TRANSACTION", "TRANSLATE", "TREAT", 
		"TRIGGER", "TRUE", "TRUNCATE", "TYPE", "UNBOUNDED", "UNDER", "UNION", 
		"UNIQUE", "UNLIMITED", "UNPIVOT", "UNTIL", "UPDATE", "UPDATED", "UPSERT", 
		"UROWID", "USE", "USING", "VALIDATE", "VALUE", "VALUES", "VARCHAR", "VARCHAR2", 
		"VARIABLE", "VARRAY", "VARYING", "VERSION", "VERSIONS", "WAIT", "WARNING", 
		"WELLFORMED", "WHEN", "WHENEVER", "WHERE", "WHILE", "WITH", "WITHIN", 
		"WORK", "WRITE", "XML", "XMLAGG", "XMLATTRIBUTES", "XMLCAST", "XMLCOLATTVAL", 
		"XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", 
		"XMLQUERY", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR", "YES", "YMINTERVAL_UNCONSTRAINED", 
		"ZONE", "PREDICTION", "PREDICTION_BOUNDS", "PREDICTION_COST", "PREDICTION_DETAILS", 
		"PREDICTION_PROBABILITY", "PREDICTION_SET", "CUME_DIST", "DENSE_RANK", 
		"LISTAGG", "PERCENT_RANK", "PERCENTILE_CONT", "PERCENTILE_DISC", "RANK", 
		"AVG", "CORR", "COVAR_", "DECODE", "LAG", "LEAD", "MAX", "MEDIAN", "MIN", 
		"NTILE", "NVL", "RATIO_TO_REPORT", "REGR_", "ROUND", "ROW_NUMBER", "SUBSTR", 
		"TO_CHAR", "TRIM", "SUM", "STDDEV", "VAR_", "VARIANCE", "LEAST", "GREATEST", 
		"TO_DATE", "NATIONAL_CHAR_STRING_LIT", "BIT_STRING_LIT", "HEX_STRING_LIT", 
		"DOUBLE_PERIOD", "PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", 
		"CHAR_STRING", "DELIMITED_ID", "PERCENT", "AMPERSAND", "LEFT_PAREN", "RIGHT_PAREN", 
		"DOUBLE_ASTERISK", "ASTERISK", "PLUS_SIGN", "MINUS_SIGN", "COMMA", "SOLIDUS", 
		"AT_SIGN", "ASSIGN_OP", "BINDVAR", "COLON", "SEMICOLON", "LESS_THAN_OR_EQUALS_OP", 
		"LESS_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", "NOT_EQUAL_OP", "CARRET_OPERATOR_PART", 
		"TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", "GREATER_THAN_OP", 
		"CONCATENATION_OP", "VERTICAL_BAR", "EQUALS_OP", "LEFT_BRACKET", "RIGHT_BRACKET", 
		"INTRODUCER", "SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "PROMPT", 
		"START_CMD", "REGULAR_ID", "ZV"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "PlSqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public PlSqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class Swallow_to_semiContext extends ParserRuleContext {
		public Swallow_to_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_swallow_to_semi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSwallow_to_semi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSwallow_to_semi(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSwallow_to_semi(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Swallow_to_semiContext swallow_to_semi() throws RecognitionException {
		Swallow_to_semiContext _localctx = new Swallow_to_semiContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_swallow_to_semi);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(803); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(802);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==SEMICOLON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				setState(805); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COALESCE) | (1L << COLLECT) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (END - 64)) | (1L << (ENTITYESCAPING - 64)) | (1L << (ERR - 64)) | (1L << (ERRORS - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVALNAME - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FOREIGN - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)) | (1L << (INTO - 128)) | (1L << (INVALIDATE - 128)) | (1L << (IS - 128)) | (1L << (ISOLATION - 128)) | (1L << (ITERATE - 128)) | (1L << (JAVA - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (KEY - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)) | (1L << (NONE - 192)) | (1L << (NOORDER - 192)) | (1L << (NOSCHEMACHECK - 192)) | (1L << (NOT - 192)) | (1L << (NOWAIT - 192)) | (1L << (NULL - 192)) | (1L << (NULLS - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR2 - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PERCENT_ISOPEN - 256)) | (1L << (PERCENT_FOUND - 256)) | (1L << (PERCENT_NOTFOUND - 256)) | (1L << (PERCENT_ROWCOUNT - 256)) | (1L << (PERCENT_ROWTYPE - 256)) | (1L << (PERCENT_TYPE - 256)) | (1L << (PIPE - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PUBLIC - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIMARY - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCES - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)) | (1L << (RENAME - 256)) | (1L << (REPLACE - 256)) | (1L << (RESPECT - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RESTRICT_REFERENCES - 320)) | (1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)) | (1L << (STRING - 320)) | (1L << (SUBMULTISET - 320)) | (1L << (SUBPARTITION - 320)) | (1L << (SUBSTITUTABLE - 320)) | (1L << (SUBTYPE - 320)) | (1L << (SUCCESS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (SUSPEND - 384)) | (1L << (SYNONYM - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TO - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)) | (1L << (WRITE - 384)) | (1L << (XML - 384)) | (1L << (XMLAGG - 384)) | (1L << (XMLATTRIBUTES - 384)) | (1L << (XMLCAST - 384)) | (1L << (XMLCOLATTVAL - 384)) | (1L << (XMLELEMENT - 384)) | (1L << (XMLEXISTS - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (COVAR_ - 448)) | (1L << (DECODE - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (NVL - 448)) | (1L << (RATIO_TO_REPORT - 448)) | (1L << (REGR_ - 448)) | (1L << (ROUND - 448)) | (1L << (ROW_NUMBER - 448)) | (1L << (SUBSTR - 448)) | (1L << (TO_CHAR - 448)) | (1L << (TRIM - 448)) | (1L << (SUM - 448)) | (1L << (STDDEV - 448)) | (1L << (VAR_ - 448)) | (1L << (VARIANCE - 448)) | (1L << (LEAST - 448)) | (1L << (GREATEST - 448)) | (1L << (TO_DATE - 448)) | (1L << (NATIONAL_CHAR_STRING_LIT - 448)) | (1L << (BIT_STRING_LIT - 448)) | (1L << (HEX_STRING_LIT - 448)) | (1L << (DOUBLE_PERIOD - 448)) | (1L << (PERIOD - 448)) | (1L << (UNSIGNED_INTEGER - 448)) | (1L << (APPROXIMATE_NUM_LIT - 448)) | (1L << (CHAR_STRING - 448)) | (1L << (DELIMITED_ID - 448)) | (1L << (PERCENT - 448)) | (1L << (AMPERSAND - 448)) | (1L << (LEFT_PAREN - 448)) | (1L << (RIGHT_PAREN - 448)) | (1L << (DOUBLE_ASTERISK - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (ASTERISK - 512)) | (1L << (PLUS_SIGN - 512)) | (1L << (MINUS_SIGN - 512)) | (1L << (COMMA - 512)) | (1L << (SOLIDUS - 512)) | (1L << (AT_SIGN - 512)) | (1L << (ASSIGN_OP - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (LESS_THAN_OR_EQUALS_OP - 512)) | (1L << (LESS_THAN_OP - 512)) | (1L << (GREATER_THAN_OR_EQUALS_OP - 512)) | (1L << (NOT_EQUAL_OP - 512)) | (1L << (CARRET_OPERATOR_PART - 512)) | (1L << (TILDE_OPERATOR_PART - 512)) | (1L << (EXCLAMATION_OPERATOR_PART - 512)) | (1L << (GREATER_THAN_OP - 512)) | (1L << (CONCATENATION_OP - 512)) | (1L << (VERTICAL_BAR - 512)) | (1L << (EQUALS_OP - 512)) | (1L << (LEFT_BRACKET - 512)) | (1L << (RIGHT_BRACKET - 512)) | (1L << (INTRODUCER - 512)) | (1L << (SPACES - 512)) | (1L << (SINGLE_LINE_COMMENT - 512)) | (1L << (MULTI_LINE_COMMENT - 512)) | (1L << (PROMPT - 512)) | (1L << (START_CMD - 512)) | (1L << (REGULAR_ID - 512)) | (1L << (ZV - 512)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compilation_unitContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(PlSqlParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compilation_unit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCompilation_unit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCompilation_unit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCompilation_unit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compilation_unitContext compilation_unit() throws RecognitionException {
		Compilation_unitContext _localctx = new Compilation_unitContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_compilation_unit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(810);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << BEGIN) | (1L << COMMENT))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (CREATE - 78)) | (1L << (DELETE - 78)) | (1L << (DROP - 78)) | (1L << (EXPLAIN - 78)))) != 0) || ((((_la - 179)) & ~0x3f) == 0 && ((1L << (_la - 179)) & ((1L << (INSERT - 179)) | (1L << (LOCK - 179)) | (1L << (MERGE - 179)))) != 0) || _la==SELECT || _la==UPDATE || _la==WITH || _la==LEFT_PAREN) {
				{
				{
				setState(807);
				unit_statement();
				}
				}
				setState(812);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(813);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_scriptContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(PlSqlParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public List<Sql_plus_commandContext> sql_plus_command() {
			return getRuleContexts(Sql_plus_commandContext.class);
		}
		public Sql_plus_commandContext sql_plus_command(int i) {
			return getRuleContext(Sql_plus_commandContext.class,i);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(PlSqlParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(PlSqlParser.SEMICOLON, i);
		}
		public Sql_scriptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_script; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSql_script(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSql_script(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSql_script(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_scriptContext sql_script() throws RecognitionException {
		Sql_scriptContext _localctx = new Sql_scriptContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sql_script);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(824);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << BEGIN) | (1L << COMMENT))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (CREATE - 78)) | (1L << (DELETE - 78)) | (1L << (DROP - 78)) | (1L << (EXIT - 78)) | (1L << (EXPLAIN - 78)))) != 0) || ((((_la - 179)) & ~0x3f) == 0 && ((1L << (_la - 179)) & ((1L << (INSERT - 179)) | (1L << (LOCK - 179)) | (1L << (MERGE - 179)))) != 0) || ((((_la - 345)) & ~0x3f) == 0 && ((1L << (_la - 345)) & ((1L << (SELECT - 345)) | (1L << (SET - 345)) | (1L << (SHOW - 345)))) != 0) || ((((_la - 414)) & ~0x3f) == 0 && ((1L << (_la - 414)) & ((1L << (UPDATE - 414)) | (1L << (WHENEVER - 414)) | (1L << (WITH - 414)))) != 0) || ((((_la - 509)) & ~0x3f) == 0 && ((1L << (_la - 509)) & ((1L << (LEFT_PAREN - 509)) | (1L << (SOLIDUS - 509)) | (1L << (PROMPT - 509)) | (1L << (START_CMD - 509)))) != 0)) {
				{
				{
				setState(817);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALTER:
				case BEGIN:
				case COMMENT:
				case CREATE:
				case DELETE:
				case DROP:
				case EXPLAIN:
				case INSERT:
				case LOCK:
				case MERGE:
				case SELECT:
				case UPDATE:
				case WITH:
				case LEFT_PAREN:
					{
					setState(815);
					unit_statement();
					}
					break;
				case EXIT:
				case SET:
				case SHOW:
				case WHENEVER:
				case SOLIDUS:
				case PROMPT:
				case START_CMD:
					{
					setState(816);
					sql_plus_command();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(820);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEMICOLON) {
					{
					setState(819);
					match(SEMICOLON);
					}
				}

				}
				}
				setState(826);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(827);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unit_statementContext extends ParserRuleContext {
		public Alter_functionContext alter_function() {
			return getRuleContext(Alter_functionContext.class,0);
		}
		public Alter_packageContext alter_package() {
			return getRuleContext(Alter_packageContext.class,0);
		}
		public Alter_procedureContext alter_procedure() {
			return getRuleContext(Alter_procedureContext.class,0);
		}
		public Alter_sequenceContext alter_sequence() {
			return getRuleContext(Alter_sequenceContext.class,0);
		}
		public Alter_triggerContext alter_trigger() {
			return getRuleContext(Alter_triggerContext.class,0);
		}
		public Alter_typeContext alter_type() {
			return getRuleContext(Alter_typeContext.class,0);
		}
		public Alter_tableContext alter_table() {
			return getRuleContext(Alter_tableContext.class,0);
		}
		public Create_function_bodyContext create_function_body() {
			return getRuleContext(Create_function_bodyContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_packageContext create_package() {
			return getRuleContext(Create_packageContext.class,0);
		}
		public Create_package_bodyContext create_package_body() {
			return getRuleContext(Create_package_bodyContext.class,0);
		}
		public Create_tableContext create_table() {
			return getRuleContext(Create_tableContext.class,0);
		}
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		public Create_triggerContext create_trigger() {
			return getRuleContext(Create_triggerContext.class,0);
		}
		public Create_typeContext create_type() {
			return getRuleContext(Create_typeContext.class,0);
		}
		public Create_synonymContext create_synonym() {
			return getRuleContext(Create_synonymContext.class,0);
		}
		public Drop_functionContext drop_function() {
			return getRuleContext(Drop_functionContext.class,0);
		}
		public Drop_packageContext drop_package() {
			return getRuleContext(Drop_packageContext.class,0);
		}
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		public Drop_sequenceContext drop_sequence() {
			return getRuleContext(Drop_sequenceContext.class,0);
		}
		public Drop_triggerContext drop_trigger() {
			return getRuleContext(Drop_triggerContext.class,0);
		}
		public Drop_typeContext drop_type() {
			return getRuleContext(Drop_typeContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Drop_tableContext drop_table() {
			return getRuleContext(Drop_tableContext.class,0);
		}
		public Comment_on_columnContext comment_on_column() {
			return getRuleContext(Comment_on_columnContext.class,0);
		}
		public Comment_on_tableContext comment_on_table() {
			return getRuleContext(Comment_on_tableContext.class,0);
		}
		public Anonymous_blockContext anonymous_block() {
			return getRuleContext(Anonymous_blockContext.class,0);
		}
		public Unit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUnit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUnit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitUnit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unit_statementContext unit_statement() throws RecognitionException {
		Unit_statementContext _localctx = new Unit_statementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_unit_statement);
		try {
			setState(856);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(829);
				alter_function();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(830);
				alter_package();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(831);
				alter_procedure();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(832);
				alter_sequence();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(833);
				alter_trigger();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(834);
				alter_type();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(835);
				alter_table();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(836);
				create_function_body();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(837);
				create_procedure_body();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(838);
				create_package();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(839);
				create_package_body();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(840);
				create_table();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(841);
				create_sequence();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(842);
				create_trigger();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(843);
				create_type();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(844);
				create_synonym();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(845);
				drop_function();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(846);
				drop_package();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(847);
				drop_procedure();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(848);
				drop_sequence();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(849);
				drop_trigger();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(850);
				drop_type();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(851);
				data_manipulation_language_statements();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(852);
				drop_table();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(853);
				comment_on_column();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(854);
				comment_on_table();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(855);
				anonymous_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_functionContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public Drop_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitDrop_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_functionContext drop_function() throws RecognitionException {
		Drop_functionContext _localctx = new Drop_functionContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_drop_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(858);
			match(DROP);
			setState(859);
			match(FUNCTION);
			setState(860);
			function_name();
			setState(861);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_functionContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public Alter_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitAlter_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_functionContext alter_function() throws RecognitionException {
		Alter_functionContext _localctx = new Alter_functionContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_alter_function);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(863);
			match(ALTER);
			setState(864);
			match(FUNCTION);
			setState(865);
			function_name();
			setState(866);
			match(COMPILE);
			setState(868);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				setState(867);
				match(DEBUG);
				}
				break;
			}
			setState(873);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(870);
					compiler_parameters_clause();
					}
					} 
				}
				setState(875);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,7,_ctx);
			}
			setState(878);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(876);
				match(REUSE);
				setState(877);
				match(SETTINGS);
				}
			}

			setState(880);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_function_bodyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public Implementation_type_nameContext implementation_type_name() {
			return getRuleContext(Implementation_type_nameContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public List<Invoker_rights_clauseContext> invoker_rights_clause() {
			return getRuleContexts(Invoker_rights_clauseContext.class);
		}
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return getRuleContext(Invoker_rights_clauseContext.class,i);
		}
		public List<Parallel_enable_clauseContext> parallel_enable_clause() {
			return getRuleContexts(Parallel_enable_clauseContext.class);
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return getRuleContext(Parallel_enable_clauseContext.class,i);
		}
		public List<Result_cache_clauseContext> result_cache_clause() {
			return getRuleContexts(Result_cache_clauseContext.class);
		}
		public Result_cache_clauseContext result_cache_clause(int i) {
			return getRuleContext(Result_cache_clauseContext.class,i);
		}
		public List<TerminalNode> DETERMINISTIC() { return getTokens(PlSqlParser.DETERMINISTIC); }
		public TerminalNode DETERMINISTIC(int i) {
			return getToken(PlSqlParser.DETERMINISTIC, i);
		}
		public TerminalNode PIPELINED() { return getToken(PlSqlParser.PIPELINED, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlSqlParser.AGGREGATE, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Create_function_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_function_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_function_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCreate_function_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_function_bodyContext create_function_body() throws RecognitionException {
		Create_function_bodyContext _localctx = new Create_function_bodyContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_create_function_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(882);
			match(CREATE);
			setState(885);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(883);
				match(OR);
				setState(884);
				match(REPLACE);
				}
			}

			setState(887);
			match(FUNCTION);
			setState(888);
			function_name();
			setState(900);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(889);
				match(LEFT_PAREN);
				setState(890);
				parameter();
				setState(895);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(891);
					match(COMMA);
					setState(892);
					parameter();
					}
					}
					setState(897);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(898);
				match(RIGHT_PAREN);
				}
			}

			setState(902);
			match(RETURN);
			setState(903);
			type_spec();
			setState(910);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AUTHID || _la==DETERMINISTIC || _la==PARALLEL_ENABLE || _la==RESULT_CACHE) {
				{
				setState(908);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTHID:
					{
					setState(904);
					invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					setState(905);
					parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					setState(906);
					result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					setState(907);
					match(DETERMINISTIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(912);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(933);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				{
				{
				setState(914);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PIPELINED) {
					{
					setState(913);
					match(PIPELINED);
					}
				}

				setState(916);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(928);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
				case 1:
					{
					setState(918);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DECLARE) {
						{
						setState(917);
						match(DECLARE);
						}
					}

					setState(923);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
						{
						{
						setState(920);
						declare_spec();
						}
						}
						setState(925);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(926);
					body();
					}
					break;
				case 2:
					{
					setState(927);
					call_spec();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				setState(930);
				_la = _input.LA(1);
				if ( !(_la==AGGREGATE || _la==PIPELINED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(931);
				match(USING);
				setState(932);
				implementation_type_name();
				}
				break;
			}
			setState(935);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parallel_enable_clauseContext extends ParserRuleContext {
		public TerminalNode PARALLEL_ENABLE() { return getToken(PlSqlParser.PARALLEL_ENABLE, 0); }
		public Partition_by_clauseContext partition_by_clause() {
			return getRuleContext(Partition_by_clauseContext.class,0);
		}
		public Parallel_enable_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parallel_enable_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterParallel_enable_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitParallel_enable_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitParallel_enable_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parallel_enable_clauseContext parallel_enable_clause() throws RecognitionException {
		Parallel_enable_clauseContext _localctx = new Parallel_enable_clauseContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_parallel_enable_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(937);
			match(PARALLEL_ENABLE);
			setState(939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(938);
				partition_by_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_by_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode ANY() { return getToken(PlSqlParser.ANY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode HASH() { return getToken(PlSqlParser.HASH, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public Streaming_clauseContext streaming_clause() {
			return getRuleContext(Streaming_clauseContext.class,0);
		}
		public Partition_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPartition_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPartition_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitPartition_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_by_clauseContext partition_by_clause() throws RecognitionException {
		Partition_by_clauseContext _localctx = new Partition_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_partition_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(941);
			match(LEFT_PAREN);
			setState(942);
			match(PARTITION);
			setState(943);
			expression();
			setState(944);
			match(BY);
			setState(958);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANY:
				{
				setState(945);
				match(ANY);
				}
				break;
			case HASH:
			case RANGE:
				{
				setState(946);
				_la = _input.LA(1);
				if ( !(_la==HASH || _la==RANGE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(947);
				match(LEFT_PAREN);
				setState(948);
				column_name();
				setState(953);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(949);
					match(COMMA);
					setState(950);
					column_name();
					}
					}
					setState(955);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(956);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTER || _la==ORDER) {
				{
				setState(960);
				streaming_clause();
				}
			}

			setState(963);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_cache_clauseContext extends ParserRuleContext {
		public TerminalNode RESULT_CACHE() { return getToken(PlSqlParser.RESULT_CACHE, 0); }
		public Relies_on_partContext relies_on_part() {
			return getRuleContext(Relies_on_partContext.class,0);
		}
		public Result_cache_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_cache_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterResult_cache_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitResult_cache_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitResult_cache_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Result_cache_clauseContext result_cache_clause() throws RecognitionException {
		Result_cache_clauseContext _localctx = new Result_cache_clauseContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_result_cache_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(965);
			match(RESULT_CACHE);
			setState(967);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RELIES_ON) {
				{
				setState(966);
				relies_on_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relies_on_partContext extends ParserRuleContext {
		public TerminalNode RELIES_ON() { return getToken(PlSqlParser.RELIES_ON, 0); }
		public List<Tableview_nameContext> tableview_name() {
			return getRuleContexts(Tableview_nameContext.class);
		}
		public Tableview_nameContext tableview_name(int i) {
			return getRuleContext(Tableview_nameContext.class,i);
		}
		public Relies_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relies_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRelies_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRelies_on_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitRelies_on_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relies_on_partContext relies_on_part() throws RecognitionException {
		Relies_on_partContext _localctx = new Relies_on_partContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_relies_on_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(969);
			match(RELIES_ON);
			setState(970);
			match(LEFT_PAREN);
			setState(971);
			tableview_name();
			setState(976);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(972);
				match(COMMA);
				setState(973);
				tableview_name();
				}
				}
				setState(978);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(979);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Streaming_clauseContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode CLUSTER() { return getToken(PlSqlParser.CLUSTER, 0); }
		public Streaming_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_streaming_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterStreaming_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitStreaming_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitStreaming_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Streaming_clauseContext streaming_clause() throws RecognitionException {
		Streaming_clauseContext _localctx = new Streaming_clauseContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_streaming_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(981);
			_la = _input.LA(1);
			if ( !(_la==CLUSTER || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(982);
			expression();
			setState(983);
			match(BY);
			setState(984);
			match(LEFT_PAREN);
			setState(985);
			column_name();
			setState(990);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(986);
				match(COMMA);
				setState(987);
				column_name();
				}
				}
				setState(992);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(993);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_packageContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public Schema_object_nameContext schema_object_name() {
			return getRuleContext(Schema_object_nameContext.class,0);
		}
		public Drop_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_package(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitDrop_package(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_packageContext drop_package() throws RecognitionException {
		Drop_packageContext _localctx = new Drop_packageContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_drop_package);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(995);
			match(DROP);
			setState(996);
			match(PACKAGE);
			setState(998);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				setState(997);
				match(BODY);
				}
				break;
			}
			setState(1003);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
			case 1:
				{
				setState(1000);
				schema_object_name();
				setState(1001);
				match(PERIOD);
				}
				break;
			}
			setState(1005);
			package_name();
			setState(1006);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_packageContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public List<TerminalNode> PACKAGE() { return getTokens(PlSqlParser.PACKAGE); }
		public TerminalNode PACKAGE(int i) {
			return getToken(PlSqlParser.PACKAGE, i);
		}
		public Package_nameContext package_name() {
			return getRuleContext(Package_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public TerminalNode SPECIFICATION() { return getToken(PlSqlParser.SPECIFICATION, 0); }
		public Alter_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_package(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitAlter_package(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_packageContext alter_package() throws RecognitionException {
		Alter_packageContext _localctx = new Alter_packageContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_alter_package);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1008);
			match(ALTER);
			setState(1009);
			match(PACKAGE);
			setState(1010);
			package_name();
			setState(1011);
			match(COMPILE);
			setState(1013);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				setState(1012);
				match(DEBUG);
				}
				break;
			}
			setState(1016);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				setState(1015);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==PACKAGE || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1021);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,30,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1018);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1023);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,30,_ctx);
			}
			setState(1026);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1024);
				match(REUSE);
				setState(1025);
				match(SETTINGS);
				}
			}

			setState(1028);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_packageContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Schema_object_nameContext schema_object_name() {
			return getRuleContext(Schema_object_nameContext.class,0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public List<Package_obj_specContext> package_obj_spec() {
			return getRuleContexts(Package_obj_specContext.class);
		}
		public Package_obj_specContext package_obj_spec(int i) {
			return getRuleContext(Package_obj_specContext.class,i);
		}
		public Create_packageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_package; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_package(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_package(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCreate_package(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_packageContext create_package() throws RecognitionException {
		Create_packageContext _localctx = new Create_packageContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_create_package);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1030);
			match(CREATE);
			setState(1033);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1031);
				match(OR);
				setState(1032);
				match(REPLACE);
				}
			}

			setState(1035);
			match(PACKAGE);
			setState(1039);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {
			case 1:
				{
				setState(1036);
				schema_object_name();
				setState(1037);
				match(PERIOD);
				}
				break;
			}
			setState(1041);
			package_name();
			setState(1043);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1042);
				invoker_rights_clause();
				}
			}

			setState(1045);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1049);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				{
				setState(1046);
				package_obj_spec();
				}
				}
				setState(1051);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1052);
			match(END);
			setState(1054);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(1053);
				package_name();
				}
			}

			setState(1056);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_package_bodyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public List<Package_nameContext> package_name() {
			return getRuleContexts(Package_nameContext.class);
		}
		public Package_nameContext package_name(int i) {
			return getRuleContext(Package_nameContext.class,i);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode BEGIN() { return getToken(PlSqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Schema_object_nameContext schema_object_name() {
			return getRuleContext(Schema_object_nameContext.class,0);
		}
		public List<Package_obj_bodyContext> package_obj_body() {
			return getRuleContexts(Package_obj_bodyContext.class);
		}
		public Package_obj_bodyContext package_obj_body(int i) {
			return getRuleContext(Package_obj_bodyContext.class,i);
		}
		public Create_package_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_package_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_package_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_package_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCreate_package_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_package_bodyContext create_package_body() throws RecognitionException {
		Create_package_bodyContext _localctx = new Create_package_bodyContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_create_package_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1058);
			match(CREATE);
			setState(1061);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1059);
				match(OR);
				setState(1060);
				match(REPLACE);
				}
			}

			setState(1063);
			match(PACKAGE);
			setState(1064);
			match(BODY);
			setState(1068);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				setState(1065);
				schema_object_name();
				setState(1066);
				match(PERIOD);
				}
				break;
			}
			setState(1070);
			package_name();
			setState(1071);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1075);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				{
				setState(1072);
				package_obj_body();
				}
				}
				setState(1077);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1084);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEGIN:
				{
				setState(1078);
				match(BEGIN);
				setState(1079);
				seq_of_statements();
				}
				break;
			case END:
				{
				setState(1080);
				match(END);
				setState(1082);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					setState(1081);
					package_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1086);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_obj_specContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Type_declarationContext type_declaration() {
			return getRuleContext(Type_declarationContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Package_obj_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPackage_obj_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPackage_obj_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitPackage_obj_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_obj_specContext package_obj_spec() throws RecognitionException {
		Package_obj_specContext _localctx = new Package_obj_specContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_package_obj_spec);
		try {
			setState(1096);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1088);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1089);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1090);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1091);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1092);
				pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1093);
				type_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1094);
				procedure_spec();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1095);
				function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public Procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterProcedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitProcedure_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitProcedure_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_specContext procedure_spec() throws RecognitionException {
		Procedure_specContext _localctx = new Procedure_specContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1098);
			match(PROCEDURE);
			setState(1099);
			identifier();
			setState(1111);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1100);
				match(LEFT_PAREN);
				setState(1101);
				parameter();
				setState(1106);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1102);
					match(COMMA);
					setState(1103);
					parameter();
					}
					}
					setState(1108);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1109);
				match(RIGHT_PAREN);
				}
			}

			setState(1113);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode DETERMINISTIC() { return getToken(PlSqlParser.DETERMINISTIC, 0); }
		public TerminalNode RESULT_CACHE() { return getToken(PlSqlParser.RESULT_CACHE, 0); }
		public Function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunction_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunction_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitFunction_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_specContext function_spec() throws RecognitionException {
		Function_specContext _localctx = new Function_specContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1115);
			match(FUNCTION);
			setState(1116);
			identifier();
			setState(1128);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1117);
				match(LEFT_PAREN);
				setState(1118);
				parameter();
				setState(1123);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1119);
					match(COMMA);
					setState(1120);
					parameter();
					}
					}
					setState(1125);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1126);
				match(RIGHT_PAREN);
				}
			}

			setState(1130);
			match(RETURN);
			setState(1131);
			type_spec();
			setState(1133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DETERMINISTIC) {
				{
				setState(1132);
				match(DETERMINISTIC);
				}
			}

			setState(1136);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RESULT_CACHE) {
				{
				setState(1135);
				match(RESULT_CACHE);
				}
			}

			setState(1138);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_obj_bodyContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Type_declarationContext type_declaration() {
			return getRuleContext(Type_declarationContext.class,0);
		}
		public Procedure_bodyContext procedure_body() {
			return getRuleContext(Procedure_bodyContext.class,0);
		}
		public Function_bodyContext function_body() {
			return getRuleContext(Function_bodyContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Package_obj_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_obj_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPackage_obj_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPackage_obj_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitPackage_obj_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_obj_bodyContext package_obj_body() throws RecognitionException {
		Package_obj_bodyContext _localctx = new Package_obj_bodyContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_package_obj_body);
		try {
			setState(1149);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1140);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1141);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1142);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1143);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1144);
				type_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1145);
				procedure_body();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1146);
				function_body();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1147);
				procedure_spec();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1148);
				function_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitDrop_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_drop_procedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1151);
			match(DROP);
			setState(1152);
			match(PROCEDURE);
			setState(1153);
			procedure_name();
			setState(1154);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_procedureContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public Alter_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitAlter_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_procedureContext alter_procedure() throws RecognitionException {
		Alter_procedureContext _localctx = new Alter_procedureContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_alter_procedure);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1156);
			match(ALTER);
			setState(1157);
			match(PROCEDURE);
			setState(1158);
			procedure_name();
			setState(1159);
			match(COMPILE);
			setState(1161);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,50,_ctx) ) {
			case 1:
				{
				setState(1160);
				match(DEBUG);
				}
				break;
			}
			setState(1166);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,51,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1163);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1168);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,51,_ctx);
			}
			setState(1171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1169);
				match(REUSE);
				setState(1170);
				match(SETTINGS);
				}
			}

			setState(1173);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_bodyContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public Implementation_type_nameContext implementation_type_name() {
			return getRuleContext(Implementation_type_nameContext.class,0);
		}
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public List<Invoker_rights_clauseContext> invoker_rights_clause() {
			return getRuleContexts(Invoker_rights_clauseContext.class);
		}
		public Invoker_rights_clauseContext invoker_rights_clause(int i) {
			return getRuleContext(Invoker_rights_clauseContext.class,i);
		}
		public List<Parallel_enable_clauseContext> parallel_enable_clause() {
			return getRuleContexts(Parallel_enable_clauseContext.class);
		}
		public Parallel_enable_clauseContext parallel_enable_clause(int i) {
			return getRuleContext(Parallel_enable_clauseContext.class,i);
		}
		public List<Result_cache_clauseContext> result_cache_clause() {
			return getRuleContexts(Result_cache_clauseContext.class);
		}
		public Result_cache_clauseContext result_cache_clause(int i) {
			return getRuleContext(Result_cache_clauseContext.class,i);
		}
		public List<TerminalNode> DETERMINISTIC() { return getTokens(PlSqlParser.DETERMINISTIC); }
		public TerminalNode DETERMINISTIC(int i) {
			return getToken(PlSqlParser.DETERMINISTIC, i);
		}
		public TerminalNode PIPELINED() { return getToken(PlSqlParser.PIPELINED, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlSqlParser.AGGREGATE, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunction_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunction_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitFunction_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_bodyContext function_body() throws RecognitionException {
		Function_bodyContext _localctx = new Function_bodyContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_function_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1175);
			match(FUNCTION);
			setState(1176);
			identifier();
			setState(1188);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1177);
				match(LEFT_PAREN);
				setState(1178);
				parameter();
				setState(1183);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1179);
					match(COMMA);
					setState(1180);
					parameter();
					}
					}
					setState(1185);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1186);
				match(RIGHT_PAREN);
				}
			}

			setState(1190);
			match(RETURN);
			setState(1191);
			type_spec();
			setState(1198);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AUTHID || _la==DETERMINISTIC || _la==PARALLEL_ENABLE || _la==RESULT_CACHE) {
				{
				setState(1196);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTHID:
					{
					setState(1192);
					invoker_rights_clause();
					}
					break;
				case PARALLEL_ENABLE:
					{
					setState(1193);
					parallel_enable_clause();
					}
					break;
				case RESULT_CACHE:
					{
					setState(1194);
					result_cache_clause();
					}
					break;
				case DETERMINISTIC:
					{
					setState(1195);
					match(DETERMINISTIC);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1200);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1221);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
			case 1:
				{
				{
				setState(1202);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PIPELINED) {
					{
					setState(1201);
					match(PIPELINED);
					}
				}

				setState(1204);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1216);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
				case 1:
					{
					setState(1206);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DECLARE) {
						{
						setState(1205);
						match(DECLARE);
						}
					}

					setState(1211);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
						{
						{
						setState(1208);
						declare_spec();
						}
						}
						setState(1213);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1214);
					body();
					}
					break;
				case 2:
					{
					setState(1215);
					call_spec();
					}
					break;
				}
				}
				}
				break;
			case 2:
				{
				setState(1218);
				_la = _input.LA(1);
				if ( !(_la==AGGREGATE || _la==PIPELINED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1219);
				match(USING);
				setState(1220);
				implementation_type_name();
				}
				break;
			}
			setState(1223);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_bodyContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Procedure_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterProcedure_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitProcedure_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitProcedure_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_bodyContext procedure_body() throws RecognitionException {
		Procedure_bodyContext _localctx = new Procedure_bodyContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_procedure_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1225);
			match(PROCEDURE);
			setState(1226);
			identifier();
			setState(1238);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1227);
				match(LEFT_PAREN);
				setState(1228);
				parameter();
				setState(1233);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1229);
					match(COMMA);
					setState(1230);
					parameter();
					}
					}
					setState(1235);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1236);
				match(RIGHT_PAREN);
				}
			}

			setState(1240);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1253);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
			case 1:
				{
				setState(1242);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1241);
					match(DECLARE);
					}
				}

				setState(1247);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					{
					setState(1244);
					declare_spec();
					}
					}
					setState(1249);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1250);
				body();
				}
				break;
			case 2:
				{
				setState(1251);
				call_spec();
				}
				break;
			case 3:
				{
				setState(1252);
				match(EXTERNAL);
				}
				break;
			}
			setState(1255);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_procedure_bodyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Create_procedure_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_procedure_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_procedure_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_procedure_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCreate_procedure_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_procedure_bodyContext create_procedure_body() throws RecognitionException {
		Create_procedure_bodyContext _localctx = new Create_procedure_bodyContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_create_procedure_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1257);
			match(CREATE);
			setState(1260);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1258);
				match(OR);
				setState(1259);
				match(REPLACE);
				}
			}

			setState(1262);
			match(PROCEDURE);
			setState(1263);
			procedure_name();
			setState(1275);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1264);
				match(LEFT_PAREN);
				setState(1265);
				parameter();
				setState(1270);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1266);
					match(COMMA);
					setState(1267);
					parameter();
					}
					}
					setState(1272);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1273);
				match(RIGHT_PAREN);
				}
			}

			setState(1278);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1277);
				invoker_rights_clause();
				}
			}

			setState(1280);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1293);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,73,_ctx) ) {
			case 1:
				{
				setState(1282);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1281);
					match(DECLARE);
					}
				}

				setState(1287);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					{
					setState(1284);
					declare_spec();
					}
					}
					setState(1289);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1290);
				body();
				}
				break;
			case 2:
				{
				setState(1291);
				call_spec();
				}
				break;
			case 3:
				{
				setState(1292);
				match(EXTERNAL);
				}
				break;
			}
			setState(1295);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_triggerContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Drop_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitDrop_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_triggerContext drop_trigger() throws RecognitionException {
		Drop_triggerContext _localctx = new Drop_triggerContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_drop_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1297);
			match(DROP);
			setState(1298);
			match(TRIGGER);
			setState(1299);
			trigger_name();
			setState(1300);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_triggerContext extends ParserRuleContext {
		public Trigger_nameContext tn1;
		public Trigger_nameContext tn2;
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public Alter_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitAlter_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_triggerContext alter_trigger() throws RecognitionException {
		Alter_triggerContext _localctx = new Alter_triggerContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_alter_trigger);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1302);
			match(ALTER);
			setState(1303);
			match(TRIGGER);
			setState(1304);
			((Alter_triggerContext)_localctx).tn1 = trigger_name();
			setState(1323);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DISABLE:
			case ENABLE:
				{
				setState(1305);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case RENAME:
				{
				setState(1306);
				match(RENAME);
				setState(1307);
				match(TO);
				setState(1308);
				((Alter_triggerContext)_localctx).tn2 = trigger_name();
				}
				break;
			case COMPILE:
				{
				setState(1309);
				match(COMPILE);
				setState(1311);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
				case 1:
					{
					setState(1310);
					match(DEBUG);
					}
					break;
				}
				setState(1316);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,75,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1313);
						compiler_parameters_clause();
						}
						} 
					}
					setState(1318);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,75,_ctx);
				}
				setState(1321);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==REUSE) {
					{
					setState(1319);
					match(REUSE);
					setState(1320);
					match(SETTINGS);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1325);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_triggerContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public Trigger_bodyContext trigger_body() {
			return getRuleContext(Trigger_bodyContext.class,0);
		}
		public Simple_dml_triggerContext simple_dml_trigger() {
			return getRuleContext(Simple_dml_triggerContext.class,0);
		}
		public Compound_dml_triggerContext compound_dml_trigger() {
			return getRuleContext(Compound_dml_triggerContext.class,0);
		}
		public Non_dml_triggerContext non_dml_trigger() {
			return getRuleContext(Non_dml_triggerContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Trigger_follows_clauseContext trigger_follows_clause() {
			return getRuleContext(Trigger_follows_clauseContext.class,0);
		}
		public Trigger_when_clauseContext trigger_when_clause() {
			return getRuleContext(Trigger_when_clauseContext.class,0);
		}
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public Create_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCreate_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_triggerContext create_trigger() throws RecognitionException {
		Create_triggerContext _localctx = new Create_triggerContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_create_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1327);
			match(CREATE);
			setState(1330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1328);
				match(OR);
				setState(1329);
				match(REPLACE);
				}
			}

			setState(1332);
			match(TRIGGER);
			setState(1333);
			trigger_name();
			setState(1337);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				setState(1334);
				simple_dml_trigger();
				}
				break;
			case 2:
				{
				setState(1335);
				compound_dml_trigger();
				}
				break;
			case 3:
				{
				setState(1336);
				non_dml_trigger();
				}
				break;
			}
			setState(1340);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				setState(1339);
				trigger_follows_clause();
				}
				break;
			}
			setState(1343);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
			case 1:
				{
				setState(1342);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1346);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(1345);
				trigger_when_clause();
				}
			}

			setState(1348);
			trigger_body();
			setState(1349);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_follows_clauseContext extends ParserRuleContext {
		public TerminalNode FOLLOWS() { return getToken(PlSqlParser.FOLLOWS, 0); }
		public List<Trigger_nameContext> trigger_name() {
			return getRuleContexts(Trigger_nameContext.class);
		}
		public Trigger_nameContext trigger_name(int i) {
			return getRuleContext(Trigger_nameContext.class,i);
		}
		public Trigger_follows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_follows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTrigger_follows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTrigger_follows_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTrigger_follows_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_follows_clauseContext trigger_follows_clause() throws RecognitionException {
		Trigger_follows_clauseContext _localctx = new Trigger_follows_clauseContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_trigger_follows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1351);
			match(FOLLOWS);
			setState(1352);
			trigger_name();
			setState(1357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1353);
				match(COMMA);
				setState(1354);
				trigger_name();
				}
				}
				setState(1359);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_when_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Trigger_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTrigger_when_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTrigger_when_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTrigger_when_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_when_clauseContext trigger_when_clause() throws RecognitionException {
		Trigger_when_clauseContext _localctx = new Trigger_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_trigger_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1360);
			match(WHEN);
			setState(1361);
			match(LEFT_PAREN);
			setState(1362);
			condition();
			setState(1363);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_dml_triggerContext extends ParserRuleContext {
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public TerminalNode BEFORE() { return getToken(PlSqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PlSqlParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(PlSqlParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public For_each_rowContext for_each_row() {
			return getRuleContext(For_each_rowContext.class,0);
		}
		public Simple_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSimple_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSimple_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSimple_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_dml_triggerContext simple_dml_trigger() throws RecognitionException {
		Simple_dml_triggerContext _localctx = new Simple_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_simple_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1369);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEFORE:
				{
				setState(1365);
				match(BEFORE);
				}
				break;
			case AFTER:
				{
				setState(1366);
				match(AFTER);
				}
				break;
			case INSTEAD:
				{
				setState(1367);
				match(INSTEAD);
				setState(1368);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1371);
			dml_event_clause();
			setState(1373);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				setState(1372);
				referencing_clause();
				}
				break;
			}
			setState(1376);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1375);
				for_each_row();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_each_rowContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(PlSqlParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public For_each_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_each_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFor_each_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFor_each_row(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitFor_each_row(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_each_rowContext for_each_row() throws RecognitionException {
		For_each_rowContext _localctx = new For_each_rowContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_for_each_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1378);
			match(FOR);
			setState(1379);
			match(EACH);
			setState(1380);
			match(ROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_dml_triggerContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Dml_event_clauseContext dml_event_clause() {
			return getRuleContext(Dml_event_clauseContext.class,0);
		}
		public Referencing_clauseContext referencing_clause() {
			return getRuleContext(Referencing_clauseContext.class,0);
		}
		public Compound_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCompound_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCompound_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCompound_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compound_dml_triggerContext compound_dml_trigger() throws RecognitionException {
		Compound_dml_triggerContext _localctx = new Compound_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_compound_dml_trigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1382);
			match(FOR);
			setState(1383);
			dml_event_clause();
			setState(1385);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				setState(1384);
				referencing_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_dml_triggerContext extends ParserRuleContext {
		public List<Non_dml_eventContext> non_dml_event() {
			return getRuleContexts(Non_dml_eventContext.class);
		}
		public Non_dml_eventContext non_dml_event(int i) {
			return getRuleContext(Non_dml_eventContext.class,i);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode BEFORE() { return getToken(PlSqlParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(PlSqlParser.AFTER, 0); }
		public TerminalNode DATABASE() { return getToken(PlSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(PlSqlParser.SCHEMA, 0); }
		public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PlSqlParser.OR, i);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public Non_dml_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNon_dml_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNon_dml_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitNon_dml_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_dml_triggerContext non_dml_trigger() throws RecognitionException {
		Non_dml_triggerContext _localctx = new Non_dml_triggerContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_non_dml_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1387);
			_la = _input.LA(1);
			if ( !(_la==AFTER || _la==BEFORE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1388);
			non_dml_event();
			setState(1393);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1389);
				match(OR);
				setState(1390);
				non_dml_event();
				}
				}
				setState(1395);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1396);
			match(ON);
			setState(1404);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				setState(1397);
				match(DATABASE);
				}
				break;
			case 2:
				{
				setState(1401);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
				case 1:
					{
					setState(1398);
					schema_name();
					setState(1399);
					match(PERIOD);
					}
					break;
				}
				setState(1403);
				match(SCHEMA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_bodyContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(PlSqlParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public TerminalNode CALL() { return getToken(PlSqlParser.CALL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public Trigger_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTrigger_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTrigger_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTrigger_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_bodyContext trigger_body() throws RecognitionException {
		Trigger_bodyContext _localctx = new Trigger_bodyContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_trigger_body);
		try {
			setState(1411);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1406);
				match(COMPOUND);
				setState(1407);
				match(TRIGGER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1408);
				match(CALL);
				setState(1409);
				identifier();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1410);
				trigger_block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_clauseContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Routine_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRoutine_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRoutine_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitRoutine_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Routine_clauseContext routine_clause() throws RecognitionException {
		Routine_clauseContext _localctx = new Routine_clauseContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_routine_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1413);
			routine_name();
			setState(1415);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1414);
				function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_trigger_blockContext extends ParserRuleContext {
		public TerminalNode COMPOUND() { return getToken(PlSqlParser.COMPOUND, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public Trigger_nameContext trigger_name() {
			return getRuleContext(Trigger_nameContext.class,0);
		}
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public List<Timing_point_sectionContext> timing_point_section() {
			return getRuleContexts(Timing_point_sectionContext.class);
		}
		public Timing_point_sectionContext timing_point_section(int i) {
			return getRuleContext(Timing_point_sectionContext.class,i);
		}
		public Compound_trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCompound_trigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCompound_trigger_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCompound_trigger_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compound_trigger_blockContext compound_trigger_block() throws RecognitionException {
		Compound_trigger_blockContext _localctx = new Compound_trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_compound_trigger_block);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1417);
			match(COMPOUND);
			setState(1418);
			match(TRIGGER);
			setState(1422);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,93,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1419);
					declare_spec();
					}
					} 
				}
				setState(1424);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,93,_ctx);
			}
			setState(1426); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1425);
				timing_point_section();
				}
				}
				setState(1428); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AFTER || _la==BEFORE );
			setState(1430);
			match(END);
			setState(1431);
			trigger_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timing_point_sectionContext extends ParserRuleContext {
		public Token bk;
		public Token ak;
		public List<TerminalNode> STATEMENT() { return getTokens(PlSqlParser.STATEMENT); }
		public TerminalNode STATEMENT(int i) {
			return getToken(PlSqlParser.STATEMENT, i);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Trigger_blockContext trigger_block() {
			return getRuleContext(Trigger_blockContext.class,0);
		}
		public List<TerminalNode> BEFORE() { return getTokens(PlSqlParser.BEFORE); }
		public TerminalNode BEFORE(int i) {
			return getToken(PlSqlParser.BEFORE, i);
		}
		public List<TerminalNode> EACH() { return getTokens(PlSqlParser.EACH); }
		public TerminalNode EACH(int i) {
			return getToken(PlSqlParser.EACH, i);
		}
		public List<TerminalNode> ROW() { return getTokens(PlSqlParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(PlSqlParser.ROW, i);
		}
		public List<TerminalNode> AFTER() { return getTokens(PlSqlParser.AFTER); }
		public TerminalNode AFTER(int i) {
			return getToken(PlSqlParser.AFTER, i);
		}
		public Timing_point_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timing_point_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTiming_point_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTiming_point_section(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTiming_point_section(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Timing_point_sectionContext timing_point_section() throws RecognitionException {
		Timing_point_sectionContext _localctx = new Timing_point_sectionContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_timing_point_section);
		try {
			setState(1469);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,95,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1433);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(1434);
				match(STATEMENT);
				setState(1435);
				match(IS);
				setState(1436);
				trigger_block();
				setState(1437);
				match(BEFORE);
				setState(1438);
				match(STATEMENT);
				setState(1439);
				match(SEMICOLON);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1441);
				((Timing_point_sectionContext)_localctx).bk = match(BEFORE);
				setState(1442);
				match(EACH);
				setState(1443);
				match(ROW);
				setState(1444);
				match(IS);
				setState(1445);
				trigger_block();
				setState(1446);
				match(BEFORE);
				setState(1447);
				match(EACH);
				setState(1448);
				match(ROW);
				setState(1449);
				match(SEMICOLON);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1451);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(1452);
				match(STATEMENT);
				setState(1453);
				match(IS);
				setState(1454);
				trigger_block();
				setState(1455);
				match(AFTER);
				setState(1456);
				match(STATEMENT);
				setState(1457);
				match(SEMICOLON);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1459);
				((Timing_point_sectionContext)_localctx).ak = match(AFTER);
				setState(1460);
				match(EACH);
				setState(1461);
				match(ROW);
				setState(1462);
				match(IS);
				setState(1463);
				trigger_block();
				setState(1464);
				match(AFTER);
				setState(1465);
				match(EACH);
				setState(1466);
				match(ROW);
				setState(1467);
				match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_dml_eventContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode ANALYZE() { return getToken(PlSqlParser.ANALYZE, 0); }
		public TerminalNode ASSOCIATE() { return getToken(PlSqlParser.ASSOCIATE, 0); }
		public TerminalNode STATISTICS() { return getToken(PlSqlParser.STATISTICS, 0); }
		public TerminalNode AUDIT() { return getToken(PlSqlParser.AUDIT, 0); }
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(PlSqlParser.DISASSOCIATE, 0); }
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode GRANT() { return getToken(PlSqlParser.GRANT, 0); }
		public TerminalNode NOAUDIT() { return getToken(PlSqlParser.NOAUDIT, 0); }
		public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
		public TerminalNode REVOKE() { return getToken(PlSqlParser.REVOKE, 0); }
		public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
		public TerminalNode DDL() { return getToken(PlSqlParser.DDL, 0); }
		public TerminalNode STARTUP() { return getToken(PlSqlParser.STARTUP, 0); }
		public TerminalNode SHUTDOWN() { return getToken(PlSqlParser.SHUTDOWN, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(PlSqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode LOGON() { return getToken(PlSqlParser.LOGON, 0); }
		public TerminalNode LOGOFF() { return getToken(PlSqlParser.LOGOFF, 0); }
		public TerminalNode SERVERERROR() { return getToken(PlSqlParser.SERVERERROR, 0); }
		public TerminalNode SUSPEND() { return getToken(PlSqlParser.SUSPEND, 0); }
		public TerminalNode DATABASE() { return getToken(PlSqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(PlSqlParser.SCHEMA, 0); }
		public TerminalNode FOLLOWS() { return getToken(PlSqlParser.FOLLOWS, 0); }
		public Non_dml_eventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_dml_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNon_dml_event(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNon_dml_event(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitNon_dml_event(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Non_dml_eventContext non_dml_event() throws RecognitionException {
		Non_dml_eventContext _localctx = new Non_dml_eventContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_non_dml_event);
		try {
			setState(1497);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1471);
				match(ALTER);
				}
				break;
			case ANALYZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1472);
				match(ANALYZE);
				}
				break;
			case ASSOCIATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1473);
				match(ASSOCIATE);
				setState(1474);
				match(STATISTICS);
				}
				break;
			case AUDIT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1475);
				match(AUDIT);
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 5);
				{
				setState(1476);
				match(COMMENT);
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1477);
				match(CREATE);
				}
				break;
			case DISASSOCIATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1478);
				match(DISASSOCIATE);
				setState(1479);
				match(STATISTICS);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 8);
				{
				setState(1480);
				match(DROP);
				}
				break;
			case GRANT:
				enterOuterAlt(_localctx, 9);
				{
				setState(1481);
				match(GRANT);
				}
				break;
			case NOAUDIT:
				enterOuterAlt(_localctx, 10);
				{
				setState(1482);
				match(NOAUDIT);
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 11);
				{
				setState(1483);
				match(RENAME);
				}
				break;
			case REVOKE:
				enterOuterAlt(_localctx, 12);
				{
				setState(1484);
				match(REVOKE);
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 13);
				{
				setState(1485);
				match(TRUNCATE);
				}
				break;
			case DDL:
				enterOuterAlt(_localctx, 14);
				{
				setState(1486);
				match(DDL);
				}
				break;
			case STARTUP:
				enterOuterAlt(_localctx, 15);
				{
				setState(1487);
				match(STARTUP);
				}
				break;
			case SHUTDOWN:
				enterOuterAlt(_localctx, 16);
				{
				setState(1488);
				match(SHUTDOWN);
				}
				break;
			case DB_ROLE_CHANGE:
				enterOuterAlt(_localctx, 17);
				{
				setState(1489);
				match(DB_ROLE_CHANGE);
				}
				break;
			case LOGON:
				enterOuterAlt(_localctx, 18);
				{
				setState(1490);
				match(LOGON);
				}
				break;
			case LOGOFF:
				enterOuterAlt(_localctx, 19);
				{
				setState(1491);
				match(LOGOFF);
				}
				break;
			case SERVERERROR:
				enterOuterAlt(_localctx, 20);
				{
				setState(1492);
				match(SERVERERROR);
				}
				break;
			case SUSPEND:
				enterOuterAlt(_localctx, 21);
				{
				setState(1493);
				match(SUSPEND);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 22);
				{
				setState(1494);
				match(DATABASE);
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 23);
				{
				setState(1495);
				match(SCHEMA);
				}
				break;
			case FOLLOWS:
				enterOuterAlt(_localctx, 24);
				{
				setState(1496);
				match(FOLLOWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_clauseContext extends ParserRuleContext {
		public List<Dml_event_elementContext> dml_event_element() {
			return getRuleContexts(Dml_event_elementContext.class);
		}
		public Dml_event_elementContext dml_event_element(int i) {
			return getRuleContext(Dml_event_elementContext.class,i);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PlSqlParser.OR, i);
		}
		public Dml_event_nested_clauseContext dml_event_nested_clause() {
			return getRuleContext(Dml_event_nested_clauseContext.class,0);
		}
		public Dml_event_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDml_event_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDml_event_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitDml_event_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_event_clauseContext dml_event_clause() throws RecognitionException {
		Dml_event_clauseContext _localctx = new Dml_event_clauseContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_dml_event_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1499);
			dml_event_element();
			setState(1504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(1500);
				match(OR);
				setState(1501);
				dml_event_element();
				}
				}
				setState(1506);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1507);
			match(ON);
			setState(1509);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				setState(1508);
				dml_event_nested_clause();
				}
				break;
			}
			setState(1511);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_elementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Dml_event_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDml_event_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDml_event_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitDml_event_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_event_elementContext dml_event_element() throws RecognitionException {
		Dml_event_elementContext _localctx = new Dml_event_elementContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_dml_event_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1513);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1523);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(1514);
				match(OF);
				setState(1515);
				column_name();
				setState(1520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1516);
					match(COMMA);
					setState(1517);
					column_name();
					}
					}
					setState(1522);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_event_nested_clauseContext extends ParserRuleContext {
		public TerminalNode NESTED() { return getToken(PlSqlParser.NESTED, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Dml_event_nested_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_event_nested_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDml_event_nested_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDml_event_nested_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitDml_event_nested_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_event_nested_clauseContext dml_event_nested_clause() throws RecognitionException {
		Dml_event_nested_clauseContext _localctx = new Dml_event_nested_clauseContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_dml_event_nested_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1525);
			match(NESTED);
			setState(1526);
			match(TABLE);
			setState(1527);
			tableview_name();
			setState(1528);
			match(OF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_clauseContext extends ParserRuleContext {
		public TerminalNode REFERENCING() { return getToken(PlSqlParser.REFERENCING, 0); }
		public List<Referencing_elementContext> referencing_element() {
			return getRuleContexts(Referencing_elementContext.class);
		}
		public Referencing_elementContext referencing_element(int i) {
			return getRuleContext(Referencing_elementContext.class,i);
		}
		public Referencing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReferencing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReferencing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitReferencing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Referencing_clauseContext referencing_clause() throws RecognitionException {
		Referencing_clauseContext _localctx = new Referencing_clauseContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_referencing_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1530);
			match(REFERENCING);
			setState(1532); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1531);
					referencing_element();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1534); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,101,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Referencing_elementContext extends ParserRuleContext {
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode NEW() { return getToken(PlSqlParser.NEW, 0); }
		public TerminalNode OLD() { return getToken(PlSqlParser.OLD, 0); }
		public TerminalNode PARENT() { return getToken(PlSqlParser.PARENT, 0); }
		public Referencing_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referencing_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReferencing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReferencing_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitReferencing_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Referencing_elementContext referencing_element() throws RecognitionException {
		Referencing_elementContext _localctx = new Referencing_elementContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_referencing_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1536);
			_la = _input.LA(1);
			if ( !(((((_la - 240)) & ~0x3f) == 0 && ((1L << (_la - 240)) & ((1L << (NEW - 240)) | (1L << (OLD - 240)) | (1L << (PARENT - 240)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1537);
			column_alias();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_typeContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public TerminalNode VALIDATE() { return getToken(PlSqlParser.VALIDATE, 0); }
		public Drop_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitDrop_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_typeContext drop_type() throws RecognitionException {
		Drop_typeContext _localctx = new Drop_typeContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_drop_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1539);
			match(DROP);
			setState(1540);
			match(TYPE);
			setState(1542);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
			case 1:
				{
				setState(1541);
				match(BODY);
				}
				break;
			}
			setState(1544);
			type_name();
			setState(1546);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE || _la==VALIDATE) {
				{
				setState(1545);
				_la = _input.LA(1);
				if ( !(_la==FORCE || _la==VALIDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1548);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_typeContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public Compile_type_clauseContext compile_type_clause() {
			return getRuleContext(Compile_type_clauseContext.class,0);
		}
		public Replace_type_clauseContext replace_type_clause() {
			return getRuleContext(Replace_type_clauseContext.class,0);
		}
		public Alter_method_specContext alter_method_spec() {
			return getRuleContext(Alter_method_specContext.class,0);
		}
		public Alter_collection_clausesContext alter_collection_clauses() {
			return getRuleContext(Alter_collection_clausesContext.class,0);
		}
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public Dependent_handling_clauseContext dependent_handling_clause() {
			return getRuleContext(Dependent_handling_clauseContext.class,0);
		}
		public Alter_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitAlter_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_typeContext alter_type() throws RecognitionException {
		Alter_typeContext _localctx = new Alter_typeContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_alter_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1550);
			match(ALTER);
			setState(1551);
			match(TYPE);
			setState(1552);
			type_name();
			setState(1558);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMPILE:
				{
				setState(1553);
				compile_type_clause();
				}
				break;
			case REPLACE:
				{
				setState(1554);
				replace_type_clause();
				}
				break;
			case ADD:
			case DROP:
				{
				setState(1555);
				alter_method_spec();
				}
				break;
			case MODIFY:
				{
				setState(1556);
				alter_collection_clauses();
				}
				break;
			case FINAL:
			case INSTANTIABLE:
			case NOT:
			case OVERRIDING:
				{
				setState(1557);
				modifier_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1561);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==INVALIDATE) {
				{
				setState(1560);
				dependent_handling_clause();
				}
			}

			setState(1563);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compile_type_clauseContext extends ParserRuleContext {
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public List<Compiler_parameters_clauseContext> compiler_parameters_clause() {
			return getRuleContexts(Compiler_parameters_clauseContext.class);
		}
		public Compiler_parameters_clauseContext compiler_parameters_clause(int i) {
			return getRuleContext(Compiler_parameters_clauseContext.class,i);
		}
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public TerminalNode SPECIFICATION() { return getToken(PlSqlParser.SPECIFICATION, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public Compile_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compile_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCompile_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCompile_type_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCompile_type_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compile_type_clauseContext compile_type_clause() throws RecognitionException {
		Compile_type_clauseContext _localctx = new Compile_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_compile_type_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1565);
			match(COMPILE);
			setState(1567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				setState(1566);
				match(DEBUG);
				}
				break;
			}
			setState(1570);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,107,_ctx) ) {
			case 1:
				{
				setState(1569);
				_la = _input.LA(1);
				if ( !(_la==BODY || _la==SPECIFICATION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1575);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,108,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1572);
					compiler_parameters_clause();
					}
					} 
				}
				setState(1577);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,108,_ctx);
			}
			setState(1580);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REUSE) {
				{
				setState(1578);
				match(REUSE);
				setState(1579);
				match(SETTINGS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Replace_type_clauseContext extends ParserRuleContext {
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Replace_type_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replace_type_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReplace_type_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReplace_type_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitReplace_type_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Replace_type_clauseContext replace_type_clause() throws RecognitionException {
		Replace_type_clauseContext _localctx = new Replace_type_clauseContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_replace_type_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1582);
			match(REPLACE);
			setState(1584);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1583);
				invoker_rights_clause();
				}
			}

			setState(1586);
			match(AS);
			setState(1587);
			match(OBJECT);
			setState(1588);
			match(LEFT_PAREN);
			setState(1589);
			object_member_spec();
			setState(1594);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1590);
				match(COMMA);
				setState(1591);
				object_member_spec();
				}
				}
				setState(1596);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1597);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_method_specContext extends ParserRuleContext {
		public List<Alter_method_elementContext> alter_method_element() {
			return getRuleContexts(Alter_method_elementContext.class);
		}
		public Alter_method_elementContext alter_method_element(int i) {
			return getRuleContext(Alter_method_elementContext.class,i);
		}
		public Alter_method_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_method_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_method_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitAlter_method_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_method_specContext alter_method_spec() throws RecognitionException {
		Alter_method_specContext _localctx = new Alter_method_specContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_alter_method_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1599);
			alter_method_element();
			setState(1604);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1600);
				match(COMMA);
				setState(1601);
				alter_method_element();
				}
				}
				setState(1606);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_method_elementContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Alter_method_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_method_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_method_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_method_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitAlter_method_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_method_elementContext alter_method_element() throws RecognitionException {
		Alter_method_elementContext _localctx = new Alter_method_elementContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_alter_method_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1607);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1610);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				{
				setState(1608);
				map_order_function_spec();
				}
				break;
			case MEMBER:
			case STATIC:
				{
				setState(1609);
				subprogram_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_attribute_definitionContext extends ParserRuleContext {
		public TerminalNode ATTRIBUTE() { return getToken(PlSqlParser.ATTRIBUTE, 0); }
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public TerminalNode MODIFY() { return getToken(PlSqlParser.MODIFY, 0); }
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public List<Attribute_definitionContext> attribute_definition() {
			return getRuleContexts(Attribute_definitionContext.class);
		}
		public Attribute_definitionContext attribute_definition(int i) {
			return getRuleContext(Attribute_definitionContext.class,i);
		}
		public Alter_attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_attribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_attribute_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitAlter_attribute_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_attribute_definitionContext alter_attribute_definition() throws RecognitionException {
		Alter_attribute_definitionContext _localctx = new Alter_attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_alter_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1612);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP || _la==MODIFY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1613);
			match(ATTRIBUTE);
			setState(1626);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(1614);
				attribute_definition();
				}
				break;
			case LEFT_PAREN:
				{
				setState(1615);
				match(LEFT_PAREN);
				setState(1616);
				attribute_definition();
				setState(1621);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1617);
					match(COMMA);
					setState(1618);
					attribute_definition();
					}
					}
					setState(1623);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1624);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_definitionContext extends ParserRuleContext {
		public Attribute_nameContext attribute_name() {
			return getRuleContext(Attribute_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAttribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAttribute_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitAttribute_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_definitionContext attribute_definition() throws RecognitionException {
		Attribute_definitionContext _localctx = new Attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1628);
			attribute_name();
			setState(1630);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DATE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==REGULAR_ID) {
				{
				setState(1629);
				type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_collection_clausesContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(PlSqlParser.MODIFY, 0); }
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ELEMENT() { return getToken(PlSqlParser.ELEMENT, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Alter_collection_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_collection_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_collection_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_collection_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitAlter_collection_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_collection_clausesContext alter_collection_clauses() throws RecognitionException {
		Alter_collection_clausesContext _localctx = new Alter_collection_clausesContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_alter_collection_clauses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1632);
			match(MODIFY);
			setState(1638);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				{
				setState(1633);
				match(LIMIT);
				setState(1634);
				expression();
				}
				break;
			case ELEMENT:
				{
				setState(1635);
				match(ELEMENT);
				setState(1636);
				match(TYPE);
				setState(1637);
				type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_handling_clauseContext extends ParserRuleContext {
		public TerminalNode INVALIDATE() { return getToken(PlSqlParser.INVALIDATE, 0); }
		public TerminalNode CASCADE() { return getToken(PlSqlParser.CASCADE, 0); }
		public TerminalNode CONVERT() { return getToken(PlSqlParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(PlSqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode INCLUDING() { return getToken(PlSqlParser.INCLUDING, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode DATA() { return getToken(PlSqlParser.DATA, 0); }
		public Dependent_exceptions_partContext dependent_exceptions_part() {
			return getRuleContext(Dependent_exceptions_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public Dependent_handling_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_handling_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDependent_handling_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDependent_handling_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitDependent_handling_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dependent_handling_clauseContext dependent_handling_clause() throws RecognitionException {
		Dependent_handling_clauseContext _localctx = new Dependent_handling_clauseContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_dependent_handling_clause);
		int _la;
		try {
			setState(1656);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INVALIDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1640);
				match(INVALIDATE);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1641);
				match(CASCADE);
				setState(1651);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONVERT:
					{
					setState(1642);
					match(CONVERT);
					setState(1643);
					match(TO);
					setState(1644);
					match(SUBSTITUTABLE);
					}
					break;
				case INCLUDING:
				case NOT:
					{
					setState(1646);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(1645);
						match(NOT);
						}
					}

					setState(1648);
					match(INCLUDING);
					setState(1649);
					match(TABLE);
					setState(1650);
					match(DATA);
					}
					break;
				case EXCEPTIONS:
				case FORCE:
				case SEMICOLON:
					break;
				default:
					break;
				}
				setState(1654);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCEPTIONS || _la==FORCE) {
					{
					setState(1653);
					dependent_exceptions_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_exceptions_partContext extends ParserRuleContext {
		public TerminalNode EXCEPTIONS() { return getToken(PlSqlParser.EXCEPTIONS, 0); }
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public Dependent_exceptions_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_exceptions_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDependent_exceptions_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDependent_exceptions_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitDependent_exceptions_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dependent_exceptions_partContext dependent_exceptions_part() throws RecognitionException {
		Dependent_exceptions_partContext _localctx = new Dependent_exceptions_partContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_dependent_exceptions_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1659);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(1658);
				match(FORCE);
				}
			}

			setState(1661);
			match(EXCEPTIONS);
			setState(1662);
			match(INTO);
			setState(1663);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_typeContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public Type_definitionContext type_definition() {
			return getRuleContext(Type_definitionContext.class,0);
		}
		public Type_bodyContext type_body() {
			return getRuleContext(Type_bodyContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public Create_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCreate_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_typeContext create_type() throws RecognitionException {
		Create_typeContext _localctx = new Create_typeContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_create_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1665);
			match(CREATE);
			setState(1668);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1666);
				match(OR);
				setState(1667);
				match(REPLACE);
				}
			}

			setState(1670);
			match(TYPE);
			setState(1673);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,124,_ctx) ) {
			case 1:
				{
				setState(1671);
				type_definition();
				}
				break;
			case 2:
				{
				setState(1672);
				type_body();
				}
				break;
			}
			setState(1675);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_definitionContext extends ParserRuleContext {
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode OID() { return getToken(PlSqlParser.OID, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public Object_type_defContext object_type_def() {
			return getRuleContext(Object_type_defContext.class,0);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitType_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_definitionContext type_definition() throws RecognitionException {
		Type_definitionContext _localctx = new Type_definitionContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1677);
			type_name();
			setState(1680);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OID) {
				{
				setState(1678);
				match(OID);
				setState(1679);
				match(CHAR_STRING);
				}
			}

			setState(1683);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==AUTHID || _la==IS || _la==UNDER) {
				{
				setState(1682);
				object_type_def();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_type_defContext extends ParserRuleContext {
		public Object_as_partContext object_as_part() {
			return getRuleContext(Object_as_partContext.class,0);
		}
		public Object_under_partContext object_under_part() {
			return getRuleContext(Object_under_partContext.class,0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Sqlj_object_typeContext sqlj_object_type() {
			return getRuleContext(Sqlj_object_typeContext.class,0);
		}
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public List<Modifier_clauseContext> modifier_clause() {
			return getRuleContexts(Modifier_clauseContext.class);
		}
		public Modifier_clauseContext modifier_clause(int i) {
			return getRuleContext(Modifier_clauseContext.class,i);
		}
		public Object_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterObject_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitObject_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitObject_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_defContext object_type_def() throws RecognitionException {
		Object_type_defContext _localctx = new Object_type_defContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_object_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1686);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1685);
				invoker_rights_clause();
				}
			}

			setState(1690);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(1688);
				object_as_part();
				}
				break;
			case UNDER:
				{
				setState(1689);
				object_under_part();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1693);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL) {
				{
				setState(1692);
				sqlj_object_type();
				}
			}

			setState(1706);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1695);
				match(LEFT_PAREN);
				setState(1696);
				object_member_spec();
				setState(1701);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1697);
					match(COMMA);
					setState(1698);
					object_member_spec();
					}
					}
					setState(1703);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1704);
				match(RIGHT_PAREN);
				}
			}

			setState(1711);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FINAL || _la==INSTANTIABLE || _la==NOT || _la==OVERRIDING) {
				{
				{
				setState(1708);
				modifier_clause();
				}
				}
				setState(1713);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_as_partContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Nested_table_type_defContext nested_table_type_def() {
			return getRuleContext(Nested_table_type_defContext.class,0);
		}
		public Object_as_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_as_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterObject_as_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitObject_as_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitObject_as_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_as_partContext object_as_part() throws RecognitionException {
		Object_as_partContext _localctx = new Object_as_partContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_object_as_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1714);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1718);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OBJECT:
				{
				setState(1715);
				match(OBJECT);
				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(1716);
				varray_type_def();
				}
				break;
			case TABLE:
				{
				setState(1717);
				nested_table_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_under_partContext extends ParserRuleContext {
		public TerminalNode UNDER() { return getToken(PlSqlParser.UNDER, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Object_under_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_under_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterObject_under_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitObject_under_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitObject_under_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_under_partContext object_under_part() throws RecognitionException {
		Object_under_partContext _localctx = new Object_under_partContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_object_under_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1720);
			match(UNDER);
			setState(1721);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nested_table_type_defContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Nested_table_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_table_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNested_table_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNested_table_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitNested_table_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Nested_table_type_defContext nested_table_type_def() throws RecognitionException {
		Nested_table_type_defContext _localctx = new Nested_table_type_defContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_nested_table_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1723);
			match(TABLE);
			setState(1724);
			match(OF);
			setState(1725);
			type_spec();
			setState(1728);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
			case 1:
				{
				setState(1726);
				match(NOT);
				setState(1727);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_typeContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(PlSqlParser.LANGUAGE, 0); }
		public TerminalNode JAVA() { return getToken(PlSqlParser.JAVA, 0); }
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode SQLDATA() { return getToken(PlSqlParser.SQLDATA, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(PlSqlParser.CUSTOMDATUM, 0); }
		public TerminalNode ORADATA() { return getToken(PlSqlParser.ORADATA, 0); }
		public Sqlj_object_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSqlj_object_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSqlj_object_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSqlj_object_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sqlj_object_typeContext sqlj_object_type() throws RecognitionException {
		Sqlj_object_typeContext _localctx = new Sqlj_object_typeContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_sqlj_object_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1730);
			match(EXTERNAL);
			setState(1731);
			match(NAME);
			setState(1732);
			expression();
			setState(1733);
			match(LANGUAGE);
			setState(1734);
			match(JAVA);
			setState(1735);
			match(USING);
			setState(1736);
			_la = _input.LA(1);
			if ( !(_la==CUSTOMDATUM || _la==ORADATA || _la==SQLDATA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_bodyContext extends ParserRuleContext {
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public List<Type_body_elementsContext> type_body_elements() {
			return getRuleContexts(Type_body_elementsContext.class);
		}
		public Type_body_elementsContext type_body_elements(int i) {
			return getRuleContext(Type_body_elementsContext.class,i);
		}
		public Type_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitType_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_bodyContext type_body() throws RecognitionException {
		Type_bodyContext _localctx = new Type_bodyContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_type_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1738);
			match(BODY);
			setState(1739);
			type_name();
			setState(1740);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1742); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1741);
				type_body_elements();
				}
				}
				setState(1744); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (MAP - 216)) | (1L << (MEMBER - 216)) | (1L << (ORDER - 216)))) != 0) || _la==STATIC );
			setState(1746);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_body_elementsContext extends ParserRuleContext {
		public Map_order_func_declarationContext map_order_func_declaration() {
			return getRuleContext(Map_order_func_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext subprog_decl_in_type() {
			return getRuleContext(Subprog_decl_in_typeContext.class,0);
		}
		public Type_body_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_body_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_body_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitType_body_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_body_elementsContext type_body_elements() throws RecognitionException {
		Type_body_elementsContext _localctx = new Type_body_elementsContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_type_body_elements);
		try {
			setState(1750);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1748);
				map_order_func_declaration();
				}
				break;
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(1749);
				subprog_decl_in_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_func_declarationContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public TerminalNode MAP() { return getToken(PlSqlParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public Map_order_func_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_func_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMap_order_func_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMap_order_func_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitMap_order_func_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Map_order_func_declarationContext map_order_func_declaration() throws RecognitionException {
		Map_order_func_declarationContext _localctx = new Map_order_func_declarationContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_map_order_func_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1752);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1753);
			match(MEMBER);
			setState(1754);
			func_decl_in_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprog_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(PlSqlParser.STATIC, 0); }
		public Proc_decl_in_typeContext proc_decl_in_type() {
			return getRuleContext(Proc_decl_in_typeContext.class,0);
		}
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public Constructor_declarationContext constructor_declaration() {
			return getRuleContext(Constructor_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprog_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubprog_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubprog_decl_in_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSubprog_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subprog_decl_in_typeContext subprog_decl_in_type() throws RecognitionException {
		Subprog_decl_in_typeContext _localctx = new Subprog_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_subprog_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1756);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1760);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(1757);
				proc_decl_in_type();
				}
				break;
			case FUNCTION:
				{
				setState(1758);
				func_decl_in_type();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				{
				setState(1759);
				constructor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Proc_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterProc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitProc_decl_in_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitProc_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_decl_in_typeContext proc_decl_in_type() throws RecognitionException {
		Proc_decl_in_typeContext _localctx = new Proc_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_proc_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1762);
			match(PROCEDURE);
			setState(1763);
			procedure_name();
			setState(1764);
			match(LEFT_PAREN);
			setState(1765);
			type_elements_parameter();
			setState(1770);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1766);
				match(COMMA);
				setState(1767);
				type_elements_parameter();
				}
				}
				setState(1772);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1773);
			match(RIGHT_PAREN);
			setState(1774);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1788);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,141,_ctx) ) {
			case 1:
				{
				setState(1775);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1777);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1776);
					match(DECLARE);
					}
				}

				setState(1782);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					{
					setState(1779);
					declare_spec();
					}
					}
					setState(1784);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1785);
				body();
				setState(1786);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Func_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunc_decl_in_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitFunc_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_decl_in_typeContext func_decl_in_type() throws RecognitionException {
		Func_decl_in_typeContext _localctx = new Func_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_func_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1790);
			match(FUNCTION);
			setState(1791);
			function_name();
			setState(1803);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1792);
				match(LEFT_PAREN);
				setState(1793);
				type_elements_parameter();
				setState(1798);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1794);
					match(COMMA);
					setState(1795);
					type_elements_parameter();
					}
					}
					setState(1800);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1801);
				match(RIGHT_PAREN);
				}
			}

			setState(1805);
			match(RETURN);
			setState(1806);
			type_spec();
			setState(1807);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1821);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
			case 1:
				{
				setState(1808);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1810);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1809);
					match(DECLARE);
					}
				}

				setState(1815);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					{
					setState(1812);
					declare_spec();
					}
					}
					setState(1817);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1818);
				body();
				setState(1819);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_declarationContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(PlSqlParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(PlSqlParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(PlSqlParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(PlSqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PlSqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConstructor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConstructor_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitConstructor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_declarationContext constructor_declaration() throws RecognitionException {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_constructor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1824);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(1823);
				match(FINAL);
				}
			}

			setState(1827);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(1826);
				match(INSTANTIABLE);
				}
			}

			setState(1829);
			match(CONSTRUCTOR);
			setState(1830);
			match(FUNCTION);
			setState(1831);
			type_spec();
			setState(1849);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1832);
				match(LEFT_PAREN);
				{
				setState(1833);
				match(SELF);
				setState(1834);
				match(IN);
				setState(1835);
				match(OUT);
				setState(1836);
				type_spec();
				setState(1837);
				match(COMMA);
				}
				setState(1839);
				type_elements_parameter();
				setState(1844);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1840);
					match(COMMA);
					setState(1841);
					type_elements_parameter();
					}
					}
					setState(1846);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1847);
				match(RIGHT_PAREN);
				}
			}

			setState(1851);
			match(RETURN);
			setState(1852);
			match(SELF);
			setState(1853);
			match(AS);
			setState(1854);
			match(RESULT);
			setState(1855);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1869);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
			case 1:
				{
				setState(1856);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1858);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1857);
					match(DECLARE);
					}
				}

				setState(1863);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					{
					setState(1860);
					declare_spec();
					}
					}
					setState(1865);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1866);
				body();
				setState(1867);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modifier_clauseContext extends ParserRuleContext {
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode OVERRIDING() { return getToken(PlSqlParser.OVERRIDING, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public Modifier_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifier_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModifier_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModifier_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitModifier_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modifier_clauseContext modifier_clause() throws RecognitionException {
		Modifier_clauseContext _localctx = new Modifier_clauseContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_modifier_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1872);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1871);
				match(NOT);
				}
			}

			setState(1874);
			_la = _input.LA(1);
			if ( !(_la==FINAL || _la==INSTANTIABLE || _la==OVERRIDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_member_specContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Sqlj_object_type_attrContext sqlj_object_type_attr() {
			return getRuleContext(Sqlj_object_type_attrContext.class,0);
		}
		public Element_specContext element_spec() {
			return getRuleContext(Element_specContext.class,0);
		}
		public Object_member_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_member_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterObject_member_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitObject_member_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitObject_member_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_member_specContext object_member_spec() throws RecognitionException {
		Object_member_specContext _localctx = new Object_member_specContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_object_member_spec);
		int _la;
		try {
			setState(1882);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1876);
				identifier();
				setState(1877);
				type_spec();
				setState(1879);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(1878);
					sqlj_object_type_attr();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1881);
				element_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_type_attrContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Sqlj_object_type_attrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type_attr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSqlj_object_type_attr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSqlj_object_type_attr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSqlj_object_type_attr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sqlj_object_type_attrContext sqlj_object_type_attr() throws RecognitionException {
		Sqlj_object_type_attrContext _localctx = new Sqlj_object_type_attrContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_sqlj_object_type_attr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1884);
			match(EXTERNAL);
			setState(1885);
			match(NAME);
			setState(1886);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_specContext extends ParserRuleContext {
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public List<Element_spec_optionsContext> element_spec_options() {
			return getRuleContexts(Element_spec_optionsContext.class);
		}
		public Element_spec_optionsContext element_spec_options(int i) {
			return getRuleContext(Element_spec_optionsContext.class,i);
		}
		public Pragma_clauseContext pragma_clause() {
			return getRuleContext(Pragma_clauseContext.class,0);
		}
		public Element_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterElement_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitElement_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitElement_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Element_specContext element_spec() throws RecognitionException {
		Element_specContext _localctx = new Element_specContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_element_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1889);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
			case 1:
				{
				setState(1888);
				modifier_clause();
				}
				break;
			}
			setState(1892); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1891);
				element_spec_options();
				}
				}
				setState(1894); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CONSTRUCTOR || _la==FINAL || _la==INSTANTIABLE || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (MAP - 216)) | (1L << (MEMBER - 216)) | (1L << (ORDER - 216)))) != 0) || _la==STATIC );
			setState(1898);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				{
				setState(1896);
				match(COMMA);
				setState(1897);
				pragma_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_spec_optionsContext extends ParserRuleContext {
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Constructor_specContext constructor_spec() {
			return getRuleContext(Constructor_specContext.class,0);
		}
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Element_spec_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterElement_spec_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitElement_spec_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitElement_spec_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Element_spec_optionsContext element_spec_options() throws RecognitionException {
		Element_spec_optionsContext _localctx = new Element_spec_optionsContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_element_spec_options);
		try {
			setState(1903);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(1900);
				subprogram_spec();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1901);
				constructor_spec();
				}
				break;
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1902);
				map_order_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprogram_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(PlSqlParser.STATIC, 0); }
		public Type_procedure_specContext type_procedure_spec() {
			return getRuleContext(Type_procedure_specContext.class,0);
		}
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public Subprogram_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprogram_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubprogram_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubprogram_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSubprogram_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subprogram_specContext subprogram_spec() throws RecognitionException {
		Subprogram_specContext _localctx = new Subprogram_specContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_subprogram_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1905);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1908);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(1906);
				type_procedure_spec();
				}
				break;
			case FUNCTION:
				{
				setState(1907);
				type_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(PlSqlParser.PROCEDURE, 0); }
		public Procedure_nameContext procedure_name() {
			return getRuleContext(Procedure_nameContext.class,0);
		}
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Type_procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_procedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_procedure_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitType_procedure_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_procedure_specContext type_procedure_spec() throws RecognitionException {
		Type_procedure_specContext _localctx = new Type_procedure_specContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_type_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1910);
			match(PROCEDURE);
			setState(1911);
			procedure_name();
			setState(1912);
			match(LEFT_PAREN);
			setState(1913);
			type_elements_parameter();
			setState(1918);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1914);
				match(COMMA);
				setState(1915);
				type_elements_parameter();
				}
				}
				setState(1920);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1921);
			match(RIGHT_PAREN);
			setState(1924);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(1922);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1923);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SELF() { return getToken(PlSqlParser.SELF, 0); }
		public List<TerminalNode> AS() { return getTokens(PlSqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PlSqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode VARIABLE() { return getToken(PlSqlParser.VARIABLE, 0); }
		public Type_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_function_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitType_function_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_function_specContext type_function_spec() throws RecognitionException {
		Type_function_specContext _localctx = new Type_function_specContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_type_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1926);
			match(FUNCTION);
			setState(1927);
			function_name();
			setState(1939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1928);
				match(LEFT_PAREN);
				setState(1929);
				type_elements_parameter();
				setState(1934);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1930);
					match(COMMA);
					setState(1931);
					type_elements_parameter();
					}
					}
					setState(1936);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1937);
				match(RIGHT_PAREN);
				}
			}

			setState(1941);
			match(RETURN);
			setState(1946);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,166,_ctx) ) {
			case 1:
				{
				setState(1942);
				type_spec();
				}
				break;
			case 2:
				{
				setState(1943);
				match(SELF);
				setState(1944);
				match(AS);
				setState(1945);
				match(RESULT);
				}
				break;
			}
			setState(1956);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(1948);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1949);
				call_spec();
				}
				break;
			case EXTERNAL:
				{
				setState(1950);
				match(EXTERNAL);
				setState(1952);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARIABLE) {
					{
					setState(1951);
					match(VARIABLE);
					}
				}

				setState(1954);
				match(NAME);
				setState(1955);
				expression();
				}
				break;
			case CASCADE:
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
			case INVALIDATE:
			case MAP:
			case MEMBER:
			case ORDER:
			case STATIC:
			case RIGHT_PAREN:
			case COMMA:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_specContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(PlSqlParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(PlSqlParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(PlSqlParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(PlSqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(PlSqlParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public Constructor_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConstructor_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConstructor_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitConstructor_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_specContext constructor_spec() throws RecognitionException {
		Constructor_specContext _localctx = new Constructor_specContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_constructor_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1959);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(1958);
				match(FINAL);
				}
			}

			setState(1962);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(1961);
				match(INSTANTIABLE);
				}
			}

			setState(1964);
			match(CONSTRUCTOR);
			setState(1965);
			match(FUNCTION);
			setState(1966);
			type_spec();
			setState(1984);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1967);
				match(LEFT_PAREN);
				{
				setState(1968);
				match(SELF);
				setState(1969);
				match(IN);
				setState(1970);
				match(OUT);
				setState(1971);
				type_spec();
				setState(1972);
				match(COMMA);
				}
				setState(1974);
				type_elements_parameter();
				setState(1979);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1975);
					match(COMMA);
					setState(1976);
					type_elements_parameter();
					}
					}
					setState(1981);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1982);
				match(RIGHT_PAREN);
				}
			}

			setState(1986);
			match(RETURN);
			setState(1987);
			match(SELF);
			setState(1988);
			match(AS);
			setState(1989);
			match(RESULT);
			setState(1992);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(1990);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1991);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_function_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public TerminalNode MAP() { return getToken(PlSqlParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public Map_order_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMap_order_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMap_order_function_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitMap_order_function_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Map_order_function_specContext map_order_function_spec() throws RecognitionException {
		Map_order_function_specContext _localctx = new Map_order_function_specContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_map_order_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1994);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1995);
			match(MEMBER);
			setState(1996);
			type_function_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_clauseContext extends ParserRuleContext {
		public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public List<Pragma_elementsContext> pragma_elements() {
			return getRuleContexts(Pragma_elementsContext.class);
		}
		public Pragma_elementsContext pragma_elements(int i) {
			return getRuleContext(Pragma_elementsContext.class,i);
		}
		public Pragma_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPragma_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPragma_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitPragma_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pragma_clauseContext pragma_clause() throws RecognitionException {
		Pragma_clauseContext _localctx = new Pragma_clauseContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_pragma_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1998);
			match(PRAGMA);
			setState(1999);
			match(RESTRICT_REFERENCES);
			setState(2000);
			match(LEFT_PAREN);
			setState(2001);
			pragma_elements();
			setState(2006);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2002);
				match(COMMA);
				setState(2003);
				pragma_elements();
				}
				}
				setState(2008);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2009);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_elementsContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Pragma_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPragma_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPragma_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitPragma_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pragma_elementsContext pragma_elements() throws RecognitionException {
		Pragma_elementsContext _localctx = new Pragma_elementsContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_pragma_elements);
		try {
			setState(2013);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2011);
				identifier();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2012);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_elements_parameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Type_elements_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_elements_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_elements_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_elements_parameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitType_elements_parameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_elements_parameterContext type_elements_parameter() throws RecognitionException {
		Type_elements_parameterContext _localctx = new Type_elements_parameterContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_type_elements_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2015);
			parameter_name();
			setState(2016);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_sequenceContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public Drop_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitDrop_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_sequenceContext drop_sequence() throws RecognitionException {
		Drop_sequenceContext _localctx = new Drop_sequenceContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_drop_sequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2018);
			match(DROP);
			setState(2019);
			match(SEQUENCE);
			setState(2020);
			sequence_name();
			setState(2021);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequenceContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitAlter_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_sequenceContext alter_sequence() throws RecognitionException {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_alter_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2023);
			match(ALTER);
			setState(2024);
			match(SEQUENCE);
			setState(2025);
			sequence_name();
			setState(2027); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2026);
				sequence_spec();
				}
				}
				setState(2029); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CACHE || _la==CYCLE || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (INCREMENT - 169)) | (1L << (MAXVALUE - 169)) | (1L << (MINVALUE - 169)))) != 0) || ((((_la - 243)) & ~0x3f) == 0 && ((1L << (_la - 243)) & ((1L << (NOCACHE - 243)) | (1L << (NOCYCLE - 243)) | (1L << (NOMAXVALUE - 243)) | (1L << (NOMINVALUE - 243)) | (1L << (NOORDER - 243)) | (1L << (ORDER - 243)))) != 0) );
			setState(2031);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequenceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(PlSqlParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public List<Sequence_start_clauseContext> sequence_start_clause() {
			return getRuleContexts(Sequence_start_clauseContext.class);
		}
		public Sequence_start_clauseContext sequence_start_clause(int i) {
			return getRuleContext(Sequence_start_clauseContext.class,i);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCreate_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2033);
			match(CREATE);
			setState(2034);
			match(SEQUENCE);
			setState(2035);
			sequence_name();
			setState(2040);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CACHE || _la==CYCLE || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (INCREMENT - 169)) | (1L << (MAXVALUE - 169)) | (1L << (MINVALUE - 169)))) != 0) || ((((_la - 243)) & ~0x3f) == 0 && ((1L << (_la - 243)) & ((1L << (NOCACHE - 243)) | (1L << (NOCYCLE - 243)) | (1L << (NOMAXVALUE - 243)) | (1L << (NOMINVALUE - 243)) | (1L << (NOORDER - 243)) | (1L << (ORDER - 243)))) != 0) || _la==START) {
				{
				setState(2038);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case START:
					{
					setState(2036);
					sequence_start_clause();
					}
					break;
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NOCACHE:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOORDER:
				case ORDER:
					{
					setState(2037);
					sequence_spec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2042);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2043);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_specContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(PlSqlParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(PlSqlParser.NOMAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
		public TerminalNode NOMINVALUE() { return getToken(PlSqlParser.NOMINVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(PlSqlParser.CYCLE, 0); }
		public TerminalNode NOCYCLE() { return getToken(PlSqlParser.NOCYCLE, 0); }
		public TerminalNode CACHE() { return getToken(PlSqlParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(PlSqlParser.NOCACHE, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode NOORDER() { return getToken(PlSqlParser.NOORDER, 0); }
		public Sequence_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSequence_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSequence_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSequence_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_specContext sequence_spec() throws RecognitionException {
		Sequence_specContext _localctx = new Sequence_specContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_sequence_spec);
		try {
			setState(2061);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INCREMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2045);
				match(INCREMENT);
				setState(2046);
				match(BY);
				setState(2047);
				match(UNSIGNED_INTEGER);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2048);
				match(MAXVALUE);
				setState(2049);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMAXVALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2050);
				match(NOMAXVALUE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2051);
				match(MINVALUE);
				setState(2052);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMINVALUE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2053);
				match(NOMINVALUE);
				}
				break;
			case CYCLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(2054);
				match(CYCLE);
				}
				break;
			case NOCYCLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(2055);
				match(NOCYCLE);
				}
				break;
			case CACHE:
				enterOuterAlt(_localctx, 8);
				{
				setState(2056);
				match(CACHE);
				setState(2057);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOCACHE:
				enterOuterAlt(_localctx, 9);
				{
				setState(2058);
				match(NOCACHE);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 10);
				{
				setState(2059);
				match(ORDER);
				}
				break;
			case NOORDER:
				enterOuterAlt(_localctx, 11);
				{
				setState(2060);
				match(NOORDER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_start_clauseContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(PlSqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public Sequence_start_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_start_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSequence_start_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSequence_start_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSequence_start_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_start_clauseContext sequence_start_clause() throws RecognitionException {
		Sequence_start_clauseContext _localctx = new Sequence_start_clauseContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_sequence_start_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2063);
			match(START);
			setState(2064);
			match(WITH);
			setState(2065);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tableContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<DatatypeContext> datatype() {
			return getRuleContexts(DatatypeContext.class);
		}
		public DatatypeContext datatype(int i) {
			return getRuleContext(DatatypeContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Create_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCreate_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_tableContext create_table() throws RecognitionException {
		Create_tableContext _localctx = new Create_tableContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_create_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2067);
			match(CREATE);
			setState(2068);
			match(TABLE);
			setState(2069);
			tableview_name();
			setState(2070);
			match(LEFT_PAREN);
			setState(2071);
			column_name();
			setState(2072);
			datatype();
			setState(2079);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2073);
				match(COMMA);
				setState(2074);
				column_name();
				setState(2075);
				datatype();
				}
				}
				setState(2081);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2082);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_tableContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(PlSqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Drop_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDrop_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDrop_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitDrop_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_tableContext drop_table() throws RecognitionException {
		Drop_tableContext _localctx = new Drop_tableContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_drop_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2084);
			match(DROP);
			setState(2085);
			match(TABLE);
			setState(2086);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_columnContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode COLUMN() { return getToken(PlSqlParser.COLUMN, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(PlSqlParser.PERIOD, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Comment_on_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterComment_on_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitComment_on_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitComment_on_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_columnContext comment_on_column() throws RecognitionException {
		Comment_on_columnContext _localctx = new Comment_on_columnContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_comment_on_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2088);
			match(COMMENT);
			setState(2089);
			match(ON);
			setState(2090);
			match(COLUMN);
			setState(2091);
			tableview_name();
			setState(2092);
			match(PERIOD);
			setState(2093);
			column_name();
			setState(2094);
			match(IS);
			setState(2095);
			quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_synonymContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public TerminalNode PUBLIC() { return getToken(PlSqlParser.PUBLIC, 0); }
		public TerminalNode SYNONYM() { return getToken(PlSqlParser.SYNONYM, 0); }
		public Synonym_nameContext synonym_name() {
			return getRuleContext(Synonym_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Schema_object_nameContext schema_object_name() {
			return getRuleContext(Schema_object_nameContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public List<Schema_nameContext> schema_name() {
			return getRuleContexts(Schema_nameContext.class);
		}
		public Schema_nameContext schema_name(int i) {
			return getRuleContext(Schema_nameContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(PlSqlParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(PlSqlParser.PERIOD, i);
		}
		public TerminalNode AT_SIGN() { return getToken(PlSqlParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Create_synonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_synonym; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCreate_synonym(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCreate_synonym(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCreate_synonym(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_synonymContext create_synonym() throws RecognitionException {
		Create_synonymContext _localctx = new Create_synonymContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_create_synonym);
		int _la;
		try {
			setState(2139);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2097);
				match(CREATE);
				setState(2100);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(2098);
					match(OR);
					setState(2099);
					match(REPLACE);
					}
				}

				setState(2102);
				match(PUBLIC);
				setState(2103);
				match(SYNONYM);
				setState(2104);
				synonym_name();
				setState(2105);
				match(FOR);
				setState(2109);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
				case 1:
					{
					setState(2106);
					schema_name();
					setState(2107);
					match(PERIOD);
					}
					break;
				}
				setState(2111);
				schema_object_name();
				setState(2114);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT_SIGN) {
					{
					setState(2112);
					match(AT_SIGN);
					setState(2113);
					link_name();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2116);
				match(CREATE);
				setState(2119);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(2117);
					match(OR);
					setState(2118);
					match(REPLACE);
					}
				}

				setState(2121);
				match(SYNONYM);
				setState(2125);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,185,_ctx) ) {
				case 1:
					{
					setState(2122);
					schema_name();
					setState(2123);
					match(PERIOD);
					}
					break;
				}
				setState(2127);
				synonym_name();
				setState(2128);
				match(FOR);
				setState(2132);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
				case 1:
					{
					setState(2129);
					schema_name();
					setState(2130);
					match(PERIOD);
					}
					break;
				}
				setState(2134);
				schema_object_name();
				setState(2137);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AT_SIGN) {
					{
					setState(2135);
					match(AT_SIGN);
					setState(2136);
					link_name();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_tableContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Comment_on_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterComment_on_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitComment_on_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitComment_on_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comment_on_tableContext comment_on_table() throws RecognitionException {
		Comment_on_tableContext _localctx = new Comment_on_tableContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_comment_on_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2141);
			match(COMMENT);
			setState(2142);
			match(ON);
			setState(2143);
			match(TABLE);
			setState(2144);
			tableview_name();
			setState(2145);
			match(IS);
			setState(2146);
			quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tableContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Add_constraintContext add_constraint() {
			return getRuleContext(Add_constraintContext.class,0);
		}
		public Alter_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlter_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlter_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitAlter_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_tableContext alter_table() throws RecognitionException {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_alter_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2148);
			match(ALTER);
			setState(2149);
			match(TABLE);
			setState(2150);
			tableview_name();
			setState(2151);
			add_constraint();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_constraintContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public Primary_key_clauseContext primary_key_clause() {
			return getRuleContext(Primary_key_clauseContext.class,0);
		}
		public Foreign_key_clauseContext foreign_key_clause() {
			return getRuleContext(Foreign_key_clauseContext.class,0);
		}
		public Unique_key_clauseContext unique_key_clause() {
			return getRuleContext(Unique_key_clauseContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Add_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAdd_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAdd_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitAdd_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_constraintContext add_constraint() throws RecognitionException {
		Add_constraintContext _localctx = new Add_constraintContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_add_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2153);
			match(ADD);
			setState(2156);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2154);
				match(CONSTRAINT);
				setState(2155);
				constraint_name();
				}
			}

			setState(2161);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
				{
				setState(2158);
				primary_key_clause();
				}
				break;
			case FOREIGN:
				{
				setState(2159);
				foreign_key_clause();
				}
				break;
			case UNIQUE:
				{
				setState(2160);
				unique_key_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Foreign_key_clauseContext extends ParserRuleContext {
		public TerminalNode FOREIGN() { return getToken(PlSqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(PlSqlParser.KEY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public References_clauseContext references_clause() {
			return getRuleContext(References_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public On_delete_clauseContext on_delete_clause() {
			return getRuleContext(On_delete_clauseContext.class,0);
		}
		public Foreign_key_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreign_key_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterForeign_key_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitForeign_key_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitForeign_key_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Foreign_key_clauseContext foreign_key_clause() throws RecognitionException {
		Foreign_key_clauseContext _localctx = new Foreign_key_clauseContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_foreign_key_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2163);
			match(FOREIGN);
			setState(2164);
			match(KEY);
			setState(2165);
			match(LEFT_PAREN);
			setState(2166);
			column_name();
			setState(2171);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2167);
				match(COMMA);
				setState(2168);
				column_name();
				}
				}
				setState(2173);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2174);
			match(RIGHT_PAREN);
			setState(2175);
			references_clause();
			setState(2177);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2176);
				on_delete_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class References_clauseContext extends ParserRuleContext {
		public TerminalNode REFERENCES() { return getToken(PlSqlParser.REFERENCES, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public References_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_references_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReferences_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReferences_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitReferences_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final References_clauseContext references_clause() throws RecognitionException {
		References_clauseContext _localctx = new References_clauseContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_references_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2179);
			match(REFERENCES);
			setState(2180);
			tableview_name();
			setState(2181);
			match(LEFT_PAREN);
			setState(2182);
			column_name();
			setState(2187);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2183);
				match(COMMA);
				setState(2184);
				column_name();
				}
				}
				setState(2189);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2190);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_delete_clauseContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public TerminalNode CASCADE() { return getToken(PlSqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public On_delete_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_delete_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOn_delete_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOn_delete_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitOn_delete_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_delete_clauseContext on_delete_clause() throws RecognitionException {
		On_delete_clauseContext _localctx = new On_delete_clauseContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_on_delete_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2192);
			match(ON);
			setState(2193);
			match(DELETE);
			setState(2197);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CASCADE:
				{
				setState(2194);
				match(CASCADE);
				}
				break;
			case SET:
				{
				setState(2195);
				match(SET);
				setState(2196);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unique_key_clauseContext extends ParserRuleContext {
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Unique_key_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unique_key_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUnique_key_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUnique_key_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitUnique_key_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unique_key_clauseContext unique_key_clause() throws RecognitionException {
		Unique_key_clauseContext _localctx = new Unique_key_clauseContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_unique_key_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2199);
			match(UNIQUE);
			setState(2200);
			match(LEFT_PAREN);
			setState(2201);
			column_name();
			setState(2206);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2202);
				match(COMMA);
				setState(2203);
				column_name();
				}
				}
				setState(2208);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2209);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Primary_key_clauseContext extends ParserRuleContext {
		public TerminalNode PRIMARY() { return getToken(PlSqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(PlSqlParser.KEY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(PlSqlParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(PlSqlParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public Primary_key_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primary_key_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPrimary_key_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPrimary_key_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitPrimary_key_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Primary_key_clauseContext primary_key_clause() throws RecognitionException {
		Primary_key_clauseContext _localctx = new Primary_key_clauseContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_primary_key_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2211);
			match(PRIMARY);
			setState(2212);
			match(KEY);
			setState(2213);
			match(LEFT_PAREN);
			setState(2214);
			column_name();
			setState(2219);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2215);
				match(COMMA);
				setState(2216);
				column_name();
				}
				}
				setState(2221);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2222);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Anonymous_blockContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(PlSqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public TerminalNode SEMICOLON() { return getToken(PlSqlParser.SEMICOLON, 0); }
		public Anonymous_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anonymous_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAnonymous_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAnonymous_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitAnonymous_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Anonymous_blockContext anonymous_block() throws RecognitionException {
		Anonymous_blockContext _localctx = new Anonymous_blockContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_anonymous_block);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2224);
			match(BEGIN);
			setState(2225);
			seq_of_statements();
			setState(2226);
			match(END);
			setState(2227);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Invoker_rights_clauseContext extends ParserRuleContext {
		public TerminalNode AUTHID() { return getToken(PlSqlParser.AUTHID, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PlSqlParser.CURRENT_USER, 0); }
		public TerminalNode DEFINER() { return getToken(PlSqlParser.DEFINER, 0); }
		public Invoker_rights_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_invoker_rights_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterInvoker_rights_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitInvoker_rights_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitInvoker_rights_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Invoker_rights_clauseContext invoker_rights_clause() throws RecognitionException {
		Invoker_rights_clauseContext _localctx = new Invoker_rights_clauseContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_invoker_rights_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2229);
			match(AUTHID);
			setState(2230);
			_la = _input.LA(1);
			if ( !(_la==CURRENT_USER || _la==DEFINER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compiler_parameters_clauseContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Compiler_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compiler_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCompiler_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCompiler_parameters_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCompiler_parameters_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compiler_parameters_clauseContext compiler_parameters_clause() throws RecognitionException {
		Compiler_parameters_clauseContext _localctx = new Compiler_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_compiler_parameters_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2232);
			identifier();
			setState(2233);
			match(EQUALS_OP);
			setState(2234);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_specContext extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(PlSqlParser.LANGUAGE, 0); }
		public Java_specContext java_spec() {
			return getRuleContext(Java_specContext.class,0);
		}
		public C_specContext c_spec() {
			return getRuleContext(C_specContext.class,0);
		}
		public Call_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCall_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCall_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCall_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Call_specContext call_spec() throws RecognitionException {
		Call_specContext _localctx = new Call_specContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_call_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2236);
			match(LANGUAGE);
			setState(2239);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JAVA:
				{
				setState(2237);
				java_spec();
				}
				break;
			case C_LETTER:
				{
				setState(2238);
				c_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Java_specContext extends ParserRuleContext {
		public TerminalNode JAVA() { return getToken(PlSqlParser.JAVA, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public Java_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_java_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterJava_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitJava_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitJava_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Java_specContext java_spec() throws RecognitionException {
		Java_specContext _localctx = new Java_specContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_java_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2241);
			match(JAVA);
			setState(2242);
			match(NAME);
			setState(2243);
			match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_specContext extends ParserRuleContext {
		public TerminalNode C_LETTER() { return getToken(PlSqlParser.C_LETTER, 0); }
		public TerminalNode LIBRARY() { return getToken(PlSqlParser.LIBRARY, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public C_agent_in_clauseContext c_agent_in_clause() {
			return getRuleContext(C_agent_in_clauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode CONTEXT() { return getToken(PlSqlParser.CONTEXT, 0); }
		public C_parameters_clauseContext c_parameters_clause() {
			return getRuleContext(C_parameters_clauseContext.class,0);
		}
		public C_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterC_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitC_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitC_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_specContext c_spec() throws RecognitionException {
		C_specContext _localctx = new C_specContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_c_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2245);
			match(C_LETTER);
			setState(2248);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(2246);
				match(NAME);
				setState(2247);
				match(CHAR_STRING);
				}
			}

			setState(2250);
			match(LIBRARY);
			setState(2251);
			identifier();
			setState(2253);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGENT) {
				{
				setState(2252);
				c_agent_in_clause();
				}
			}

			setState(2257);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2255);
				match(WITH);
				setState(2256);
				match(CONTEXT);
				}
			}

			setState(2260);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARAMETERS) {
				{
				setState(2259);
				c_parameters_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_agent_in_clauseContext extends ParserRuleContext {
		public TerminalNode AGENT() { return getToken(PlSqlParser.AGENT, 0); }
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public C_agent_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_agent_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterC_agent_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitC_agent_in_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitC_agent_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_agent_in_clauseContext c_agent_in_clause() throws RecognitionException {
		C_agent_in_clauseContext _localctx = new C_agent_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_c_agent_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2262);
			match(AGENT);
			setState(2263);
			match(IN);
			setState(2264);
			match(LEFT_PAREN);
			setState(2265);
			expression();
			setState(2270);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2266);
				match(COMMA);
				setState(2267);
				expression();
				}
				}
				setState(2272);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2273);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_parameters_clauseContext extends ParserRuleContext {
		public TerminalNode PARAMETERS() { return getToken(PlSqlParser.PARAMETERS, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public C_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterC_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitC_parameters_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitC_parameters_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_parameters_clauseContext c_parameters_clause() throws RecognitionException {
		C_parameters_clauseContext _localctx = new C_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_c_parameters_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2275);
			match(PARAMETERS);
			setState(2276);
			match(LEFT_PAREN);
			setState(2288);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2277);
				expression();
				setState(2282);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2278);
					match(COMMA);
					setState(2279);
					expression();
					}
					}
					setState(2284);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case PERIOD:
				{
				setState(2285);
				match(PERIOD);
				setState(2286);
				match(PERIOD);
				setState(2287);
				match(PERIOD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2290);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public List<TerminalNode> IN() { return getTokens(PlSqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(PlSqlParser.IN, i);
		}
		public List<TerminalNode> OUT() { return getTokens(PlSqlParser.OUT); }
		public TerminalNode OUT(int i) {
			return getToken(PlSqlParser.OUT, i);
		}
		public List<TerminalNode> INOUT() { return getTokens(PlSqlParser.INOUT); }
		public TerminalNode INOUT(int i) {
			return getToken(PlSqlParser.INOUT, i);
		}
		public List<TerminalNode> NOCOPY() { return getTokens(PlSqlParser.NOCOPY); }
		public TerminalNode NOCOPY(int i) {
			return getToken(PlSqlParser.NOCOPY, i);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterContext parameter() throws RecognitionException {
		ParameterContext _localctx = new ParameterContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_parameter);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2292);
			parameter_name();
			setState(2296);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,205,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2293);
					_la = _input.LA(1);
					if ( !(_la==IN || _la==INOUT || _la==NOCOPY || _la==OUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					} 
				}
				setState(2298);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,205,_ctx);
			}
			setState(2300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DATE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2299);
				type_spec();
				}
			}

			setState(2303);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2302);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_value_partContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASSIGN_OP() { return getToken(PlSqlParser.ASSIGN_OP, 0); }
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Default_value_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDefault_value_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDefault_value_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitDefault_value_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_value_partContext default_value_part() throws RecognitionException {
		Default_value_partContext _localctx = new Default_value_partContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_default_value_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2305);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==ASSIGN_OP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2306);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_specContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Type_declarationContext type_declaration() {
			return getRuleContext(Type_declarationContext.class,0);
		}
		public Procedure_specContext procedure_spec() {
			return getRuleContext(Procedure_specContext.class,0);
		}
		public Function_specContext function_spec() {
			return getRuleContext(Function_specContext.class,0);
		}
		public Procedure_bodyContext procedure_body() {
			return getRuleContext(Procedure_bodyContext.class,0);
		}
		public Function_bodyContext function_body() {
			return getRuleContext(Function_bodyContext.class,0);
		}
		public Declare_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDeclare_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDeclare_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitDeclare_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_specContext declare_spec() throws RecognitionException {
		Declare_specContext _localctx = new Declare_specContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_declare_spec);
		try {
			setState(2318);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2308);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2309);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2310);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2311);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2312);
				pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2313);
				type_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2314);
				procedure_spec();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2315);
				function_spec();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2316);
				procedure_body();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2317);
				function_body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_declarationContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode CONSTANT() { return getToken(PlSqlParser.CONSTANT, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterVariable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitVariable_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitVariable_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_declarationContext variable_declaration() throws RecognitionException {
		Variable_declarationContext _localctx = new Variable_declarationContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_variable_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2320);
			identifier();
			setState(2322);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
			case 1:
				{
				setState(2321);
				match(CONSTANT);
				}
				break;
			}
			setState(2324);
			type_spec();
			setState(2327);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2325);
				match(NOT);
				setState(2326);
				match(NULL);
				}
			}

			setState(2330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2329);
				default_value_part();
				}
			}

			setState(2332);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subtype_declarationContext extends ParserRuleContext {
		public TerminalNode SUBTYPE() { return getToken(PlSqlParser.SUBTYPE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Subtype_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subtype_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubtype_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubtype_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSubtype_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subtype_declarationContext subtype_declaration() throws RecognitionException {
		Subtype_declarationContext _localctx = new Subtype_declarationContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_subtype_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2334);
			match(SUBTYPE);
			setState(2335);
			identifier();
			setState(2336);
			match(IS);
			setState(2337);
			type_spec();
			setState(2343);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE) {
				{
				setState(2338);
				match(RANGE);
				setState(2339);
				expression();
				setState(2340);
				match(DOUBLE_PERIOD);
				setState(2341);
				expression();
				}
			}

			setState(2347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2345);
				match(NOT);
				setState(2346);
				match(NULL);
				}
			}

			setState(2349);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_declarationContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Parameter_specContext> parameter_spec() {
			return getRuleContexts(Parameter_specContext.class);
		}
		public Parameter_specContext parameter_spec(int i) {
			return getRuleContext(Parameter_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Cursor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCursor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCursor_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCursor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_declarationContext cursor_declaration() throws RecognitionException {
		Cursor_declarationContext _localctx = new Cursor_declarationContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_cursor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2351);
			match(CURSOR);
			setState(2352);
			identifier();
			setState(2364);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2353);
				match(LEFT_PAREN);
				setState(2354);
				parameter_spec();
				setState(2359);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2355);
					match(COMMA);
					setState(2356);
					parameter_spec();
					}
					}
					setState(2361);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2362);
				match(RIGHT_PAREN);
				}
			}

			setState(2368);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(2366);
				match(RETURN);
				setState(2367);
				type_spec();
				}
			}

			setState(2372);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(2370);
				match(IS);
				setState(2371);
				select_statement();
				}
			}

			setState(2374);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_specContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Parameter_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterParameter_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitParameter_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitParameter_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_specContext parameter_spec() throws RecognitionException {
		Parameter_specContext _localctx = new Parameter_specContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_parameter_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2376);
			parameter_name();
			setState(2381);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DATE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (IN - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2378);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(2377);
					match(IN);
					}
				}

				setState(2380);
				type_spec();
				}
			}

			setState(2384);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2383);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_declarationContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
		public Exception_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterException_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitException_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitException_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_declarationContext exception_declaration() throws RecognitionException {
		Exception_declarationContext _localctx = new Exception_declarationContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_exception_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2386);
			identifier();
			setState(2387);
			match(EXCEPTION);
			setState(2388);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_declarationContext extends ParserRuleContext {
		public IdentifierContext id1;
		public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(PlSqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(PlSqlParser.EXCEPTION_INIT, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public Numeric_negativeContext numeric_negative() {
			return getRuleContext(Numeric_negativeContext.class,0);
		}
		public TerminalNode INLINE() { return getToken(PlSqlParser.INLINE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RESTRICT_REFERENCES() { return getToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Pragma_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPragma_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPragma_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitPragma_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pragma_declarationContext pragma_declaration() throws RecognitionException {
		Pragma_declarationContext _localctx = new Pragma_declarationContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_pragma_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2390);
			match(PRAGMA);
			setState(2421);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SERIALLY_REUSABLE:
				{
				setState(2391);
				match(SERIALLY_REUSABLE);
				}
				break;
			case AUTONOMOUS_TRANSACTION:
				{
				setState(2392);
				match(AUTONOMOUS_TRANSACTION);
				}
				break;
			case EXCEPTION_INIT:
				{
				setState(2393);
				match(EXCEPTION_INIT);
				setState(2394);
				match(LEFT_PAREN);
				setState(2395);
				exception_name();
				setState(2396);
				match(COMMA);
				setState(2397);
				numeric_negative();
				setState(2398);
				match(RIGHT_PAREN);
				}
				break;
			case INLINE:
				{
				setState(2400);
				match(INLINE);
				setState(2401);
				match(LEFT_PAREN);
				setState(2402);
				((Pragma_declarationContext)_localctx).id1 = identifier();
				setState(2403);
				match(COMMA);
				setState(2404);
				expression();
				setState(2405);
				match(RIGHT_PAREN);
				}
				break;
			case RESTRICT_REFERENCES:
				{
				setState(2407);
				match(RESTRICT_REFERENCES);
				setState(2408);
				match(LEFT_PAREN);
				setState(2411);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2409);
					identifier();
					}
					break;
				case DEFAULT:
					{
					setState(2410);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2415); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2413);
					match(COMMA);
					setState(2414);
					identifier();
					}
					}
					setState(2417); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(2419);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2423);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_type_defContext extends ParserRuleContext {
		public TerminalNode RECORD() { return getToken(PlSqlParser.RECORD, 0); }
		public List<Field_specContext> field_spec() {
			return getRuleContexts(Field_specContext.class);
		}
		public Field_specContext field_spec(int i) {
			return getRuleContext(Field_specContext.class,i);
		}
		public Record_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRecord_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRecord_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitRecord_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_type_defContext record_type_def() throws RecognitionException {
		Record_type_defContext _localctx = new Record_type_defContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_record_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2425);
			match(RECORD);
			setState(2426);
			match(LEFT_PAREN);
			setState(2427);
			field_spec();
			setState(2432);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2428);
				match(COMMA);
				setState(2429);
				field_spec();
				}
				}
				setState(2434);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2435);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_specContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Field_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterField_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitField_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitField_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Field_specContext field_spec() throws RecognitionException {
		Field_specContext _localctx = new Field_specContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_field_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2437);
			column_name();
			setState(2439);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DATE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2438);
				type_spec();
				}
			}

			setState(2443);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2441);
				match(NOT);
				setState(2442);
				match(NULL);
				}
			}

			setState(2446);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2445);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ref_cursor_type_defContext extends ParserRuleContext {
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Ref_cursor_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ref_cursor_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRef_cursor_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRef_cursor_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitRef_cursor_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ref_cursor_type_defContext ref_cursor_type_def() throws RecognitionException {
		Ref_cursor_type_defContext _localctx = new Ref_cursor_type_defContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_ref_cursor_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2448);
			match(REF);
			setState(2449);
			match(CURSOR);
			setState(2452);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(2450);
				match(RETURN);
				setState(2451);
				type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_declarationContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IS() { return getToken(PlSqlParser.IS, 0); }
		public Table_type_defContext table_type_def() {
			return getRuleContext(Table_type_defContext.class,0);
		}
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Record_type_defContext record_type_def() {
			return getRuleContext(Record_type_defContext.class,0);
		}
		public Ref_cursor_type_defContext ref_cursor_type_def() {
			return getRuleContext(Ref_cursor_type_defContext.class,0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitType_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_declarationContext type_declaration() throws RecognitionException {
		Type_declarationContext _localctx = new Type_declarationContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_type_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2454);
			match(TYPE);
			setState(2455);
			identifier();
			setState(2456);
			match(IS);
			setState(2461);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
				{
				setState(2457);
				table_type_def();
				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(2458);
				varray_type_def();
				}
				break;
			case RECORD:
				{
				setState(2459);
				record_type_def();
				}
				break;
			case REF:
				{
				setState(2460);
				ref_cursor_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2463);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_type_defContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Table_indexed_by_partContext table_indexed_by_part() {
			return getRuleContext(Table_indexed_by_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Table_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTable_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_type_defContext table_type_def() throws RecognitionException {
		Table_type_defContext _localctx = new Table_type_defContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_table_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2465);
			match(TABLE);
			setState(2466);
			match(OF);
			setState(2467);
			type_spec();
			setState(2469);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INDEX || _la==INDEXED) {
				{
				setState(2468);
				table_indexed_by_part();
				}
			}

			setState(2473);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2471);
				match(NOT);
				setState(2472);
				match(NULL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_indexed_by_partContext extends ParserRuleContext {
		public Token idx1;
		public Token idx2;
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode INDEXED() { return getToken(PlSqlParser.INDEXED, 0); }
		public TerminalNode INDEX() { return getToken(PlSqlParser.INDEX, 0); }
		public Table_indexed_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_indexed_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_indexed_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_indexed_by_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTable_indexed_by_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_indexed_by_partContext table_indexed_by_part() throws RecognitionException {
		Table_indexed_by_partContext _localctx = new Table_indexed_by_partContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_table_indexed_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2477);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEXED:
				{
				setState(2475);
				((Table_indexed_by_partContext)_localctx).idx1 = match(INDEXED);
				}
				break;
			case INDEX:
				{
				setState(2476);
				((Table_indexed_by_partContext)_localctx).idx2 = match(INDEX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2479);
			match(BY);
			setState(2480);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Varray_type_defContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode VARRAY() { return getToken(PlSqlParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(PlSqlParser.VARYING, 0); }
		public TerminalNode ARRAY() { return getToken(PlSqlParser.ARRAY, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Varray_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varray_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterVarray_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitVarray_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitVarray_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Varray_type_defContext varray_type_def() throws RecognitionException {
		Varray_type_defContext _localctx = new Varray_type_defContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_varray_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2485);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VARRAY:
				{
				setState(2482);
				match(VARRAY);
				}
				break;
			case VARYING:
				{
				setState(2483);
				match(VARYING);
				setState(2484);
				match(ARRAY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2487);
			match(LEFT_PAREN);
			setState(2488);
			expression();
			setState(2489);
			match(RIGHT_PAREN);
			setState(2490);
			match(OF);
			setState(2491);
			type_spec();
			setState(2494);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,234,_ctx) ) {
			case 1:
				{
				setState(2492);
				match(NOT);
				setState(2493);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seq_of_statementsContext extends ParserRuleContext {
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<Label_declarationContext> label_declaration() {
			return getRuleContexts(Label_declarationContext.class);
		}
		public Label_declarationContext label_declaration(int i) {
			return getRuleContext(Label_declarationContext.class,i);
		}
		public List<TerminalNode> EOF() { return getTokens(PlSqlParser.EOF); }
		public TerminalNode EOF(int i) {
			return getToken(PlSqlParser.EOF, i);
		}
		public Seq_of_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seq_of_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSeq_of_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSeq_of_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSeq_of_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Seq_of_statementsContext seq_of_statements() throws RecognitionException {
		Seq_of_statementsContext _localctx = new Seq_of_statementsContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_seq_of_statements);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2500); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(2500);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case A_LETTER:
					case ADD:
					case AFTER:
					case AGENT:
					case AGGREGATE:
					case ALTER:
					case ANALYZE:
					case ARRAY:
					case ASSOCIATE:
					case AT:
					case ATTRIBUTE:
					case AUDIT:
					case AUTHID:
					case AUTO:
					case AUTOMATIC:
					case AUTONOMOUS_TRANSACTION:
					case BATCH:
					case BEFORE:
					case BEGIN:
					case BFILE:
					case BINARY_DOUBLE:
					case BINARY_FLOAT:
					case BINARY_INTEGER:
					case BLOB:
					case BLOCK:
					case BODY:
					case BOOLEAN:
					case BOTH:
					case BULK:
					case BYTE:
					case C_LETTER:
					case CALL:
					case CANONICAL:
					case CASCADE:
					case CASE:
					case CAST:
					case CHAR:
					case CHAR_CS:
					case CHARACTER:
					case CHR:
					case CLOB:
					case CLOSE:
					case CLUSTER:
					case COLLECT:
					case COLUMNS:
					case COMMENT:
					case COMMIT:
					case COMMITTED:
					case COMPATIBILITY:
					case COMPILE:
					case COMPOUND:
					case CONSTANT:
					case CONSTRAINT:
					case CONSTRAINTS:
					case CONSTRUCTOR:
					case CONTENT:
					case CONTEXT:
					case CONTINUE:
					case CONVERT:
					case CORRUPT_XID:
					case CORRUPT_XID_ALL:
					case COST:
					case COUNT:
					case CREATE:
					case CROSS:
					case CUBE:
					case CURRENT_USER:
					case CURSOR:
					case CUSTOMDATUM:
					case CYCLE:
					case DATA:
					case DATABASE:
					case DAY:
					case DB_ROLE_CHANGE:
					case DBTIMEZONE:
					case DDL:
					case DEBUG:
					case DEC:
					case DECIMAL:
					case DECLARE:
					case DECOMPOSE:
					case DECREMENT:
					case DEFAULTS:
					case DEFERRED:
					case DEFINER:
					case DELETE:
					case DETERMINISTIC:
					case DIMENSION:
					case DISABLE:
					case DISASSOCIATE:
					case DOCUMENT:
					case DOUBLE:
					case DSINTERVAL_UNCONSTRAINED:
					case EACH:
					case ELEMENT:
					case EMPTY:
					case ENABLE:
					case ENCODING:
					case ENTITYESCAPING:
					case ERR:
					case ERRORS:
					case ESCAPE:
					case EVALNAME:
					case EXCEPTION:
					case EXCEPTION_INIT:
					case EXCEPTIONS:
					case EXCLUDE:
					case EXECUTE:
					case EXIT:
					case EXPLAIN:
					case EXTERNAL:
					case EXTRACT:
					case FAILURE:
					case FETCH:
					case FINAL:
					case FIRST:
					case FIRST_VALUE:
					case FLOAT:
					case FOLLOWING:
					case FOLLOWS:
					case FOR:
					case FORALL:
					case FORCE:
					case FULL:
					case FUNCTION:
					case GOTO:
					case GRANT:
					case GROUPING:
					case HASH:
					case HIDE:
					case HOUR:
					case IF:
					case IGNORE:
					case IMMEDIATE:
					case INCLUDE:
					case INCLUDING:
					case INCREMENT:
					case INDENT:
					case INDEXED:
					case INDICATOR:
					case INDICES:
					case INFINITE:
					case INLINE:
					case INNER:
					case INOUT:
					case INSERT:
					case INSTANTIABLE:
					case INSTEAD:
					case INT:
					case INTEGER:
					case INTERVAL:
					case INVALIDATE:
					case ISOLATION:
					case ITERATE:
					case JAVA:
					case JOIN:
					case KEEP:
					case KEY:
					case LANGUAGE:
					case LAST:
					case LAST_VALUE:
					case LEADING:
					case LEFT:
					case LEVEL:
					case LIBRARY:
					case LIKE2:
					case LIKE4:
					case LIKEC:
					case LIMIT:
					case LOCAL:
					case LOCK:
					case LOCKED:
					case LOG:
					case LOGOFF:
					case LOGON:
					case LONG:
					case LOOP:
					case MAIN:
					case MAP:
					case MATCHED:
					case MAXVALUE:
					case MEASURES:
					case MEMBER:
					case MERGE:
					case MINUTE:
					case MINVALUE:
					case MLSLABEL:
					case MODEL:
					case MODIFY:
					case MONTH:
					case MULTISET:
					case NAME:
					case NAN:
					case NATURAL:
					case NATURALN:
					case NAV:
					case NCHAR:
					case NCHAR_CS:
					case NCLOB:
					case NESTED:
					case NEW:
					case NO:
					case NOAUDIT:
					case NOCOPY:
					case NOCYCLE:
					case NOENTITYESCAPING:
					case NONE:
					case NOSCHEMACHECK:
					case NULL:
					case NULLS:
					case NUMBER:
					case NUMERIC:
					case NVARCHAR2:
					case OBJECT:
					case OFF:
					case OID:
					case OLD:
					case ONLY:
					case OPEN:
					case ORADATA:
					case ORDINALITY:
					case OSERROR:
					case OUT:
					case OUTER:
					case OVER:
					case OVERRIDING:
					case PACKAGE:
					case PARALLEL_ENABLE:
					case PARAMETERS:
					case PARENT:
					case PARTITION:
					case PASSING:
					case PATH:
					case PIPE:
					case PIPELINED:
					case PLAN:
					case PLS_INTEGER:
					case POSITIVE:
					case POSITIVEN:
					case PRAGMA:
					case PRECEDING:
					case PRECISION:
					case PRESENT:
					case PROCEDURE:
					case RAISE:
					case RANGE:
					case RAW:
					case READ:
					case REAL:
					case RECORD:
					case REF:
					case REFERENCE:
					case REFERENCING:
					case REJECT:
					case RELIES_ON:
					case RENAME:
					case REPLACE:
					case RESPECT:
					case RESTRICT_REFERENCES:
					case RESULT:
					case RESULT_CACHE:
					case RETURN:
					case RETURNING:
					case REUSE:
					case REVERSE:
					case RIGHT:
					case ROLLBACK:
					case ROLLUP:
					case ROW:
					case ROWID:
					case ROWS:
					case RULES:
					case SAMPLE:
					case SAVE:
					case SAVEPOINT:
					case SCHEMA:
					case SCHEMACHECK:
					case SCN:
					case SECOND:
					case SEED:
					case SEGMENT:
					case SELECT:
					case SELF:
					case SEQUENTIAL:
					case SERIALIZABLE:
					case SERIALLY_REUSABLE:
					case SERVERERROR:
					case SESSIONTIMEZONE:
					case SET:
					case SETS:
					case SETTINGS:
					case SHOW:
					case SHUTDOWN:
					case SIBLINGS:
					case SIGNTYPE:
					case SIMPLE_INTEGER:
					case SINGLE:
					case SKIP_:
					case SMALLINT:
					case SNAPSHOT:
					case SOME:
					case SPECIFICATION:
					case SQLDATA:
					case SQLERROR:
					case STANDALONE:
					case STARTUP:
					case STATEMENT:
					case STATEMENT_ID:
					case STATIC:
					case STATISTICS:
					case STRING:
					case SUBMULTISET:
					case SUBPARTITION:
					case SUBSTITUTABLE:
					case SUBTYPE:
					case SUCCESS:
					case SUSPEND:
					case TIME:
					case TIMESTAMP:
					case TIMESTAMP_LTZ_UNCONSTRAINED:
					case TIMESTAMP_TZ_UNCONSTRAINED:
					case TIMESTAMP_UNCONSTRAINED:
					case TIMEZONE_ABBR:
					case TIMEZONE_HOUR:
					case TIMEZONE_MINUTE:
					case TIMEZONE_REGION:
					case TRAILING:
					case TRANSACTION:
					case TRANSLATE:
					case TREAT:
					case TRIGGER:
					case TRUNCATE:
					case TYPE:
					case UNBOUNDED:
					case UNDER:
					case UNLIMITED:
					case UNTIL:
					case UPDATE:
					case UPDATED:
					case UPSERT:
					case UROWID:
					case USE:
					case VALIDATE:
					case VALUE:
					case VARCHAR:
					case VARCHAR2:
					case VARIABLE:
					case VARRAY:
					case VARYING:
					case VERSION:
					case VERSIONS:
					case WAIT:
					case WARNING:
					case WELLFORMED:
					case WHENEVER:
					case WHILE:
					case WITH:
					case WITHIN:
					case WORK:
					case WRITE:
					case XML:
					case XMLAGG:
					case XMLATTRIBUTES:
					case XMLCAST:
					case XMLCOLATTVAL:
					case XMLELEMENT:
					case XMLEXISTS:
					case XMLFOREST:
					case XMLNAMESPACES:
					case XMLPARSE:
					case XMLPI:
					case XMLQUERY:
					case XMLROOT:
					case XMLSERIALIZE:
					case XMLTABLE:
					case YEAR:
					case YES:
					case YMINTERVAL_UNCONSTRAINED:
					case ZONE:
					case PREDICTION:
					case PREDICTION_BOUNDS:
					case PREDICTION_COST:
					case PREDICTION_DETAILS:
					case PREDICTION_PROBABILITY:
					case PREDICTION_SET:
					case CUME_DIST:
					case DENSE_RANK:
					case LISTAGG:
					case PERCENT_RANK:
					case PERCENTILE_CONT:
					case PERCENTILE_DISC:
					case RANK:
					case AVG:
					case CORR:
					case COVAR_:
					case LAG:
					case LEAD:
					case MAX:
					case MEDIAN:
					case MIN:
					case NTILE:
					case RATIO_TO_REPORT:
					case REGR_:
					case ROW_NUMBER:
					case SUBSTR:
					case TRIM:
					case SUM:
					case STDDEV:
					case VAR_:
					case VARIANCE:
					case DELIMITED_ID:
					case LEFT_PAREN:
					case BINDVAR:
					case COLON:
					case INTRODUCER:
					case REGULAR_ID:
						{
						setState(2496);
						statement();
						setState(2497);
						_la = _input.LA(1);
						if ( !(_la==EOF || _la==SEMICOLON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LESS_THAN_OP:
						{
						setState(2499);
						label_declaration();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2502); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,236,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_declarationContext extends ParserRuleContext {
		public Token ltp1;
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Label_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLabel_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLabel_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitLabel_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Label_declarationContext label_declaration() throws RecognitionException {
		Label_declarationContext _localctx = new Label_declarationContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_label_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2504);
			((Label_declarationContext)_localctx).ltp1 = match(LESS_THAN_OP);
			setState(2505);
			match(LESS_THAN_OP);
			setState(2506);
			label_name();
			setState(2507);
			match(GREATER_THAN_OP);
			setState(2508);
			match(GREATER_THAN_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(PlSqlParser.CREATE, 0); }
		public Swallow_to_semiContext swallow_to_semi() {
			return getRuleContext(Swallow_to_semiContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(PlSqlParser.ALTER, 0); }
		public TerminalNode GRANT() { return getToken(PlSqlParser.GRANT, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Assignment_statementContext assignment_statement() {
			return getRuleContext(Assignment_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Exit_statementContext exit_statement() {
			return getRuleContext(Exit_statementContext.class,0);
		}
		public Goto_statementContext goto_statement() {
			return getRuleContext(Goto_statementContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Loop_statementContext loop_statement() {
			return getRuleContext(Loop_statementContext.class,0);
		}
		public Forall_statementContext forall_statement() {
			return getRuleContext(Forall_statementContext.class,0);
		}
		public Null_statementContext null_statement() {
			return getRuleContext(Null_statementContext.class,0);
		}
		public Raise_statementContext raise_statement() {
			return getRuleContext(Raise_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Pipe_row_statementContext pipe_row_statement() {
			return getRuleContext(Pipe_row_statementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_statement);
		try {
			setState(2537);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,238,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2510);
				match(CREATE);
				setState(2511);
				swallow_to_semi();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2512);
				match(ALTER);
				setState(2513);
				swallow_to_semi();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2514);
				match(GRANT);
				setState(2516);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,237,_ctx) ) {
				case 1:
					{
					setState(2515);
					match(ALL);
					}
					break;
				}
				setState(2518);
				swallow_to_semi();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2519);
				match(TRUNCATE);
				setState(2520);
				swallow_to_semi();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2521);
				body();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2522);
				block();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2523);
				assignment_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2524);
				continue_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2525);
				exit_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2526);
				goto_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2527);
				if_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2528);
				loop_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2529);
				forall_statement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2530);
				null_statement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2531);
				raise_statement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2532);
				return_statement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2533);
				case_statement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2534);
				sql_statement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2535);
				function_call();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(2536);
				pipe_row_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_statementContext extends ParserRuleContext {
		public TerminalNode ASSIGN_OP() { return getToken(PlSqlParser.ASSIGN_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Assignment_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAssignment_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAssignment_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitAssignment_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assignment_statementContext assignment_statement() throws RecognitionException {
		Assignment_statementContext _localctx = new Assignment_statementContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_assignment_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2541);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2539);
				general_element();
				}
				break;
			case BINDVAR:
			case COLON:
				{
				setState(2540);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2543);
			match(ASSIGN_OP);
			setState(2544);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(PlSqlParser.CONTINUE, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterContinue_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitContinue_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitContinue_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_continue_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2546);
			match(CONTINUE);
			setState(2548);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2547);
				label_name();
				}
			}

			setState(2552);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2550);
				match(WHEN);
				setState(2551);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_statementContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Exit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterExit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitExit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitExit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exit_statementContext exit_statement() throws RecognitionException {
		Exit_statementContext _localctx = new Exit_statementContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_exit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2554);
			match(EXIT);
			setState(2556);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2555);
				label_name();
				}
			}

			setState(2560);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2558);
				match(WHEN);
				setState(2559);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Goto_statementContext extends ParserRuleContext {
		public TerminalNode GOTO() { return getToken(PlSqlParser.GOTO, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goto_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGoto_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGoto_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitGoto_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Goto_statementContext goto_statement() throws RecognitionException {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_goto_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2562);
			match(GOTO);
			setState(2563);
			label_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_statementContext extends ParserRuleContext {
		public List<TerminalNode> IF() { return getTokens(PlSqlParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(PlSqlParser.IF, i);
		}
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<Elsif_partContext> elsif_part() {
			return getRuleContexts(Elsif_partContext.class);
		}
		public Elsif_partContext elsif_part(int i) {
			return getRuleContext(Elsif_partContext.class,i);
		}
		public Else_partContext else_part() {
			return getRuleContext(Else_partContext.class,0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterIf_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitIf_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitIf_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_if_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2565);
			match(IF);
			setState(2566);
			condition();
			setState(2567);
			match(THEN);
			setState(2568);
			seq_of_statements();
			setState(2572);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSIF) {
				{
				{
				setState(2569);
				elsif_part();
				}
				}
				setState(2574);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2576);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(2575);
				else_part();
				}
			}

			setState(2578);
			match(END);
			setState(2579);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Elsif_partContext extends ParserRuleContext {
		public TerminalNode ELSIF() { return getToken(PlSqlParser.ELSIF, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Elsif_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elsif_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterElsif_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitElsif_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitElsif_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Elsif_partContext elsif_part() throws RecognitionException {
		Elsif_partContext _localctx = new Elsif_partContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_elsif_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2581);
			match(ELSIF);
			setState(2582);
			condition();
			setState(2583);
			match(THEN);
			setState(2584);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterElse_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitElse_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitElse_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Else_partContext else_part() throws RecognitionException {
		Else_partContext _localctx = new Else_partContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2586);
			match(ELSE);
			setState(2587);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Loop_statementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(PlSqlParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(PlSqlParser.LOOP, i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public TerminalNode WHILE() { return getToken(PlSqlParser.WHILE, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Cursor_loop_paramContext cursor_loop_param() {
			return getRuleContext(Cursor_loop_paramContext.class,0);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLoop_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLoop_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitLoop_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Loop_statementContext loop_statement() throws RecognitionException {
		Loop_statementContext _localctx = new Loop_statementContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_loop_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2590);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
			case 1:
				{
				setState(2589);
				label_name();
				}
				break;
			}
			setState(2596);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHILE:
				{
				setState(2592);
				match(WHILE);
				setState(2593);
				condition();
				}
				break;
			case FOR:
				{
				setState(2594);
				match(FOR);
				setState(2595);
				cursor_loop_param();
				}
				break;
			case LOOP:
				break;
			default:
				break;
			}
			setState(2598);
			match(LOOP);
			setState(2599);
			seq_of_statements();
			setState(2600);
			match(END);
			setState(2601);
			match(LOOP);
			setState(2603);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==REGULAR_ID) {
				{
				setState(2602);
				label_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_loop_paramContext extends ParserRuleContext {
		public Token range;
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode REVERSE() { return getToken(PlSqlParser.REVERSE, 0); }
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Cursor_loop_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_loop_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCursor_loop_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCursor_loop_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCursor_loop_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_loop_paramContext cursor_loop_param() throws RecognitionException {
		Cursor_loop_paramContext _localctx = new Cursor_loop_paramContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_cursor_loop_param);
		int _la;
		try {
			setState(2626);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2605);
				index_name();
				setState(2606);
				match(IN);
				setState(2608);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
				case 1:
					{
					setState(2607);
					match(REVERSE);
					}
					break;
				}
				setState(2610);
				lower_bound();
				setState(2611);
				((Cursor_loop_paramContext)_localctx).range = match(DOUBLE_PERIOD);
				setState(2612);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2614);
				record_name();
				setState(2615);
				match(IN);
				setState(2624);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2616);
					cursor_name();
					setState(2618);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LEFT_PAREN) {
						{
						setState(2617);
						expression_list();
						}
					}

					}
					break;
				case LEFT_PAREN:
					{
					setState(2620);
					match(LEFT_PAREN);
					setState(2621);
					select_statement();
					setState(2622);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Forall_statementContext extends ParserRuleContext {
		public TerminalNode FORALL() { return getToken(PlSqlParser.FORALL, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Bounds_clauseContext bounds_clause() {
			return getRuleContext(Bounds_clauseContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public TerminalNode SAVE() { return getToken(PlSqlParser.SAVE, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(PlSqlParser.EXCEPTIONS, 0); }
		public Forall_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forall_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterForall_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitForall_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitForall_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Forall_statementContext forall_statement() throws RecognitionException {
		Forall_statementContext _localctx = new Forall_statementContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_forall_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2628);
			match(FORALL);
			setState(2629);
			index_name();
			setState(2630);
			match(IN);
			setState(2631);
			bounds_clause();
			setState(2632);
			sql_statement();
			setState(2635);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SAVE) {
				{
				setState(2633);
				match(SAVE);
				setState(2634);
				match(EXCEPTIONS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bounds_clauseContext extends ParserRuleContext {
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode INDICES() { return getToken(PlSqlParser.INDICES, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Collection_nameContext collection_name() {
			return getRuleContext(Collection_nameContext.class,0);
		}
		public Between_boundContext between_bound() {
			return getRuleContext(Between_boundContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Bounds_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bounds_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterBounds_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitBounds_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitBounds_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bounds_clauseContext bounds_clause() throws RecognitionException {
		Bounds_clauseContext _localctx = new Bounds_clauseContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_bounds_clause);
		int _la;
		try {
			setState(2650);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2637);
				lower_bound();
				setState(2638);
				match(DOUBLE_PERIOD);
				setState(2639);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2641);
				match(INDICES);
				setState(2642);
				match(OF);
				setState(2643);
				collection_name();
				setState(2645);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BETWEEN) {
					{
					setState(2644);
					between_bound();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2647);
				match(VALUES);
				setState(2648);
				match(OF);
				setState(2649);
				index_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_boundContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public Between_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterBetween_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitBetween_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitBetween_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Between_boundContext between_bound() throws RecognitionException {
		Between_boundContext _localctx = new Between_boundContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_between_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2652);
			match(BETWEEN);
			setState(2653);
			lower_bound();
			setState(2654);
			match(AND);
			setState(2655);
			upper_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lower_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Lower_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lower_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLower_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLower_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitLower_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lower_boundContext lower_bound() throws RecognitionException {
		Lower_boundContext _localctx = new Lower_boundContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_lower_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2657);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Upper_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Upper_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_upper_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUpper_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUpper_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitUpper_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Upper_boundContext upper_bound() throws RecognitionException {
		Upper_boundContext _localctx = new Upper_boundContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_upper_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2659);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_statementContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public Null_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNull_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNull_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitNull_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_statementContext null_statement() throws RecognitionException {
		Null_statementContext _localctx = new Null_statementContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_null_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2661);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Raise_statementContext extends ParserRuleContext {
		public TerminalNode RAISE() { return getToken(PlSqlParser.RAISE, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raise_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRaise_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRaise_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitRaise_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Raise_statementContext raise_statement() throws RecognitionException {
		Raise_statementContext _localctx = new Raise_statementContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_raise_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2663);
			match(RAISE);
			setState(2665);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(2664);
				exception_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReturn_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReturn_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitReturn_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_return_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2667);
			match(RETURN);
			setState(2669);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COALESCE) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONNECT_BY_ROOT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DISTINCT - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NOT - 193)) | (1L << (NULL - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NUMERIC - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (PRIOR - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT - 321)) | (1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)) | (1L << (SUBMULTISET - 321)) | (1L << (SUBPARTITION - 321)) | (1L << (SUBSTITUTABLE - 321)) | (1L << (SUBTYPE - 321)) | (1L << (SUCCESS - 321)) | (1L << (SUSPEND - 321)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUE - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (DECODE - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (NVL - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROUND - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TO_CHAR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (LEAST - 453)) | (1L << (GREATEST - 453)) | (1L << (TO_DATE - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (UNSIGNED_INTEGER - 453)) | (1L << (APPROXIMATE_NUM_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (LEFT_PAREN - 453)) | (1L << (PLUS_SIGN - 453)) | (1L << (MINUS_SIGN - 453)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (BINDVAR - 519)) | (1L << (COLON - 519)) | (1L << (INTRODUCER - 519)) | (1L << (REGULAR_ID - 519)))) != 0)) {
				{
				setState(2668);
				expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_callContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public TerminalNode CALL() { return getToken(PlSqlParser.CALL, 0); }
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunction_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunction_call(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitFunction_call(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_function_call);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2672);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
			case 1:
				{
				setState(2671);
				match(CALL);
				}
				break;
			}
			setState(2674);
			routine_name();
			setState(2676);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2675);
				function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pipe_row_statementContext extends ParserRuleContext {
		public TerminalNode PIPE() { return getToken(PlSqlParser.PIPE, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Pipe_row_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pipe_row_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPipe_row_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPipe_row_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitPipe_row_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pipe_row_statementContext pipe_row_statement() throws RecognitionException {
		Pipe_row_statementContext _localctx = new Pipe_row_statementContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_pipe_row_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2678);
			match(PIPE);
			setState(2679);
			match(ROW);
			setState(2680);
			match(LEFT_PAREN);
			setState(2681);
			expression();
			setState(2682);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BodyContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(PlSqlParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public List<Exception_handlerContext> exception_handler() {
			return getRuleContexts(Exception_handlerContext.class);
		}
		public Exception_handlerContext exception_handler(int i) {
			return getRuleContext(Exception_handlerContext.class,i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BodyContext body() throws RecognitionException {
		BodyContext _localctx = new BodyContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2684);
			match(BEGIN);
			setState(2685);
			seq_of_statements();
			setState(2692);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPTION) {
				{
				setState(2686);
				match(EXCEPTION);
				setState(2688); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2687);
					exception_handler();
					}
					}
					setState(2690); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				}
			}

			setState(2694);
			match(END);
			setState(2696);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,262,_ctx) ) {
			case 1:
				{
				setState(2695);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_handlerContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public List<Exception_nameContext> exception_name() {
			return getRuleContexts(Exception_nameContext.class);
		}
		public Exception_nameContext exception_name(int i) {
			return getRuleContext(Exception_nameContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(PlSqlParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(PlSqlParser.OR, i);
		}
		public Exception_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_handler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterException_handler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitException_handler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitException_handler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_handlerContext exception_handler() throws RecognitionException {
		Exception_handlerContext _localctx = new Exception_handlerContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_exception_handler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2698);
			match(WHEN);
			setState(2699);
			exception_name();
			setState(2704);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(2700);
				match(OR);
				setState(2701);
				exception_name();
				}
				}
				setState(2706);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2707);
			match(THEN);
			setState(2708);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_blockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTrigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTrigger_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTrigger_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_blockContext trigger_block() throws RecognitionException {
		Trigger_blockContext _localctx = new Trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_trigger_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECLARE - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(2711);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(2710);
					match(DECLARE);
					}
				}

				setState(2714); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2713);
					declare_spec();
					}
					}
					setState(2716); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
				}
			}

			setState(2720);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(PlSqlParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BlockContext block() throws RecognitionException {
		BlockContext _localctx = new BlockContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2723);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(2722);
				match(DECLARE);
				}
			}

			setState(2726); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2725);
				declare_spec();
				}
				}
				setState(2728); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (PROCEDURE - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID );
			setState(2730);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_statementContext extends ParserRuleContext {
		public Execute_immediateContext execute_immediate() {
			return getRuleContext(Execute_immediateContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Cursor_manipulation_statementsContext cursor_manipulation_statements() {
			return getRuleContext(Cursor_manipulation_statementsContext.class,0);
		}
		public Transaction_control_statementsContext transaction_control_statements() {
			return getRuleContext(Transaction_control_statementsContext.class,0);
		}
		public Sql_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSql_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSql_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSql_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_statementContext sql_statement() throws RecognitionException {
		Sql_statementContext _localctx = new Sql_statementContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_sql_statement);
		try {
			setState(2736);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2732);
				execute_immediate();
				}
				break;
			case DELETE:
			case EXPLAIN:
			case INSERT:
			case LOCK:
			case MERGE:
			case SELECT:
			case UPDATE:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2733);
				data_manipulation_language_statements();
				}
				break;
			case CLOSE:
			case FETCH:
			case OPEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2734);
				cursor_manipulation_statements();
				}
				break;
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(2735);
				transaction_control_statements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_immediateContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(PlSqlParser.EXECUTE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Dynamic_returning_clauseContext dynamic_returning_clause() {
			return getRuleContext(Dynamic_returning_clauseContext.class,0);
		}
		public Execute_immediateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_immediate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterExecute_immediate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitExecute_immediate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitExecute_immediate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_immediateContext execute_immediate() throws RecognitionException {
		Execute_immediateContext _localctx = new Execute_immediateContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_execute_immediate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2738);
			match(EXECUTE);
			setState(2739);
			match(IMMEDIATE);
			setState(2740);
			expression();
			setState(2750);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BULK:
			case INTO:
				{
				setState(2741);
				into_clause();
				setState(2743);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2742);
					using_clause();
					}
				}

				}
				break;
			case USING:
				{
				setState(2745);
				using_clause();
				setState(2747);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURN || _la==RETURNING) {
					{
					setState(2746);
					dynamic_returning_clause();
					}
				}

				}
				break;
			case RETURN:
			case RETURNING:
				{
				setState(2749);
				dynamic_returning_clause();
				}
				break;
			case EOF:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_returning_clauseContext extends ParserRuleContext {
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Dynamic_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDynamic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDynamic_returning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitDynamic_returning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_returning_clauseContext dynamic_returning_clause() throws RecognitionException {
		Dynamic_returning_clauseContext _localctx = new Dynamic_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_dynamic_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2752);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2753);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_manipulation_language_statementsContext extends ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Lock_table_statementContext lock_table_statement() {
			return getRuleContext(Lock_table_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Explain_statementContext explain_statement() {
			return getRuleContext(Explain_statementContext.class,0);
		}
		public Data_manipulation_language_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_manipulation_language_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterData_manipulation_language_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitData_manipulation_language_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitData_manipulation_language_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_manipulation_language_statementsContext data_manipulation_language_statements() throws RecognitionException {
		Data_manipulation_language_statementsContext _localctx = new Data_manipulation_language_statementsContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_data_manipulation_language_statements);
		try {
			setState(2762);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MERGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2755);
				merge_statement();
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(2756);
				lock_table_statement();
				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2757);
				select_statement();
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2758);
				update_statement();
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2759);
				delete_statement();
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 6);
				{
				setState(2760);
				insert_statement();
				}
				break;
			case EXPLAIN:
				enterOuterAlt(_localctx, 7);
				{
				setState(2761);
				explain_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_manipulation_statementsContext extends ParserRuleContext {
		public Close_statementContext close_statement() {
			return getRuleContext(Close_statementContext.class,0);
		}
		public Open_statementContext open_statement() {
			return getRuleContext(Open_statementContext.class,0);
		}
		public Fetch_statementContext fetch_statement() {
			return getRuleContext(Fetch_statementContext.class,0);
		}
		public Open_for_statementContext open_for_statement() {
			return getRuleContext(Open_for_statementContext.class,0);
		}
		public Cursor_manipulation_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_manipulation_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCursor_manipulation_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCursor_manipulation_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCursor_manipulation_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_manipulation_statementsContext cursor_manipulation_statements() throws RecognitionException {
		Cursor_manipulation_statementsContext _localctx = new Cursor_manipulation_statementsContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_cursor_manipulation_statements);
		try {
			setState(2768);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2764);
				close_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2765);
				open_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2766);
				fetch_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2767);
				open_for_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_statementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(PlSqlParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Close_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterClose_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitClose_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitClose_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Close_statementContext close_statement() throws RecognitionException {
		Close_statementContext _localctx = new Close_statementContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_close_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2770);
			match(CLOSE);
			setState(2771);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(PlSqlParser.OPEN, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Open_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOpen_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOpen_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitOpen_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_statementContext open_statement() throws RecognitionException {
		Open_statementContext _localctx = new Open_statementContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_open_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2773);
			match(OPEN);
			setState(2774);
			cursor_name();
			setState(2776);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2775);
				expression_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_statementContext extends ParserRuleContext {
		public Token it1;
		public TerminalNode FETCH() { return getToken(PlSqlParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public TerminalNode BULK() { return getToken(PlSqlParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Fetch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFetch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFetch_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitFetch_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_statementContext fetch_statement() throws RecognitionException {
		Fetch_statementContext _localctx = new Fetch_statementContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_fetch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2778);
			match(FETCH);
			setState(2779);
			cursor_name();
			setState(2800);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(2780);
				((Fetch_statementContext)_localctx).it1 = match(INTO);
				setState(2781);
				variable_name();
				setState(2786);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2782);
					match(COMMA);
					setState(2783);
					variable_name();
					}
					}
					setState(2788);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case BULK:
				{
				setState(2789);
				match(BULK);
				setState(2790);
				match(COLLECT);
				setState(2791);
				match(INTO);
				setState(2792);
				variable_name();
				setState(2797);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2793);
					match(COMMA);
					setState(2794);
					variable_name();
					}
					}
					setState(2799);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_for_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(PlSqlParser.OPEN, 0); }
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Open_for_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_for_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOpen_for_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOpen_for_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitOpen_for_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_for_statementContext open_for_statement() throws RecognitionException {
		Open_for_statementContext _localctx = new Open_for_statementContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_open_for_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2802);
			match(OPEN);
			setState(2803);
			variable_name();
			setState(2804);
			match(FOR);
			setState(2807);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
			case 1:
				{
				setState(2805);
				select_statement();
				}
				break;
			case 2:
				{
				setState(2806);
				expression();
				}
				break;
			}
			setState(2810);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2809);
				using_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_control_statementsContext extends ParserRuleContext {
		public Set_transaction_commandContext set_transaction_command() {
			return getRuleContext(Set_transaction_commandContext.class,0);
		}
		public Set_constraint_commandContext set_constraint_command() {
			return getRuleContext(Set_constraint_commandContext.class,0);
		}
		public Commit_statementContext commit_statement() {
			return getRuleContext(Commit_statementContext.class,0);
		}
		public Rollback_statementContext rollback_statement() {
			return getRuleContext(Rollback_statementContext.class,0);
		}
		public Savepoint_statementContext savepoint_statement() {
			return getRuleContext(Savepoint_statementContext.class,0);
		}
		public Transaction_control_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_control_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTransaction_control_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTransaction_control_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTransaction_control_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_control_statementsContext transaction_control_statements() throws RecognitionException {
		Transaction_control_statementsContext _localctx = new Transaction_control_statementsContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_transaction_control_statements);
		try {
			setState(2817);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2812);
				set_transaction_command();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2813);
				set_constraint_command();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2814);
				commit_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2815);
				rollback_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2816);
				savepoint_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_transaction_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(PlSqlParser.TRANSACTION, 0); }
		public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
		public TerminalNode ISOLATION() { return getToken(PlSqlParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(PlSqlParser.LEVEL, 0); }
		public TerminalNode USE() { return getToken(PlSqlParser.USE, 0); }
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode SEGMENT() { return getToken(PlSqlParser.SEGMENT, 0); }
		public Rollback_segment_nameContext rollback_segment_name() {
			return getRuleContext(Rollback_segment_nameContext.class,0);
		}
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(PlSqlParser.WRITE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PlSqlParser.SERIALIZABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(PlSqlParser.COMMITTED, 0); }
		public Set_transaction_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_transaction_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSet_transaction_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSet_transaction_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSet_transaction_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_transaction_commandContext set_transaction_command() throws RecognitionException {
		Set_transaction_commandContext _localctx = new Set_transaction_commandContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_set_transaction_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2819);
			match(SET);
			setState(2820);
			match(TRANSACTION);
			setState(2834);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(2821);
				match(READ);
				setState(2822);
				_la = _input.LA(1);
				if ( !(_la==ONLY || _la==WRITE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ISOLATION:
				{
				setState(2823);
				match(ISOLATION);
				setState(2824);
				match(LEVEL);
				setState(2828);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SERIALIZABLE:
					{
					setState(2825);
					match(SERIALIZABLE);
					}
					break;
				case READ:
					{
					setState(2826);
					match(READ);
					setState(2827);
					match(COMMITTED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case USE:
				{
				setState(2830);
				match(USE);
				setState(2831);
				match(ROLLBACK);
				setState(2832);
				match(SEGMENT);
				setState(2833);
				rollback_segment_name();
				}
				break;
			case EOF:
			case NAME:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			setState(2838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(2836);
				match(NAME);
				setState(2837);
				quoted_string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_constraint_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PlSqlParser.CONSTRAINTS, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(PlSqlParser.DEFERRED, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public List<Constraint_nameContext> constraint_name() {
			return getRuleContexts(Constraint_nameContext.class);
		}
		public Constraint_nameContext constraint_name(int i) {
			return getRuleContext(Constraint_nameContext.class,i);
		}
		public Set_constraint_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_constraint_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSet_constraint_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSet_constraint_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSet_constraint_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_constraint_commandContext set_constraint_command() throws RecognitionException {
		Set_constraint_commandContext _localctx = new Set_constraint_commandContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_set_constraint_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2840);
			match(SET);
			setState(2841);
			_la = _input.LA(1);
			if ( !(_la==CONSTRAINT || _la==CONSTRAINTS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2851);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(2842);
				match(ALL);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2843);
				constraint_name();
				setState(2848);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2844);
					match(COMMA);
					setState(2845);
					constraint_name();
					}
					}
					setState(2850);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2853);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Commit_statementContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(PlSqlParser.WORK, 0); }
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public Write_clauseContext write_clause() {
			return getRuleContext(Write_clauseContext.class,0);
		}
		public TerminalNode CORRUPT_XID() { return getToken(PlSqlParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(PlSqlParser.CORRUPT_XID_ALL, 0); }
		public Commit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCommit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCommit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCommit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Commit_statementContext commit_statement() throws RecognitionException {
		Commit_statementContext _localctx = new Commit_statementContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_commit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2855);
			match(COMMIT);
			setState(2857);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(2856);
				match(WORK);
				}
			}

			setState(2872);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT:
				{
				setState(2859);
				match(COMMENT);
				setState(2860);
				expression();
				}
				break;
			case FORCE:
				{
				setState(2861);
				match(FORCE);
				setState(2870);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
				case 1:
					{
					setState(2862);
					match(CORRUPT_XID);
					setState(2863);
					expression();
					}
					break;
				case 2:
					{
					setState(2864);
					match(CORRUPT_XID_ALL);
					}
					break;
				case 3:
					{
					setState(2865);
					expression();
					setState(2868);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2866);
						match(COMMA);
						setState(2867);
						expression();
						}
					}

					}
					break;
				}
				}
				break;
			case EOF:
			case SAVE:
			case WRITE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			setState(2875);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WRITE) {
				{
				setState(2874);
				write_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Write_clauseContext extends ParserRuleContext {
		public TerminalNode WRITE() { return getToken(PlSqlParser.WRITE, 0); }
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public TerminalNode NOWAIT() { return getToken(PlSqlParser.NOWAIT, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public TerminalNode BATCH() { return getToken(PlSqlParser.BATCH, 0); }
		public Write_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_write_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWrite_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWrite_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitWrite_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Write_clauseContext write_clause() throws RecognitionException {
		Write_clauseContext _localctx = new Write_clauseContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_write_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2877);
			match(WRITE);
			setState(2879);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(2878);
				_la = _input.LA(1);
				if ( !(_la==NOWAIT || _la==WAIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2882);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BATCH || _la==IMMEDIATE) {
				{
				setState(2881);
				_la = _input.LA(1);
				if ( !(_la==BATCH || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_statementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(PlSqlParser.WORK, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(PlSqlParser.SAVEPOINT, 0); }
		public Rollback_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRollback_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRollback_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitRollback_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_statementContext rollback_statement() throws RecognitionException {
		Rollback_statementContext _localctx = new Rollback_statementContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_rollback_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2884);
			match(ROLLBACK);
			setState(2886);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(2885);
				match(WORK);
				}
			}

			setState(2895);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(2888);
				match(TO);
				setState(2890);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
				case 1:
					{
					setState(2889);
					match(SAVEPOINT);
					}
					break;
				}
				setState(2892);
				savepoint_name();
				}
				break;
			case FORCE:
				{
				setState(2893);
				match(FORCE);
				setState(2894);
				quoted_string();
				}
				break;
			case EOF:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_statementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(PlSqlParser.SAVEPOINT, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public Savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSavepoint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSavepoint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSavepoint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Savepoint_statementContext savepoint_statement() throws RecognitionException {
		Savepoint_statementContext _localctx = new Savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2897);
			match(SAVEPOINT);
			setState(2898);
			savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_statementContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(PlSqlParser.EXPLAIN, 0); }
		public TerminalNode PLAN() { return getToken(PlSqlParser.PLAN, 0); }
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(PlSqlParser.STATEMENT_ID, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Explain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterExplain_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitExplain_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitExplain_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_statementContext explain_statement() throws RecognitionException {
		Explain_statementContext _localctx = new Explain_statementContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_explain_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2900);
			match(EXPLAIN);
			setState(2901);
			match(PLAN);
			setState(2906);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(2902);
				match(SET);
				setState(2903);
				match(STATEMENT_ID);
				setState(2904);
				match(EQUALS_OP);
				setState(2905);
				quoted_string();
				}
			}

			setState(2910);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2908);
				match(INTO);
				setState(2909);
				tableview_name();
				}
			}

			setState(2912);
			match(FOR);
			setState(2918);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(2913);
				select_statement();
				}
				break;
			case UPDATE:
				{
				setState(2914);
				update_statement();
				}
				break;
			case DELETE:
				{
				setState(2915);
				delete_statement();
				}
				break;
			case INSERT:
				{
				setState(2916);
				insert_statement();
				}
				break;
			case MERGE:
				{
				setState(2917);
				merge_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_factoring_clauseContext subquery_factoring_clause() {
			return getRuleContext(Subquery_factoring_clauseContext.class,0);
		}
		public List<For_update_clauseContext> for_update_clause() {
			return getRuleContexts(For_update_clauseContext.class);
		}
		public For_update_clauseContext for_update_clause(int i) {
			return getRuleContext(For_update_clauseContext.class,i);
		}
		public List<Order_by_clauseContext> order_by_clause() {
			return getRuleContexts(Order_by_clauseContext.class);
		}
		public Order_by_clauseContext order_by_clause(int i) {
			return getRuleContext(Order_by_clauseContext.class,i);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSelect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSelect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2921);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2920);
				subquery_factoring_clause();
				}
			}

			setState(2923);
			subquery();
			setState(2928);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==ORDER) {
				{
				setState(2926);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FOR:
					{
					setState(2924);
					for_update_clause();
					}
					break;
				case ORDER:
					{
					setState(2925);
					order_by_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2930);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_factoring_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public List<Factoring_elementContext> factoring_element() {
			return getRuleContexts(Factoring_elementContext.class);
		}
		public Factoring_elementContext factoring_element(int i) {
			return getRuleContext(Factoring_elementContext.class,i);
		}
		public Subquery_factoring_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_factoring_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubquery_factoring_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubquery_factoring_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSubquery_factoring_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_factoring_clauseContext subquery_factoring_clause() throws RecognitionException {
		Subquery_factoring_clauseContext _localctx = new Subquery_factoring_clauseContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_subquery_factoring_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2931);
			match(WITH);
			setState(2932);
			factoring_element();
			setState(2937);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2933);
				match(COMMA);
				setState(2934);
				factoring_element();
				}
				}
				setState(2939);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Factoring_elementContext extends ParserRuleContext {
		public Query_nameContext query_name() {
			return getRuleContext(Query_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Search_clauseContext search_clause() {
			return getRuleContext(Search_clauseContext.class,0);
		}
		public Cycle_clauseContext cycle_clause() {
			return getRuleContext(Cycle_clauseContext.class,0);
		}
		public Factoring_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factoring_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFactoring_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFactoring_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitFactoring_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Factoring_elementContext factoring_element() throws RecognitionException {
		Factoring_elementContext _localctx = new Factoring_elementContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_factoring_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2940);
			query_name();
			setState(2952);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2941);
				match(LEFT_PAREN);
				setState(2942);
				column_name();
				setState(2947);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2943);
					match(COMMA);
					setState(2944);
					column_name();
					}
					}
					setState(2949);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2950);
				match(RIGHT_PAREN);
				}
			}

			setState(2954);
			match(AS);
			setState(2955);
			match(LEFT_PAREN);
			setState(2956);
			subquery();
			setState(2958);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2957);
				order_by_clause();
				}
			}

			setState(2960);
			match(RIGHT_PAREN);
			setState(2962);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEARCH) {
				{
				setState(2961);
				search_clause();
				}
			}

			setState(2965);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CYCLE) {
				{
				setState(2964);
				cycle_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_clauseContext extends ParserRuleContext {
		public TerminalNode SEARCH() { return getToken(PlSqlParser.SEARCH, 0); }
		public List<TerminalNode> FIRST() { return getTokens(PlSqlParser.FIRST); }
		public TerminalNode FIRST(int i) {
			return getToken(PlSqlParser.FIRST, i);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode DEPTH() { return getToken(PlSqlParser.DEPTH, 0); }
		public TerminalNode BREADTH() { return getToken(PlSqlParser.BREADTH, 0); }
		public List<TerminalNode> ASC() { return getTokens(PlSqlParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(PlSqlParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(PlSqlParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(PlSqlParser.DESC, i);
		}
		public List<TerminalNode> NULLS() { return getTokens(PlSqlParser.NULLS); }
		public TerminalNode NULLS(int i) {
			return getToken(PlSqlParser.NULLS, i);
		}
		public List<TerminalNode> LAST() { return getTokens(PlSqlParser.LAST); }
		public TerminalNode LAST(int i) {
			return getToken(PlSqlParser.LAST, i);
		}
		public Search_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSearch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSearch_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSearch_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_clauseContext search_clause() throws RecognitionException {
		Search_clauseContext _localctx = new Search_clauseContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_search_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2967);
			match(SEARCH);
			setState(2968);
			_la = _input.LA(1);
			if ( !(_la==BREADTH || _la==DEPTH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2969);
			match(FIRST);
			setState(2970);
			match(BY);
			setState(2971);
			column_name();
			setState(2973);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC) {
				{
				setState(2972);
				match(ASC);
				}
			}

			setState(2976);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DESC) {
				{
				setState(2975);
				match(DESC);
				}
			}

			setState(2980);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
			case 1:
				{
				setState(2978);
				match(NULLS);
				setState(2979);
				match(FIRST);
				}
				break;
			}
			setState(2984);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(2982);
				match(NULLS);
				setState(2983);
				match(LAST);
				}
			}

			setState(3004);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2986);
				match(COMMA);
				setState(2987);
				column_name();
				setState(2989);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC) {
					{
					setState(2988);
					match(ASC);
					}
				}

				setState(2992);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DESC) {
					{
					setState(2991);
					match(DESC);
					}
				}

				setState(2996);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
				case 1:
					{
					setState(2994);
					match(NULLS);
					setState(2995);
					match(FIRST);
					}
					break;
				}
				setState(3000);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(2998);
					match(NULLS);
					setState(2999);
					match(LAST);
					}
				}

				}
				}
				setState(3006);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3007);
			match(SET);
			setState(3008);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cycle_clauseContext extends ParserRuleContext {
		public TerminalNode CYCLE() { return getToken(PlSqlParser.CYCLE, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public Cycle_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cycle_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCycle_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCycle_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCycle_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cycle_clauseContext cycle_clause() throws RecognitionException {
		Cycle_clauseContext _localctx = new Cycle_clauseContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_cycle_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3010);
			match(CYCLE);
			setState(3011);
			column_name();
			setState(3016);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3012);
				match(COMMA);
				setState(3013);
				column_name();
				}
				}
				setState(3018);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3019);
			match(SET);
			setState(3020);
			column_name();
			setState(3021);
			match(TO);
			setState(3022);
			expression();
			setState(3023);
			match(DEFAULT);
			setState(3024);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_subquery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3026);
			subquery_basic_elements();
			setState(3030);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INTERSECT || _la==MINUS || _la==UNION) {
				{
				{
				setState(3027);
				subquery_operation_part();
				}
				}
				setState(3032);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_operation_partContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public TerminalNode UNION() { return getToken(PlSqlParser.UNION, 0); }
		public TerminalNode INTERSECT() { return getToken(PlSqlParser.INTERSECT, 0); }
		public TerminalNode MINUS() { return getToken(PlSqlParser.MINUS, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Subquery_operation_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_operation_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubquery_operation_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubquery_operation_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSubquery_operation_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_operation_partContext subquery_operation_part() throws RecognitionException {
		Subquery_operation_partContext _localctx = new Subquery_operation_partContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_subquery_operation_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3039);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNION:
				{
				setState(3033);
				match(UNION);
				setState(3035);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(3034);
					match(ALL);
					}
				}

				}
				break;
			case INTERSECT:
				{
				setState(3037);
				match(INTERSECT);
				}
				break;
			case MINUS:
				{
				setState(3038);
				match(MINUS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3041);
			subquery_basic_elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_basic_elementsContext extends ParserRuleContext {
		public Query_blockContext query_block() {
			return getRuleContext(Query_blockContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_basic_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_basic_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubquery_basic_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubquery_basic_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSubquery_basic_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_basic_elementsContext subquery_basic_elements() throws RecognitionException {
		Subquery_basic_elementsContext _localctx = new Subquery_basic_elementsContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_subquery_basic_elements);
		try {
			setState(3048);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3043);
				query_block();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3044);
				match(LEFT_PAREN);
				setState(3045);
				subquery();
				setState(3046);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_blockContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(PlSqlParser.SELECT, 0); }
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public List<Selected_elementContext> selected_element() {
			return getRuleContexts(Selected_elementContext.class);
		}
		public Selected_elementContext selected_element(int i) {
			return getRuleContext(Selected_elementContext.class,i);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Hierarchical_query_clauseContext hierarchical_query_clause() {
			return getRuleContext(Hierarchical_query_clauseContext.class,0);
		}
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Model_clauseContext model_clause() {
			return getRuleContext(Model_clauseContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Query_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterQuery_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitQuery_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitQuery_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_blockContext query_block() throws RecognitionException {
		Query_blockContext _localctx = new Query_blockContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_query_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3050);
			match(SELECT);
			setState(3052);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				{
				setState(3051);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(3063);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(3054);
				match(ASTERISK);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3055);
				selected_element();
				setState(3060);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3056);
					match(COMMA);
					setState(3057);
					selected_element();
					}
					}
					setState(3062);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3066);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BULK || _la==INTO) {
				{
				setState(3065);
				into_clause();
				}
			}

			setState(3068);
			from_clause();
			setState(3070);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				{
				setState(3069);
				where_clause();
				}
				break;
			}
			setState(3073);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
			case 1:
				{
				setState(3072);
				hierarchical_query_clause();
				}
				break;
			}
			setState(3076);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
			case 1:
				{
				setState(3075);
				group_by_clause();
				}
				break;
			}
			setState(3079);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
			case 1:
				{
				setState(3078);
				model_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Selected_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSelected_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSelected_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSelected_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Selected_elementContext selected_element() throws RecognitionException {
		Selected_elementContext _localctx = new Selected_elementContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_selected_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3081);
			select_list_elements();
			setState(3083);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
			case 1:
				{
				setState(3082);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public Table_ref_listContext table_ref_list() {
			return getRuleContext(Table_ref_listContext.class,0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFrom_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3085);
			match(FROM);
			setState(3086);
			table_ref_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_list_elementsContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Select_list_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSelect_list_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSelect_list_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSelect_list_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_list_elementsContext select_list_elements() throws RecognitionException {
		Select_list_elementsContext _localctx = new Select_list_elementsContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_select_list_elements);
		try {
			setState(3098);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3088);
				tableview_name();
				setState(3089);
				match(PERIOD);
				setState(3090);
				match(ASTERISK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3095);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
				case 1:
					{
					setState(3092);
					regular_id();
					setState(3093);
					match(PERIOD);
					}
					break;
				}
				setState(3097);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_listContext extends ParserRuleContext {
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public Table_ref_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_ref_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_ref_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTable_ref_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_ref_listContext table_ref_list() throws RecognitionException {
		Table_ref_listContext _localctx = new Table_ref_listContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_table_ref_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3100);
			table_ref();
			setState(3105);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,334,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3101);
					match(COMMA);
					setState(3102);
					table_ref();
					}
					} 
				}
				setState(3107);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,334,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_refContext extends ParserRuleContext {
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Join_clauseContext> join_clause() {
			return getRuleContexts(Join_clauseContext.class);
		}
		public Join_clauseContext join_clause(int i) {
			return getRuleContext(Join_clauseContext.class,i);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_ref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTable_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_refContext table_ref() throws RecognitionException {
		Table_refContext _localctx = new Table_refContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_table_ref);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3108);
			table_ref_aux();
			setState(3112);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,335,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3109);
					join_clause();
					}
					} 
				}
				setState(3114);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,335,_ctx);
			}
			setState(3117);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
			case 1:
				{
				setState(3115);
				pivot_clause();
				}
				break;
			case 2:
				{
				setState(3116);
				unpivot_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_auxContext extends ParserRuleContext {
		public Table_ref_aux_internalContext table_ref_aux_internal() {
			return getRuleContext(Table_ref_aux_internalContext.class,0);
		}
		public List<Flashback_query_clauseContext> flashback_query_clause() {
			return getRuleContexts(Flashback_query_clauseContext.class);
		}
		public Flashback_query_clauseContext flashback_query_clause(int i) {
			return getRuleContext(Flashback_query_clauseContext.class,i);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Table_ref_auxContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_aux; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_ref_aux(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_ref_aux(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTable_ref_aux(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_ref_auxContext table_ref_aux() throws RecognitionException {
		Table_ref_auxContext _localctx = new Table_ref_auxContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_table_ref_aux);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3119);
			table_ref_aux_internal();
			setState(3123);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,337,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3120);
					flashback_query_clause();
					}
					} 
				}
				setState(3125);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,337,_ctx);
			}
			setState(3127);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
			case 1:
				{
				setState(3126);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_aux_internalContext extends ParserRuleContext {
		public Table_ref_aux_internalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_aux_internal; }
	 
		public Table_ref_aux_internalContext() { }
		public void copyFrom(Table_ref_aux_internalContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class Table_ref_aux_internal_threeContext extends Table_ref_aux_internalContext {
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public Table_ref_aux_internal_threeContext(Table_ref_aux_internalContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_ref_aux_internal_three(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_ref_aux_internal_three(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTable_ref_aux_internal_three(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Table_ref_aux_internal_oneContext extends Table_ref_aux_internalContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Table_ref_aux_internal_oneContext(Table_ref_aux_internalContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_ref_aux_internal_one(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_ref_aux_internal_one(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTable_ref_aux_internal_one(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class Table_ref_aux_internal_twoContext extends Table_ref_aux_internalContext {
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Table_ref_aux_internal_twoContext(Table_ref_aux_internalContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_ref_aux_internal_two(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_ref_aux_internal_two(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTable_ref_aux_internal_two(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_ref_aux_internalContext table_ref_aux_internal() throws RecognitionException {
		Table_ref_aux_internalContext _localctx = new Table_ref_aux_internalContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_table_ref_aux_internal);
		int _la;
		try {
			setState(3152);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
			case 1:
				_localctx = new Table_ref_aux_internal_oneContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(3129);
				dml_table_expression_clause();
				setState(3132);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
				case 1:
					{
					setState(3130);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(3131);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new Table_ref_aux_internal_twoContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(3134);
				match(LEFT_PAREN);
				setState(3135);
				table_ref();
				setState(3139);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==INTERSECT || _la==MINUS || _la==UNION) {
					{
					{
					setState(3136);
					subquery_operation_part();
					}
					}
					setState(3141);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3142);
				match(RIGHT_PAREN);
				setState(3145);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,341,_ctx) ) {
				case 1:
					{
					setState(3143);
					pivot_clause();
					}
					break;
				case 2:
					{
					setState(3144);
					unpivot_clause();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new Table_ref_aux_internal_threeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(3147);
				match(ONLY);
				setState(3148);
				match(LEFT_PAREN);
				setState(3149);
				dml_table_expression_clause();
				setState(3150);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_clauseContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(PlSqlParser.JOIN, 0); }
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Query_partition_clauseContext> query_partition_clause() {
			return getRuleContexts(Query_partition_clauseContext.class);
		}
		public Query_partition_clauseContext query_partition_clause(int i) {
			return getRuleContext(Query_partition_clauseContext.class,i);
		}
		public TerminalNode INNER() { return getToken(PlSqlParser.INNER, 0); }
		public Outer_join_typeContext outer_join_type() {
			return getRuleContext(Outer_join_typeContext.class,0);
		}
		public List<Join_on_partContext> join_on_part() {
			return getRuleContexts(Join_on_partContext.class);
		}
		public Join_on_partContext join_on_part(int i) {
			return getRuleContext(Join_on_partContext.class,i);
		}
		public List<Join_using_partContext> join_using_part() {
			return getRuleContexts(Join_using_partContext.class);
		}
		public Join_using_partContext join_using_part(int i) {
			return getRuleContext(Join_using_partContext.class,i);
		}
		public TerminalNode CROSS() { return getToken(PlSqlParser.CROSS, 0); }
		public TerminalNode NATURAL() { return getToken(PlSqlParser.NATURAL, 0); }
		public Join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterJoin_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitJoin_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitJoin_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_clauseContext join_clause() throws RecognitionException {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_join_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3155);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3154);
				query_partition_clause();
				}
			}

			setState(3158);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CROSS || _la==NATURAL) {
				{
				setState(3157);
				_la = _input.LA(1);
				if ( !(_la==CROSS || _la==NATURAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3162);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INNER:
				{
				setState(3160);
				match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				{
				setState(3161);
				outer_join_type();
				}
				break;
			case JOIN:
				break;
			default:
				break;
			}
			setState(3164);
			match(JOIN);
			setState(3165);
			table_ref_aux();
			setState(3167);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				setState(3166);
				query_partition_clause();
				}
				break;
			}
			setState(3173);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,348,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(3171);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ON:
						{
						setState(3169);
						join_on_part();
						}
						break;
					case USING:
						{
						setState(3170);
						join_using_part();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(3175);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,348,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_on_partContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Join_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterJoin_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitJoin_on_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitJoin_on_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_on_partContext join_on_part() throws RecognitionException {
		Join_on_partContext _localctx = new Join_on_partContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_join_on_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3176);
			match(ON);
			setState(3177);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_using_partContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Join_using_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_using_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterJoin_using_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitJoin_using_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitJoin_using_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_using_partContext join_using_part() throws RecognitionException {
		Join_using_partContext _localctx = new Join_using_partContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_join_using_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3179);
			match(USING);
			setState(3180);
			match(LEFT_PAREN);
			setState(3181);
			column_name();
			setState(3186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3182);
				match(COMMA);
				setState(3183);
				column_name();
				}
				}
				setState(3188);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3189);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_typeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(PlSqlParser.FULL, 0); }
		public TerminalNode LEFT() { return getToken(PlSqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(PlSqlParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(PlSqlParser.OUTER, 0); }
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOuter_join_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOuter_join_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitOuter_join_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Outer_join_typeContext outer_join_type() throws RecognitionException {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_outer_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3191);
			_la = _input.LA(1);
			if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3193);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER) {
				{
				setState(3192);
				match(OUTER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_partition_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Query_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterQuery_partition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitQuery_partition_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitQuery_partition_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_partition_clauseContext query_partition_clause() throws RecognitionException {
		Query_partition_clauseContext _localctx = new Query_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_query_partition_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3195);
			match(PARTITION);
			setState(3196);
			match(BY);
			setState(3210);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
			case 1:
				{
				setState(3197);
				match(LEFT_PAREN);
				setState(3198);
				subquery();
				setState(3199);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(3201);
				expression_list();
				}
				break;
			case 3:
				{
				setState(3202);
				expression();
				setState(3207);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,351,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3203);
						match(COMMA);
						setState(3204);
						expression();
						}
						} 
					}
					setState(3209);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,351,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flashback_query_clauseContext extends ParserRuleContext {
		public TerminalNode VERSIONS() { return getToken(PlSqlParser.VERSIONS, 0); }
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SCN() { return getToken(PlSqlParser.SCN, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PlSqlParser.SNAPSHOT, 0); }
		public Flashback_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flashback_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFlashback_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFlashback_query_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitFlashback_query_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Flashback_query_clauseContext flashback_query_clause() throws RecognitionException {
		Flashback_query_clauseContext _localctx = new Flashback_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_flashback_query_clause);
		int _la;
		try {
			setState(3220);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VERSIONS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3212);
				match(VERSIONS);
				setState(3213);
				match(BETWEEN);
				setState(3214);
				_la = _input.LA(1);
				if ( !(_la==SCN || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3215);
				expression();
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				setState(3216);
				match(AS);
				setState(3217);
				match(OF);
				setState(3218);
				_la = _input.LA(1);
				if ( !(((((_la - 340)) & ~0x3f) == 0 && ((1L << (_la - 340)) & ((1L << (SCN - 340)) | (1L << (SNAPSHOT - 340)) | (1L << (TIMESTAMP - 340)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3219);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_clauseContext extends ParserRuleContext {
		public TerminalNode PIVOT() { return getToken(PlSqlParser.PIVOT, 0); }
		public List<Pivot_elementContext> pivot_element() {
			return getRuleContexts(Pivot_elementContext.class);
		}
		public Pivot_elementContext pivot_element(int i) {
			return getRuleContext(Pivot_elementContext.class,i);
		}
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Pivot_in_clauseContext pivot_in_clause() {
			return getRuleContext(Pivot_in_clauseContext.class,0);
		}
		public TerminalNode XML() { return getToken(PlSqlParser.XML, 0); }
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPivot_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitPivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_pivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3222);
			match(PIVOT);
			setState(3224);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==XML) {
				{
				setState(3223);
				match(XML);
				}
			}

			setState(3226);
			match(LEFT_PAREN);
			setState(3227);
			pivot_element();
			setState(3232);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3228);
				match(COMMA);
				setState(3229);
				pivot_element();
				}
				}
				setState(3234);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3235);
			pivot_for_clause();
			setState(3236);
			pivot_in_clause();
			setState(3237);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_elementContext extends ParserRuleContext {
		public Aggregate_function_nameContext aggregate_function_name() {
			return getRuleContext(Aggregate_function_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPivot_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPivot_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitPivot_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_elementContext pivot_element() throws RecognitionException {
		Pivot_elementContext _localctx = new Pivot_elementContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_pivot_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3239);
			aggregate_function_name();
			setState(3240);
			match(LEFT_PAREN);
			setState(3241);
			expression();
			setState(3242);
			match(RIGHT_PAREN);
			setState(3244);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3243);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_for_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Pivot_for_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPivot_for_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPivot_for_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitPivot_for_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_for_clauseContext pivot_for_clause() throws RecognitionException {
		Pivot_for_clauseContext _localctx = new Pivot_for_clauseContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_pivot_for_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3246);
			match(FOR);
			setState(3259);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3247);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3248);
				match(LEFT_PAREN);
				setState(3249);
				column_name();
				setState(3254);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3250);
					match(COMMA);
					setState(3251);
					column_name();
					}
					}
					setState(3256);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3257);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> ANY() { return getTokens(PlSqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(PlSqlParser.ANY, i);
		}
		public List<Pivot_in_clause_elementContext> pivot_in_clause_element() {
			return getRuleContexts(Pivot_in_clause_elementContext.class);
		}
		public Pivot_in_clause_elementContext pivot_in_clause_element(int i) {
			return getRuleContext(Pivot_in_clause_elementContext.class,i);
		}
		public Pivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPivot_in_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitPivot_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_in_clauseContext pivot_in_clause() throws RecognitionException {
		Pivot_in_clauseContext _localctx = new Pivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_pivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3261);
			match(IN);
			setState(3262);
			match(LEFT_PAREN);
			setState(3280);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
			case 1:
				{
				setState(3263);
				subquery();
				}
				break;
			case 2:
				{
				setState(3264);
				match(ANY);
				setState(3269);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3265);
					match(COMMA);
					setState(3266);
					match(ANY);
					}
					}
					setState(3271);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				{
				setState(3272);
				pivot_in_clause_element();
				setState(3277);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3273);
					match(COMMA);
					setState(3274);
					pivot_in_clause_element();
					}
					}
					setState(3279);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(3282);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementContext extends ParserRuleContext {
		public Pivot_in_clause_elementsContext pivot_in_clause_elements() {
			return getRuleContext(Pivot_in_clause_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_in_clause_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPivot_in_clause_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPivot_in_clause_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitPivot_in_clause_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_in_clause_elementContext pivot_in_clause_element() throws RecognitionException {
		Pivot_in_clause_elementContext _localctx = new Pivot_in_clause_elementContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_pivot_in_clause_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3284);
			pivot_in_clause_elements();
			setState(3286);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3285);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Pivot_in_clause_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPivot_in_clause_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPivot_in_clause_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitPivot_in_clause_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_in_clause_elementsContext pivot_in_clause_elements() throws RecognitionException {
		Pivot_in_clause_elementsContext _localctx = new Pivot_in_clause_elementsContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_pivot_in_clause_elements);
		try {
			setState(3290);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3288);
				expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3289);
				expression_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_clauseContext extends ParserRuleContext {
		public TerminalNode UNPIVOT() { return getToken(PlSqlParser.UNPIVOT, 0); }
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Unpivot_in_clauseContext unpivot_in_clause() {
			return getRuleContext(Unpivot_in_clauseContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode INCLUDE() { return getToken(PlSqlParser.INCLUDE, 0); }
		public TerminalNode EXCLUDE() { return getToken(PlSqlParser.EXCLUDE, 0); }
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUnpivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUnpivot_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitUnpivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_unpivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3292);
			match(UNPIVOT);
			setState(3295);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLUDE || _la==INCLUDE) {
				{
				setState(3293);
				_la = _input.LA(1);
				if ( !(_la==EXCLUDE || _la==INCLUDE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3294);
				match(NULLS);
				}
			}

			setState(3297);
			match(LEFT_PAREN);
			setState(3310);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3298);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3299);
				match(LEFT_PAREN);
				setState(3300);
				column_name();
				setState(3305);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3301);
					match(COMMA);
					setState(3302);
					column_name();
					}
					}
					setState(3307);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3308);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3312);
			pivot_for_clause();
			setState(3313);
			unpivot_in_clause();
			setState(3314);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public List<Unpivot_in_elementsContext> unpivot_in_elements() {
			return getRuleContexts(Unpivot_in_elementsContext.class);
		}
		public Unpivot_in_elementsContext unpivot_in_elements(int i) {
			return getRuleContext(Unpivot_in_elementsContext.class,i);
		}
		public Unpivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUnpivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUnpivot_in_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitUnpivot_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_in_clauseContext unpivot_in_clause() throws RecognitionException {
		Unpivot_in_clauseContext _localctx = new Unpivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_unpivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3316);
			match(IN);
			setState(3317);
			match(LEFT_PAREN);
			setState(3318);
			unpivot_in_elements();
			setState(3323);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3319);
				match(COMMA);
				setState(3320);
				unpivot_in_elements();
				}
				}
				setState(3325);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3326);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_elementsContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public Unpivot_in_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUnpivot_in_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUnpivot_in_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitUnpivot_in_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_in_elementsContext unpivot_in_elements() throws RecognitionException {
		Unpivot_in_elementsContext _localctx = new Unpivot_in_elementsContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_unpivot_in_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3340);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3328);
				column_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3329);
				match(LEFT_PAREN);
				setState(3330);
				column_name();
				setState(3335);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3331);
					match(COMMA);
					setState(3332);
					column_name();
					}
					}
					setState(3337);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3338);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3342);
				match(AS);
				setState(3355);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATE:
				case DBTIMEZONE:
				case DEFAULT:
				case FALSE:
				case INTERVAL:
				case MAXVALUE:
				case MINVALUE:
				case NULL:
				case SESSIONTIMEZONE:
				case TIMESTAMP:
				case TRUE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
					{
					setState(3343);
					constant();
					}
					break;
				case LEFT_PAREN:
					{
					setState(3344);
					match(LEFT_PAREN);
					setState(3345);
					constant();
					setState(3350);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3346);
						match(COMMA);
						setState(3347);
						constant();
						}
						}
						setState(3352);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3353);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hierarchical_query_clauseContext extends ParserRuleContext {
		public TerminalNode CONNECT() { return getToken(PlSqlParser.CONNECT, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode NOCYCLE() { return getToken(PlSqlParser.NOCYCLE, 0); }
		public Start_partContext start_part() {
			return getRuleContext(Start_partContext.class,0);
		}
		public Hierarchical_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hierarchical_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterHierarchical_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitHierarchical_query_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitHierarchical_query_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hierarchical_query_clauseContext hierarchical_query_clause() throws RecognitionException {
		Hierarchical_query_clauseContext _localctx = new Hierarchical_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_hierarchical_query_clause);
		try {
			setState(3376);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONNECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3359);
				match(CONNECT);
				setState(3360);
				match(BY);
				setState(3362);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
				case 1:
					{
					setState(3361);
					match(NOCYCLE);
					}
					break;
				}
				setState(3364);
				condition();
				setState(3366);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
				case 1:
					{
					setState(3365);
					start_part();
					}
					break;
				}
				}
				break;
			case START:
				enterOuterAlt(_localctx, 2);
				{
				setState(3368);
				start_part();
				setState(3369);
				match(CONNECT);
				setState(3370);
				match(BY);
				setState(3372);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,375,_ctx) ) {
				case 1:
					{
					setState(3371);
					match(NOCYCLE);
					}
					break;
				}
				setState(3374);
				condition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_partContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(PlSqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Start_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterStart_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitStart_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitStart_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Start_partContext start_part() throws RecognitionException {
		Start_partContext _localctx = new Start_partContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_start_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3378);
			match(START);
			setState(3379);
			match(WITH);
			setState(3380);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(PlSqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Group_by_elementsContext> group_by_elements() {
			return getRuleContexts(Group_by_elementsContext.class);
		}
		public Group_by_elementsContext group_by_elements(int i) {
			return getRuleContext(Group_by_elementsContext.class,i);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGroup_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGroup_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitGroup_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_clauseContext group_by_clause() throws RecognitionException {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_group_by_clause);
		try {
			int _alt;
			setState(3408);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GROUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3382);
				match(GROUP);
				setState(3383);
				match(BY);
				setState(3384);
				group_by_elements();
				setState(3389);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,377,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3385);
						match(COMMA);
						setState(3386);
						group_by_elements();
						}
						} 
					}
					setState(3391);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,377,_ctx);
				}
				setState(3393);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					setState(3392);
					having_clause();
					}
					break;
				}
				}
				break;
			case HAVING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3395);
				having_clause();
				setState(3406);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
				case 1:
					{
					setState(3396);
					match(GROUP);
					setState(3397);
					match(BY);
					setState(3398);
					group_by_elements();
					setState(3403);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,379,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3399);
							match(COMMA);
							setState(3400);
							group_by_elements();
							}
							} 
						}
						setState(3405);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,379,_ctx);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_elementsContext extends ParserRuleContext {
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return getRuleContext(Grouping_sets_clauseContext.class,0);
		}
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Group_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGroup_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGroup_by_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitGroup_by_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_elementsContext group_by_elements() throws RecognitionException {
		Group_by_elementsContext _localctx = new Group_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_group_by_elements);
		try {
			setState(3413);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3410);
				grouping_sets_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3411);
				rollup_cube_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3412);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollup_cube_clauseContext extends ParserRuleContext {
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public TerminalNode ROLLUP() { return getToken(PlSqlParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(PlSqlParser.CUBE, 0); }
		public Rollup_cube_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_cube_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRollup_cube_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRollup_cube_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitRollup_cube_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollup_cube_clauseContext rollup_cube_clause() throws RecognitionException {
		Rollup_cube_clauseContext _localctx = new Rollup_cube_clauseContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_rollup_cube_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3415);
			_la = _input.LA(1);
			if ( !(_la==CUBE || _la==ROLLUP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3416);
			match(LEFT_PAREN);
			setState(3417);
			grouping_sets_elements();
			setState(3422);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3418);
				match(COMMA);
				setState(3419);
				grouping_sets_elements();
				}
				}
				setState(3424);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3425);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_clauseContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(PlSqlParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(PlSqlParser.SETS, 0); }
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGrouping_sets_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGrouping_sets_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitGrouping_sets_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_sets_clauseContext grouping_sets_clause() throws RecognitionException {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_grouping_sets_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3427);
			match(GROUPING);
			setState(3428);
			match(SETS);
			setState(3429);
			match(LEFT_PAREN);
			setState(3430);
			grouping_sets_elements();
			setState(3435);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3431);
				match(COMMA);
				setState(3432);
				grouping_sets_elements();
				}
				}
				setState(3437);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3438);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_elementsContext extends ParserRuleContext {
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Grouping_sets_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGrouping_sets_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGrouping_sets_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitGrouping_sets_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_sets_elementsContext grouping_sets_elements() throws RecognitionException {
		Grouping_sets_elementsContext _localctx = new Grouping_sets_elementsContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_grouping_sets_elements);
		try {
			setState(3443);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,385,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3440);
				rollup_cube_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3441);
				expression_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3442);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(PlSqlParser.HAVING, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitHaving_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3445);
			match(HAVING);
			setState(3446);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_clauseContext extends ParserRuleContext {
		public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
		public Main_modelContext main_model() {
			return getRuleContext(Main_modelContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Return_rows_clauseContext return_rows_clause() {
			return getRuleContext(Return_rows_clauseContext.class,0);
		}
		public List<Reference_modelContext> reference_model() {
			return getRuleContexts(Reference_modelContext.class);
		}
		public Reference_modelContext reference_model(int i) {
			return getRuleContext(Reference_modelContext.class,i);
		}
		public Model_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitModel_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_clauseContext model_clause() throws RecognitionException {
		Model_clauseContext _localctx = new Model_clauseContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_model_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3448);
			match(MODEL);
			setState(3452);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3449);
				cell_reference_options();
				}
				}
				setState(3454);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(3455);
				return_rows_clause();
				}
			}

			setState(3461);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REFERENCE) {
				{
				{
				setState(3458);
				reference_model();
				}
				}
				setState(3463);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3464);
			main_model();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_reference_optionsContext extends ParserRuleContext {
		public TerminalNode NAV() { return getToken(PlSqlParser.NAV, 0); }
		public TerminalNode IGNORE() { return getToken(PlSqlParser.IGNORE, 0); }
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode DIMENSION() { return getToken(PlSqlParser.DIMENSION, 0); }
		public TerminalNode SINGLE() { return getToken(PlSqlParser.SINGLE, 0); }
		public TerminalNode REFERENCE() { return getToken(PlSqlParser.REFERENCE, 0); }
		public Cell_reference_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_reference_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCell_reference_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCell_reference_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCell_reference_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cell_reference_optionsContext cell_reference_options() throws RecognitionException {
		Cell_reference_optionsContext _localctx = new Cell_reference_optionsContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_cell_reference_options);
		int _la;
		try {
			setState(3474);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IGNORE:
			case KEEP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3466);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==KEEP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3467);
				match(NAV);
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3468);
				match(UNIQUE);
				setState(3472);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DIMENSION:
					{
					setState(3469);
					match(DIMENSION);
					}
					break;
				case SINGLE:
					{
					setState(3470);
					match(SINGLE);
					setState(3471);
					match(REFERENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_rows_clauseContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
		public TerminalNode UPDATED() { return getToken(PlSqlParser.UPDATED, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Return_rows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_rows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReturn_rows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReturn_rows_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitReturn_rows_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_rows_clauseContext return_rows_clause() throws RecognitionException {
		Return_rows_clauseContext _localctx = new Return_rows_clauseContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_return_rows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3476);
			match(RETURN);
			setState(3477);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==UPDATED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3478);
			match(ROWS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_modelContext extends ParserRuleContext {
		public TerminalNode REFERENCE() { return getToken(PlSqlParser.REFERENCE, 0); }
		public Reference_model_nameContext reference_model_name() {
			return getRuleContext(Reference_model_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Reference_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReference_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReference_model(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitReference_model(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_modelContext reference_model() throws RecognitionException {
		Reference_modelContext _localctx = new Reference_modelContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_reference_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3480);
			match(REFERENCE);
			setState(3481);
			reference_model_name();
			setState(3482);
			match(ON);
			setState(3483);
			match(LEFT_PAREN);
			setState(3484);
			subquery();
			setState(3485);
			match(RIGHT_PAREN);
			setState(3486);
			model_column_clauses();
			setState(3490);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3487);
				cell_reference_options();
				}
				}
				setState(3492);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_modelContext extends ParserRuleContext {
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public Model_rules_clauseContext model_rules_clause() {
			return getRuleContext(Model_rules_clauseContext.class,0);
		}
		public TerminalNode MAIN() { return getToken(PlSqlParser.MAIN, 0); }
		public Main_model_nameContext main_model_name() {
			return getRuleContext(Main_model_nameContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Main_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMain_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMain_model(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitMain_model(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Main_modelContext main_model() throws RecognitionException {
		Main_modelContext _localctx = new Main_modelContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_main_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3495);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAIN) {
				{
				setState(3493);
				match(MAIN);
				setState(3494);
				main_model_name();
				}
			}

			setState(3497);
			model_column_clauses();
			setState(3501);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3498);
				cell_reference_options();
				}
				}
				setState(3503);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3504);
			model_rules_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_clausesContext extends ParserRuleContext {
		public TerminalNode DIMENSION() { return getToken(PlSqlParser.DIMENSION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Model_column_listContext> model_column_list() {
			return getRuleContexts(Model_column_listContext.class);
		}
		public Model_column_listContext model_column_list(int i) {
			return getRuleContext(Model_column_listContext.class,i);
		}
		public TerminalNode MEASURES() { return getToken(PlSqlParser.MEASURES, 0); }
		public Model_column_partition_partContext model_column_partition_part() {
			return getRuleContext(Model_column_partition_partContext.class,0);
		}
		public Model_column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_column_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_column_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitModel_column_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_column_clausesContext model_column_clauses() throws RecognitionException {
		Model_column_clausesContext _localctx = new Model_column_clausesContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_model_column_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3507);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3506);
				model_column_partition_part();
				}
			}

			setState(3509);
			match(DIMENSION);
			setState(3510);
			match(BY);
			setState(3511);
			model_column_list();
			setState(3512);
			match(MEASURES);
			setState(3513);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_partition_partContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public Model_column_listContext model_column_list() {
			return getRuleContext(Model_column_listContext.class,0);
		}
		public Model_column_partition_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_partition_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_column_partition_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_column_partition_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitModel_column_partition_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_column_partition_partContext model_column_partition_part() throws RecognitionException {
		Model_column_partition_partContext _localctx = new Model_column_partition_partContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_model_column_partition_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3515);
			match(PARTITION);
			setState(3516);
			match(BY);
			setState(3517);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_listContext extends ParserRuleContext {
		public List<Model_columnContext> model_column() {
			return getRuleContexts(Model_columnContext.class);
		}
		public Model_columnContext model_column(int i) {
			return getRuleContext(Model_columnContext.class,i);
		}
		public Model_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitModel_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_column_listContext model_column_list() throws RecognitionException {
		Model_column_listContext _localctx = new Model_column_listContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_model_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3519);
			match(LEFT_PAREN);
			setState(3520);
			model_column();
			setState(3525);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3521);
				match(COMMA);
				setState(3522);
				model_column();
				}
				}
				setState(3527);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3528);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_columnContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Query_blockContext query_block() {
			return getRuleContext(Query_blockContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Model_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitModel_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_columnContext model_column() throws RecognitionException {
		Model_columnContext _localctx = new Model_columnContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_model_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3532);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3530);
				expression();
				}
				break;
			case SELECT:
				{
				setState(3531);
				query_block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3535);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3534);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_clauseContext extends ParserRuleContext {
		public Model_rules_partContext model_rules_part() {
			return getRuleContext(Model_rules_partContext.class,0);
		}
		public List<Model_rules_elementContext> model_rules_element() {
			return getRuleContexts(Model_rules_elementContext.class);
		}
		public Model_rules_elementContext model_rules_element(int i) {
			return getRuleContext(Model_rules_elementContext.class,i);
		}
		public Model_rules_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_rules_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_rules_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitModel_rules_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_rules_clauseContext model_rules_clause() throws RecognitionException {
		Model_rules_clauseContext _localctx = new Model_rules_clauseContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_model_rules_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3538);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RULES) {
				{
				setState(3537);
				model_rules_part();
				}
			}

			setState(3540);
			match(LEFT_PAREN);
			setState(3549);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COALESCE) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONNECT_BY_ROOT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DISTINCT - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULL - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NUMERIC - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (PRIOR - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT - 321)) | (1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)) | (1L << (SUBMULTISET - 321)) | (1L << (SUBPARTITION - 321)) | (1L << (SUBSTITUTABLE - 321)) | (1L << (SUBTYPE - 321)) | (1L << (SUCCESS - 321)) | (1L << (SUSPEND - 321)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUE - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATE - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (DECODE - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (NVL - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROUND - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TO_CHAR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (LEAST - 453)) | (1L << (GREATEST - 453)) | (1L << (TO_DATE - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (UNSIGNED_INTEGER - 453)) | (1L << (APPROXIMATE_NUM_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (LEFT_PAREN - 453)) | (1L << (PLUS_SIGN - 453)) | (1L << (MINUS_SIGN - 453)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (BINDVAR - 519)) | (1L << (COLON - 519)) | (1L << (INTRODUCER - 519)) | (1L << (REGULAR_ID - 519)))) != 0)) {
				{
				setState(3541);
				model_rules_element();
				setState(3546);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3542);
					match(COMMA);
					setState(3543);
					model_rules_element();
					}
					}
					setState(3548);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3551);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_partContext extends ParserRuleContext {
		public TerminalNode RULES() { return getToken(PlSqlParser.RULES, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(PlSqlParser.UPSERT, 0); }
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public Model_iterate_clauseContext model_iterate_clause() {
			return getRuleContext(Model_iterate_clauseContext.class,0);
		}
		public TerminalNode AUTOMATIC() { return getToken(PlSqlParser.AUTOMATIC, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(PlSqlParser.SEQUENTIAL, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Model_rules_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_rules_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_rules_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitModel_rules_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_rules_partContext model_rules_part() throws RecognitionException {
		Model_rules_partContext _localctx = new Model_rules_partContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_model_rules_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3553);
			match(RULES);
			setState(3559);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				{
				setState(3554);
				match(UPDATE);
				}
				break;
			case UPSERT:
				{
				setState(3555);
				match(UPSERT);
				setState(3557);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(3556);
					match(ALL);
					}
				}

				}
				break;
			case AUTOMATIC:
			case ITERATE:
			case SEQUENTIAL:
			case LEFT_PAREN:
				break;
			default:
				break;
			}
			setState(3563);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOMATIC || _la==SEQUENTIAL) {
				{
				setState(3561);
				_la = _input.LA(1);
				if ( !(_la==AUTOMATIC || _la==SEQUENTIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3562);
				match(ORDER);
				}
			}

			setState(3566);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ITERATE) {
				{
				setState(3565);
				model_iterate_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_elementContext extends ParserRuleContext {
		public Cell_assignmentContext cell_assignment() {
			return getRuleContext(Cell_assignmentContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(PlSqlParser.UPSERT, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Model_rules_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_rules_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_rules_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitModel_rules_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_rules_elementContext model_rules_element() throws RecognitionException {
		Model_rules_elementContext _localctx = new Model_rules_elementContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_model_rules_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3573);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				setState(3568);
				match(UPDATE);
				}
				break;
			case 2:
				{
				setState(3569);
				match(UPSERT);
				setState(3571);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,405,_ctx) ) {
				case 1:
					{
					setState(3570);
					match(ALL);
					}
					break;
				}
				}
				break;
			}
			setState(3575);
			cell_assignment();
			setState(3577);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3576);
				order_by_clause();
				}
			}

			setState(3579);
			match(EQUALS_OP);
			setState(3580);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_assignmentContext extends ParserRuleContext {
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public Cell_assignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_assignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCell_assignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCell_assignment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCell_assignment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cell_assignmentContext cell_assignment() throws RecognitionException {
		Cell_assignmentContext _localctx = new Cell_assignmentContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_cell_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3582);
			model_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_iterate_clauseContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(PlSqlParser.ITERATE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Until_partContext until_part() {
			return getRuleContext(Until_partContext.class,0);
		}
		public Model_iterate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_iterate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_iterate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_iterate_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitModel_iterate_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_iterate_clauseContext model_iterate_clause() throws RecognitionException {
		Model_iterate_clauseContext _localctx = new Model_iterate_clauseContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_model_iterate_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3584);
			match(ITERATE);
			setState(3585);
			match(LEFT_PAREN);
			setState(3586);
			expression();
			setState(3587);
			match(RIGHT_PAREN);
			setState(3589);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(3588);
				until_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Until_partContext extends ParserRuleContext {
		public TerminalNode UNTIL() { return getToken(PlSqlParser.UNTIL, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Until_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_until_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUntil_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUntil_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitUntil_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Until_partContext until_part() throws RecognitionException {
		Until_partContext _localctx = new Until_partContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_until_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3591);
			match(UNTIL);
			setState(3592);
			match(LEFT_PAREN);
			setState(3593);
			condition();
			setState(3594);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public List<Order_by_elementsContext> order_by_elements() {
			return getRuleContexts(Order_by_elementsContext.class);
		}
		public Order_by_elementsContext order_by_elements(int i) {
			return getRuleContext(Order_by_elementsContext.class,i);
		}
		public TerminalNode SIBLINGS() { return getToken(PlSqlParser.SIBLINGS, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOrder_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitOrder_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_order_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3596);
			match(ORDER);
			setState(3598);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIBLINGS) {
				{
				setState(3597);
				match(SIBLINGS);
				}
			}

			setState(3600);
			match(BY);
			setState(3601);
			order_by_elements();
			setState(3606);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3602);
				match(COMMA);
				setState(3603);
				order_by_elements();
				}
				}
				setState(3608);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode ASC() { return getToken(PlSqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(PlSqlParser.DESC, 0); }
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
		public Order_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOrder_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOrder_by_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitOrder_by_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_elementsContext order_by_elements() throws RecognitionException {
		Order_by_elementsContext _localctx = new Order_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_order_by_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3609);
			expression();
			setState(3611);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(3610);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3615);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(3613);
				match(NULLS);
				setState(3614);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public For_update_of_partContext for_update_of_part() {
			return getRuleContext(For_update_of_partContext.class,0);
		}
		public For_update_optionsContext for_update_options() {
			return getRuleContext(For_update_optionsContext.class,0);
		}
		public For_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFor_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFor_update_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitFor_update_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_update_clauseContext for_update_clause() throws RecognitionException {
		For_update_clauseContext _localctx = new For_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_for_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3617);
			match(FOR);
			setState(3618);
			match(UPDATE);
			setState(3620);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(3619);
				for_update_of_part();
				}
			}

			setState(3623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==SKIP_ || _la==WAIT) {
				{
				setState(3622);
				for_update_options();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_of_partContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public For_update_of_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_of_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFor_update_of_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFor_update_of_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitFor_update_of_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_update_of_partContext for_update_of_part() throws RecognitionException {
		For_update_of_partContext _localctx = new For_update_of_partContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_for_update_of_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3625);
			match(OF);
			setState(3626);
			column_name();
			setState(3631);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3627);
				match(COMMA);
				setState(3628);
				column_name();
				}
				}
				setState(3633);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_optionsContext extends ParserRuleContext {
		public TerminalNode SKIP_() { return getToken(PlSqlParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(PlSqlParser.LOCKED, 0); }
		public TerminalNode NOWAIT() { return getToken(PlSqlParser.NOWAIT, 0); }
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_update_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFor_update_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFor_update_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitFor_update_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_update_optionsContext for_update_options() throws RecognitionException {
		For_update_optionsContext _localctx = new For_update_optionsContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_for_update_options);
		try {
			setState(3639);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SKIP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3634);
				match(SKIP_);
				setState(3635);
				match(LOCKED);
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3636);
				match(NOWAIT);
				}
				break;
			case WAIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3637);
				match(WAIT);
				setState(3638);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public Update_set_clauseContext update_set_clause() {
			return getRuleContext(Update_set_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUpdate_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitUpdate_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3641);
			match(UPDATE);
			setState(3642);
			general_table_ref();
			setState(3643);
			update_set_clause();
			setState(3645);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3644);
				where_clause();
				}
			}

			setState(3648);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN || _la==RETURNING) {
				{
				setState(3647);
				static_returning_clause();
				}
			}

			setState(3651);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3650);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_set_clauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public List<Column_based_update_set_clauseContext> column_based_update_set_clause() {
			return getRuleContexts(Column_based_update_set_clauseContext.class);
		}
		public Column_based_update_set_clauseContext column_based_update_set_clause(int i) {
			return getRuleContext(Column_based_update_set_clauseContext.class,i);
		}
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUpdate_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUpdate_set_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitUpdate_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_set_clauseContext update_set_clause() throws RecognitionException {
		Update_set_clauseContext _localctx = new Update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_update_set_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3653);
			match(SET);
			setState(3669);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
			case 1:
				{
				setState(3654);
				column_based_update_set_clause();
				setState(3659);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3655);
					match(COMMA);
					setState(3656);
					column_based_update_set_clause();
					}
					}
					setState(3661);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(3662);
				match(VALUE);
				setState(3663);
				match(LEFT_PAREN);
				setState(3664);
				identifier();
				setState(3665);
				match(RIGHT_PAREN);
				setState(3666);
				match(EQUALS_OP);
				setState(3667);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_based_update_set_clauseContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Column_based_update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_based_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterColumn_based_update_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitColumn_based_update_set_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitColumn_based_update_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_based_update_set_clauseContext column_based_update_set_clause() throws RecognitionException {
		Column_based_update_set_clauseContext _localctx = new Column_based_update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_column_based_update_set_clause);
		int _la;
		try {
			setState(3688);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3671);
				column_name();
				setState(3672);
				match(EQUALS_OP);
				setState(3673);
				expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3675);
				match(LEFT_PAREN);
				setState(3676);
				column_name();
				setState(3681);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3677);
					match(COMMA);
					setState(3678);
					column_name();
					}
					}
					setState(3683);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3684);
				match(RIGHT_PAREN);
				setState(3685);
				match(EQUALS_OP);
				setState(3686);
				subquery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDelete_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitDelete_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3690);
			match(DELETE);
			setState(3692);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3691);
				match(FROM);
				}
			}

			setState(3694);
			general_table_ref();
			setState(3696);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3695);
				where_clause();
				}
			}

			setState(3699);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN || _la==RETURNING) {
				{
				setState(3698);
				static_returning_clause();
				}
			}

			setState(3702);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3701);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public Single_table_insertContext single_table_insert() {
			return getRuleContext(Single_table_insertContext.class,0);
		}
		public Multi_table_insertContext multi_table_insert() {
			return getRuleContext(Multi_table_insertContext.class,0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitInsert_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitInsert_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_insert_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3704);
			match(INSERT);
			setState(3707);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(3705);
				single_table_insert();
				}
				break;
			case ALL:
			case FIRST:
			case WHEN:
				{
				setState(3706);
				multi_table_insert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_table_insertContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Single_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSingle_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSingle_table_insert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSingle_table_insert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Single_table_insertContext single_table_insert() throws RecognitionException {
		Single_table_insertContext _localctx = new Single_table_insertContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_single_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3709);
			insert_into_clause();
			setState(3715);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(3710);
				values_clause();
				setState(3712);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURN || _la==RETURNING) {
					{
					setState(3711);
					static_returning_clause();
					}
				}

				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(3714);
				select_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3717);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_insertContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Conditional_insert_clauseContext conditional_insert_clause() {
			return getRuleContext(Conditional_insert_clauseContext.class,0);
		}
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Multi_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMulti_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMulti_table_insert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitMulti_table_insert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multi_table_insertContext multi_table_insert() throws RecognitionException {
		Multi_table_insertContext _localctx = new Multi_table_insertContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_multi_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3727);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
			case 1:
				{
				setState(3720);
				match(ALL);
				setState(3722); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3721);
					multi_table_element();
					}
					}
					setState(3724); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==INTO );
				}
				break;
			case 2:
				{
				setState(3726);
				conditional_insert_clause();
				}
				break;
			}
			setState(3729);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_elementContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Multi_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMulti_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMulti_table_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitMulti_table_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multi_table_elementContext multi_table_element() throws RecognitionException {
		Multi_table_elementContext _localctx = new Multi_table_elementContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_multi_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3731);
			insert_into_clause();
			setState(3733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VALUES) {
				{
				setState(3732);
				values_clause();
				}
			}

			setState(3736);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3735);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_clauseContext extends ParserRuleContext {
		public List<Conditional_insert_when_partContext> conditional_insert_when_part() {
			return getRuleContexts(Conditional_insert_when_partContext.class);
		}
		public Conditional_insert_when_partContext conditional_insert_when_part(int i) {
			return getRuleContext(Conditional_insert_when_partContext.class,i);
		}
		public Conditional_insert_else_partContext conditional_insert_else_part() {
			return getRuleContext(Conditional_insert_else_partContext.class,0);
		}
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public Conditional_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConditional_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConditional_insert_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitConditional_insert_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_insert_clauseContext conditional_insert_clause() throws RecognitionException {
		Conditional_insert_clauseContext _localctx = new Conditional_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_conditional_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3739);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==FIRST) {
				{
				setState(3738);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==FIRST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3742); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3741);
				conditional_insert_when_part();
				}
				}
				setState(3744); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(3747);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(3746);
				conditional_insert_else_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConditional_insert_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConditional_insert_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitConditional_insert_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_insert_when_partContext conditional_insert_when_part() throws RecognitionException {
		Conditional_insert_when_partContext _localctx = new Conditional_insert_when_partContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_conditional_insert_when_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3749);
			match(WHEN);
			setState(3750);
			condition();
			setState(3751);
			match(THEN);
			setState(3753); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3752);
				multi_table_element();
				}
				}
				setState(3755); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConditional_insert_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConditional_insert_else_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitConditional_insert_else_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_insert_else_partContext conditional_insert_else_part() throws RecognitionException {
		Conditional_insert_else_partContext _localctx = new Conditional_insert_else_partContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_conditional_insert_else_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3757);
			match(ELSE);
			setState(3759); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3758);
				multi_table_element();
				}
				}
				setState(3761); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Insert_into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterInsert_into_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitInsert_into_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitInsert_into_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_into_clauseContext insert_into_clause() throws RecognitionException {
		Insert_into_clauseContext _localctx = new Insert_into_clauseContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_insert_into_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3763);
			match(INTO);
			setState(3764);
			general_table_ref();
			setState(3776);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,442,_ctx) ) {
			case 1:
				{
				setState(3765);
				match(LEFT_PAREN);
				setState(3766);
				column_name();
				setState(3771);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3767);
					match(COMMA);
					setState(3768);
					column_name();
					}
					}
					setState(3773);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3774);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterValues_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitValues_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitValues_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_values_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3778);
			match(VALUES);
			setState(3779);
			expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(PlSqlParser.MERGE, 0); }
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public Selected_tableviewContext selected_tableview() {
			return getRuleContext(Selected_tableviewContext.class,0);
		}
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Merge_update_clauseContext merge_update_clause() {
			return getRuleContext(Merge_update_clauseContext.class,0);
		}
		public Merge_insert_clauseContext merge_insert_clause() {
			return getRuleContext(Merge_insert_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMerge_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitMerge_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3781);
			match(MERGE);
			setState(3782);
			match(INTO);
			setState(3783);
			tableview_name();
			setState(3785);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3784);
				table_alias();
				}
			}

			setState(3787);
			match(USING);
			setState(3788);
			selected_tableview();
			setState(3789);
			match(ON);
			setState(3790);
			match(LEFT_PAREN);
			setState(3791);
			condition();
			setState(3792);
			match(RIGHT_PAREN);
			setState(3801);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
			case 1:
				{
				setState(3793);
				merge_update_clause();
				setState(3795);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(3794);
					merge_insert_clause();
					}
				}

				}
				break;
			case 2:
				{
				setState(3797);
				merge_insert_clause();
				setState(3799);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(3798);
					merge_update_clause();
					}
				}

				}
				break;
			}
			setState(3804);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3803);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(PlSqlParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public List<Merge_elementContext> merge_element() {
			return getRuleContexts(Merge_elementContext.class);
		}
		public Merge_elementContext merge_element(int i) {
			return getRuleContext(Merge_elementContext.class,i);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext merge_update_delete_part() {
			return getRuleContext(Merge_update_delete_partContext.class,0);
		}
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMerge_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMerge_update_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitMerge_update_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_update_clauseContext merge_update_clause() throws RecognitionException {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_merge_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3806);
			match(WHEN);
			setState(3807);
			match(MATCHED);
			setState(3808);
			match(THEN);
			setState(3809);
			match(UPDATE);
			setState(3810);
			match(SET);
			setState(3811);
			merge_element();
			setState(3816);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3812);
				match(COMMA);
				setState(3813);
				merge_element();
				}
				}
				setState(3818);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3820);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3819);
				where_clause();
				}
			}

			setState(3823);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
			case 1:
				{
				setState(3822);
				merge_update_delete_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_elementContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Merge_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMerge_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMerge_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitMerge_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_elementContext merge_element() throws RecognitionException {
		Merge_elementContext _localctx = new Merge_elementContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_merge_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3825);
			column_name();
			setState(3826);
			match(EQUALS_OP);
			setState(3827);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_delete_partContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(PlSqlParser.DELETE, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_delete_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMerge_update_delete_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMerge_update_delete_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitMerge_update_delete_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_update_delete_partContext merge_update_delete_part() throws RecognitionException {
		Merge_update_delete_partContext _localctx = new Merge_update_delete_partContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_merge_update_delete_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3829);
			match(DELETE);
			setState(3830);
			where_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_insert_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public TerminalNode MATCHED() { return getToken(PlSqlParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public TerminalNode INSERT() { return getToken(PlSqlParser.INSERT, 0); }
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMerge_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMerge_insert_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitMerge_insert_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_insert_clauseContext merge_insert_clause() throws RecognitionException {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_merge_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3832);
			match(WHEN);
			setState(3833);
			match(NOT);
			setState(3834);
			match(MATCHED);
			setState(3835);
			match(THEN);
			setState(3836);
			match(INSERT);
			setState(3848);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3837);
				match(LEFT_PAREN);
				setState(3838);
				column_name();
				setState(3843);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3839);
					match(COMMA);
					setState(3840);
					column_name();
					}
					}
					setState(3845);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3846);
				match(RIGHT_PAREN);
				}
			}

			setState(3850);
			match(VALUES);
			setState(3851);
			expression_list();
			setState(3853);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3852);
				where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_tableviewContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Selected_tableviewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_tableview; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSelected_tableview(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSelected_tableview(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSelected_tableview(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Selected_tableviewContext selected_tableview() throws RecognitionException {
		Selected_tableviewContext _localctx = new Selected_tableviewContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_selected_tableview);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3860);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3855);
				tableview_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3856);
				match(LEFT_PAREN);
				setState(3857);
				select_statement();
				setState(3858);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3863);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(3862);
				table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_statementContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(PlSqlParser.LOCK, 0); }
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public List<Lock_table_elementContext> lock_table_element() {
			return getRuleContexts(Lock_table_elementContext.class);
		}
		public Lock_table_elementContext lock_table_element(int i) {
			return getRuleContext(Lock_table_elementContext.class,i);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Lock_modeContext lock_mode() {
			return getRuleContext(Lock_modeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(PlSqlParser.MODE, 0); }
		public Wait_nowait_partContext wait_nowait_part() {
			return getRuleContext(Wait_nowait_partContext.class,0);
		}
		public Lock_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLock_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLock_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitLock_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_table_statementContext lock_table_statement() throws RecognitionException {
		Lock_table_statementContext _localctx = new Lock_table_statementContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_lock_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3865);
			match(LOCK);
			setState(3866);
			match(TABLE);
			setState(3867);
			lock_table_element();
			setState(3872);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3868);
				match(COMMA);
				setState(3869);
				lock_table_element();
				}
				}
				setState(3874);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3875);
			match(IN);
			setState(3876);
			lock_mode();
			setState(3877);
			match(MODE);
			setState(3879);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(3878);
				wait_nowait_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Wait_nowait_partContext extends ParserRuleContext {
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(PlSqlParser.NOWAIT, 0); }
		public Wait_nowait_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wait_nowait_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWait_nowait_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWait_nowait_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitWait_nowait_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Wait_nowait_partContext wait_nowait_part() throws RecognitionException {
		Wait_nowait_partContext _localctx = new Wait_nowait_partContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_wait_nowait_part);
		try {
			setState(3884);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3881);
				match(WAIT);
				setState(3882);
				expression();
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3883);
				match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_elementContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Lock_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLock_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLock_table_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitLock_table_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_table_elementContext lock_table_element() throws RecognitionException {
		Lock_table_elementContext _localctx = new Lock_table_elementContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_lock_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3886);
			tableview_name();
			setState(3888);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION || _la==SUBPARTITION) {
				{
				setState(3887);
				partition_extension_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_modeContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public TerminalNode SHARE() { return getToken(PlSqlParser.SHARE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(PlSqlParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(PlSqlParser.UPDATE, 0); }
		public Lock_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLock_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLock_mode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitLock_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_modeContext lock_mode() throws RecognitionException {
		Lock_modeContext _localctx = new Lock_modeContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_lock_mode);
		int _la;
		try {
			setState(3902);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3890);
				match(ROW);
				setState(3891);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3892);
				match(ROW);
				setState(3893);
				match(EXCLUSIVE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3894);
				match(SHARE);
				setState(3896);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UPDATE) {
					{
					setState(3895);
					match(UPDATE);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3898);
				match(SHARE);
				setState(3899);
				match(ROW);
				setState(3900);
				match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3901);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_table_refContext extends ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public General_table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGeneral_table_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGeneral_table_ref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitGeneral_table_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_table_refContext general_table_ref() throws RecognitionException {
		General_table_refContext _localctx = new General_table_refContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_general_table_ref);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3910);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
			case 1:
				{
				setState(3904);
				dml_table_expression_clause();
				}
				break;
			case 2:
				{
				setState(3905);
				match(ONLY);
				setState(3906);
				match(LEFT_PAREN);
				setState(3907);
				dml_table_expression_clause();
				setState(3908);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3913);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
			case 1:
				{
				setState(3912);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Static_returning_clauseContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public Static_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_static_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterStatic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitStatic_returning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitStatic_returning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Static_returning_clauseContext static_returning_clause() throws RecognitionException {
		Static_returning_clauseContext _localctx = new Static_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_static_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3915);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3916);
			expression();
			setState(3921);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3917);
				match(COMMA);
				setState(3918);
				expression();
				}
				}
				setState(3923);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3924);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_clauseContext extends ParserRuleContext {
		public TerminalNode LOG() { return getToken(PlSqlParser.LOG, 0); }
		public TerminalNode ERRORS() { return getToken(PlSqlParser.ERRORS, 0); }
		public Error_logging_into_partContext error_logging_into_part() {
			return getRuleContext(Error_logging_into_partContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Error_logging_reject_partContext error_logging_reject_part() {
			return getRuleContext(Error_logging_reject_partContext.class,0);
		}
		public Error_logging_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterError_logging_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitError_logging_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitError_logging_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Error_logging_clauseContext error_logging_clause() throws RecognitionException {
		Error_logging_clauseContext _localctx = new Error_logging_clauseContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_error_logging_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3926);
			match(LOG);
			setState(3927);
			match(ERRORS);
			setState(3929);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
			case 1:
				{
				setState(3928);
				error_logging_into_part();
				}
				break;
			}
			setState(3932);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
			case 1:
				{
				setState(3931);
				expression();
				}
				break;
			}
			setState(3935);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REJECT) {
				{
				setState(3934);
				error_logging_reject_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_into_partContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Error_logging_into_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_into_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterError_logging_into_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitError_logging_into_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitError_logging_into_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Error_logging_into_partContext error_logging_into_part() throws RecognitionException {
		Error_logging_into_partContext _localctx = new Error_logging_into_partContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_error_logging_into_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3937);
			match(INTO);
			setState(3938);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_reject_partContext extends ParserRuleContext {
		public TerminalNode REJECT() { return getToken(PlSqlParser.REJECT, 0); }
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public TerminalNode UNLIMITED() { return getToken(PlSqlParser.UNLIMITED, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Error_logging_reject_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_reject_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterError_logging_reject_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitError_logging_reject_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitError_logging_reject_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Error_logging_reject_partContext error_logging_reject_part() throws RecognitionException {
		Error_logging_reject_partContext _localctx = new Error_logging_reject_partContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_error_logging_reject_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3940);
			match(REJECT);
			setState(3941);
			match(LIMIT);
			setState(3944);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
			case 1:
				{
				setState(3942);
				match(UNLIMITED);
				}
				break;
			case 2:
				{
				setState(3943);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_table_expression_clauseContext extends ParserRuleContext {
		public Table_collection_expressionContext table_collection_expression() {
			return getRuleContext(Table_collection_expressionContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return getRuleContext(Subquery_restriction_clauseContext.class,0);
		}
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Sample_clauseContext sample_clause() {
			return getRuleContext(Sample_clauseContext.class,0);
		}
		public Dml_table_expression_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_table_expression_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDml_table_expression_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDml_table_expression_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitDml_table_expression_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_table_expression_clauseContext dml_table_expression_clause() throws RecognitionException {
		Dml_table_expression_clauseContext _localctx = new Dml_table_expression_clauseContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_dml_table_expression_clause);
		int _la;
		try {
			setState(3958);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
			case THE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3946);
				table_collection_expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3947);
				match(LEFT_PAREN);
				setState(3948);
				select_statement();
				setState(3950);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3949);
					subquery_restriction_clause();
					}
				}

				setState(3952);
				match(RIGHT_PAREN);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(3954);
				tableview_name();
				setState(3956);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
				case 1:
					{
					setState(3955);
					sample_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_collection_expressionContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(PlSqlParser.TABLE, 0); }
		public TerminalNode THE() { return getToken(PlSqlParser.THE, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Table_collection_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_collection_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_collection_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_collection_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTable_collection_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_collection_expressionContext table_collection_expression() throws RecognitionException {
		Table_collection_expressionContext _localctx = new Table_collection_expressionContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_table_collection_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3960);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==THE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3973);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
			case 1:
				{
				setState(3961);
				match(LEFT_PAREN);
				setState(3962);
				subquery();
				setState(3963);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(3965);
				match(LEFT_PAREN);
				setState(3966);
				expression();
				setState(3967);
				match(RIGHT_PAREN);
				setState(3971);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
				case 1:
					{
					setState(3968);
					match(LEFT_PAREN);
					setState(3969);
					match(PLUS_SIGN);
					setState(3970);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_restriction_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public TerminalNode CHECK() { return getToken(PlSqlParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(PlSqlParser.OPTION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Subquery_restriction_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_restriction_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSubquery_restriction_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSubquery_restriction_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSubquery_restriction_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_restriction_clauseContext subquery_restriction_clause() throws RecognitionException {
		Subquery_restriction_clauseContext _localctx = new Subquery_restriction_clauseContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_subquery_restriction_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3975);
			match(WITH);
			setState(3984);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(3976);
				match(READ);
				setState(3977);
				match(ONLY);
				}
				break;
			case CHECK:
				{
				setState(3978);
				match(CHECK);
				setState(3979);
				match(OPTION);
				setState(3982);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(3980);
					match(CONSTRAINT);
					setState(3981);
					constraint_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sample_clauseContext extends ParserRuleContext {
		public TerminalNode SAMPLE() { return getToken(PlSqlParser.SAMPLE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode BLOCK() { return getToken(PlSqlParser.BLOCK, 0); }
		public Seed_partContext seed_part() {
			return getRuleContext(Seed_partContext.class,0);
		}
		public Sample_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSample_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSample_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSample_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sample_clauseContext sample_clause() throws RecognitionException {
		Sample_clauseContext _localctx = new Sample_clauseContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_sample_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3986);
			match(SAMPLE);
			setState(3988);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BLOCK) {
				{
				setState(3987);
				match(BLOCK);
				}
			}

			setState(3990);
			match(LEFT_PAREN);
			setState(3991);
			expression();
			setState(3994);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3992);
				match(COMMA);
				setState(3993);
				expression();
				}
			}

			setState(3996);
			match(RIGHT_PAREN);
			setState(3998);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
			case 1:
				{
				setState(3997);
				seed_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seed_partContext extends ParserRuleContext {
		public TerminalNode SEED() { return getToken(PlSqlParser.SEED, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Seed_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seed_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSeed_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSeed_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSeed_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Seed_partContext seed_part() throws RecognitionException {
		Seed_partContext _localctx = new Seed_partContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_seed_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4000);
			match(SEED);
			setState(4001);
			match(LEFT_PAREN);
			setState(4002);
			expression();
			setState(4003);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_expressionContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Cursor_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCursor_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCursor_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCursor_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_expressionContext cursor_expression() throws RecognitionException {
		Cursor_expressionContext _localctx = new Cursor_expressionContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_cursor_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4005);
			match(CURSOR);
			setState(4006);
			match(LEFT_PAREN);
			setState(4007);
			subquery();
			setState(4008);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_listContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterExpression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitExpression_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitExpression_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4010);
			match(LEFT_PAREN);
			setState(4012);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COALESCE) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONNECT_BY_ROOT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DISTINCT - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NOT - 193)) | (1L << (NULL - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NUMERIC - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (PRIOR - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT - 321)) | (1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)) | (1L << (SUBMULTISET - 321)) | (1L << (SUBPARTITION - 321)) | (1L << (SUBSTITUTABLE - 321)) | (1L << (SUBTYPE - 321)) | (1L << (SUCCESS - 321)) | (1L << (SUSPEND - 321)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUE - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (DECODE - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (NVL - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROUND - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TO_CHAR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (LEAST - 453)) | (1L << (GREATEST - 453)) | (1L << (TO_DATE - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (UNSIGNED_INTEGER - 453)) | (1L << (APPROXIMATE_NUM_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (LEFT_PAREN - 453)) | (1L << (PLUS_SIGN - 453)) | (1L << (MINUS_SIGN - 453)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (BINDVAR - 519)) | (1L << (COLON - 519)) | (1L << (INTRODUCER - 519)) | (1L << (REGULAR_ID - 519)))) != 0)) {
				{
				setState(4011);
				expression();
				}
			}

			setState(4018);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4014);
				match(COMMA);
				setState(4015);
				expression();
				}
				}
				setState(4020);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4021);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionContext condition() throws RecognitionException {
		ConditionContext _localctx = new ConditionContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4023);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public Cursor_expressionContext cursor_expression() {
			return getRuleContext(Cursor_expressionContext.class,0);
		}
		public Logical_or_expressionContext logical_or_expression() {
			return getRuleContext(Logical_or_expressionContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_expression);
		try {
			setState(4027);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4025);
				cursor_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4026);
				logical_or_expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logical_or_expressionContext extends ParserRuleContext {
		public Logical_and_expressionContext logical_and_expression() {
			return getRuleContext(Logical_and_expressionContext.class,0);
		}
		public Logical_or_expressionContext logical_or_expression() {
			return getRuleContext(Logical_or_expressionContext.class,0);
		}
		public TerminalNode OR() { return getToken(PlSqlParser.OR, 0); }
		public Logical_or_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logical_or_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLogical_or_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLogical_or_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitLogical_or_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Logical_or_expressionContext logical_or_expression() throws RecognitionException {
		return logical_or_expression(0);
	}

	private Logical_or_expressionContext logical_or_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Logical_or_expressionContext _localctx = new Logical_or_expressionContext(_ctx, _parentState);
		Logical_or_expressionContext _prevctx = _localctx;
		int _startState = 524;
		enterRecursionRule(_localctx, 524, RULE_logical_or_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4030);
			logical_and_expression(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(4037);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,482,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_or_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_logical_or_expression);
					setState(4032);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4033);
					match(OR);
					setState(4034);
					logical_and_expression(0);
					}
					} 
				}
				setState(4039);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,482,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Logical_and_expressionContext extends ParserRuleContext {
		public Negated_expressionContext negated_expression() {
			return getRuleContext(Negated_expressionContext.class,0);
		}
		public Logical_and_expressionContext logical_and_expression() {
			return getRuleContext(Logical_and_expressionContext.class,0);
		}
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public Logical_and_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logical_and_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLogical_and_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLogical_and_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitLogical_and_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Logical_and_expressionContext logical_and_expression() throws RecognitionException {
		return logical_and_expression(0);
	}

	private Logical_and_expressionContext logical_and_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Logical_and_expressionContext _localctx = new Logical_and_expressionContext(_ctx, _parentState);
		Logical_and_expressionContext _prevctx = _localctx;
		int _startState = 526;
		enterRecursionRule(_localctx, 526, RULE_logical_and_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4041);
			negated_expression();
			}
			_ctx.stop = _input.LT(-1);
			setState(4048);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,483,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_and_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_logical_and_expression);
					setState(4043);
					if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
					setState(4044);
					match(AND);
					setState(4045);
					negated_expression();
					}
					} 
				}
				setState(4050);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,483,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Negated_expressionContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public Negated_expressionContext negated_expression() {
			return getRuleContext(Negated_expressionContext.class,0);
		}
		public Equality_expressionContext equality_expression() {
			return getRuleContext(Equality_expressionContext.class,0);
		}
		public Negated_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_negated_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNegated_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNegated_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitNegated_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Negated_expressionContext negated_expression() throws RecognitionException {
		Negated_expressionContext _localctx = new Negated_expressionContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_negated_expression);
		try {
			setState(4054);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4051);
				match(NOT);
				setState(4052);
				negated_expression();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(4053);
				equality_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Equality_expressionContext extends ParserRuleContext {
		public Multiset_expressionContext multiset_expression() {
			return getRuleContext(Multiset_expressionContext.class,0);
		}
		public List<TerminalNode> IS() { return getTokens(PlSqlParser.IS); }
		public TerminalNode IS(int i) {
			return getToken(PlSqlParser.IS, i);
		}
		public List<TerminalNode> NULL() { return getTokens(PlSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PlSqlParser.NULL, i);
		}
		public List<TerminalNode> NAN() { return getTokens(PlSqlParser.NAN); }
		public TerminalNode NAN(int i) {
			return getToken(PlSqlParser.NAN, i);
		}
		public List<TerminalNode> PRESENT() { return getTokens(PlSqlParser.PRESENT); }
		public TerminalNode PRESENT(int i) {
			return getToken(PlSqlParser.PRESENT, i);
		}
		public List<TerminalNode> INFINITE() { return getTokens(PlSqlParser.INFINITE); }
		public TerminalNode INFINITE(int i) {
			return getToken(PlSqlParser.INFINITE, i);
		}
		public List<TerminalNode> A_LETTER() { return getTokens(PlSqlParser.A_LETTER); }
		public TerminalNode A_LETTER(int i) {
			return getToken(PlSqlParser.A_LETTER, i);
		}
		public List<TerminalNode> SET() { return getTokens(PlSqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(PlSqlParser.SET, i);
		}
		public List<TerminalNode> EMPTY() { return getTokens(PlSqlParser.EMPTY); }
		public TerminalNode EMPTY(int i) {
			return getToken(PlSqlParser.EMPTY, i);
		}
		public List<TerminalNode> OF() { return getTokens(PlSqlParser.OF); }
		public TerminalNode OF(int i) {
			return getToken(PlSqlParser.OF, i);
		}
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public List<TerminalNode> NOT() { return getTokens(PlSqlParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(PlSqlParser.NOT, i);
		}
		public List<TerminalNode> TYPE() { return getTokens(PlSqlParser.TYPE); }
		public TerminalNode TYPE(int i) {
			return getToken(PlSqlParser.TYPE, i);
		}
		public List<TerminalNode> ONLY() { return getTokens(PlSqlParser.ONLY); }
		public TerminalNode ONLY(int i) {
			return getToken(PlSqlParser.ONLY, i);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equality_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterEquality_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitEquality_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitEquality_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Equality_expressionContext equality_expression() throws RecognitionException {
		Equality_expressionContext _localctx = new Equality_expressionContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_equality_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4056);
			multiset_expression();
			setState(4090);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,490,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4057);
					match(IS);
					setState(4059);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(4058);
						match(NOT);
						}
					}

					setState(4086);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NULL:
						{
						setState(4061);
						match(NULL);
						}
						break;
					case NAN:
						{
						setState(4062);
						match(NAN);
						}
						break;
					case PRESENT:
						{
						setState(4063);
						match(PRESENT);
						}
						break;
					case INFINITE:
						{
						setState(4064);
						match(INFINITE);
						}
						break;
					case A_LETTER:
						{
						setState(4065);
						match(A_LETTER);
						setState(4066);
						match(SET);
						}
						break;
					case EMPTY:
						{
						setState(4067);
						match(EMPTY);
						}
						break;
					case OF:
						{
						setState(4068);
						match(OF);
						setState(4070);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==TYPE) {
							{
							setState(4069);
							match(TYPE);
							}
						}

						setState(4072);
						match(LEFT_PAREN);
						setState(4074);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
						case 1:
							{
							setState(4073);
							match(ONLY);
							}
							break;
						}
						setState(4076);
						type_spec();
						setState(4081);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(4077);
							match(COMMA);
							setState(4078);
							type_spec();
							}
							}
							setState(4083);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(4084);
						match(RIGHT_PAREN);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				setState(4092);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,490,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_expressionContext extends ParserRuleContext {
		public Relational_expressionContext relational_expression() {
			return getRuleContext(Relational_expressionContext.class,0);
		}
		public Multiset_typeContext multiset_type() {
			return getRuleContext(Multiset_typeContext.class,0);
		}
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Multiset_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMultiset_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMultiset_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitMultiset_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiset_expressionContext multiset_expression() throws RecognitionException {
		Multiset_expressionContext _localctx = new Multiset_expressionContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_multiset_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4093);
			relational_expression(0);
			setState(4100);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
			case 1:
				{
				setState(4094);
				multiset_type();
				setState(4096);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(4095);
					match(OF);
					}
				}

				setState(4098);
				concatenation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_typeContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode SUBMULTISET() { return getToken(PlSqlParser.SUBMULTISET, 0); }
		public Multiset_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMultiset_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMultiset_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitMultiset_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiset_typeContext multiset_type() throws RecognitionException {
		Multiset_typeContext _localctx = new Multiset_typeContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_multiset_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4102);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==SUBMULTISET) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_expressionContext extends ParserRuleContext {
		public Compound_expressionContext compound_expression() {
			return getRuleContext(Compound_expressionContext.class,0);
		}
		public List<Relational_expressionContext> relational_expression() {
			return getRuleContexts(Relational_expressionContext.class);
		}
		public Relational_expressionContext relational_expression(int i) {
			return getRuleContext(Relational_expressionContext.class,i);
		}
		public Relational_operatorContext relational_operator() {
			return getRuleContext(Relational_operatorContext.class,0);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRelational_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRelational_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitRelational_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relational_expressionContext relational_expression() throws RecognitionException {
		return relational_expression(0);
	}

	private Relational_expressionContext relational_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Relational_expressionContext _localctx = new Relational_expressionContext(_ctx, _parentState);
		Relational_expressionContext _prevctx = _localctx;
		int _startState = 536;
		enterRecursionRule(_localctx, 536, RULE_relational_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(4105);
			compound_expression();
			}
			_ctx.stop = _input.LT(-1);
			setState(4113);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,493,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Relational_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
					setState(4107);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(4108);
					relational_operator();
					setState(4109);
					relational_expression(3);
					}
					} 
				}
				setState(4115);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,493,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Compound_expressionContext extends ParserRuleContext {
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public In_elementsContext in_elements() {
			return getRuleContext(In_elementsContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public Between_elementsContext between_elements() {
			return getRuleContext(Between_elementsContext.class,0);
		}
		public Like_typeContext like_type() {
			return getRuleContext(Like_typeContext.class,0);
		}
		public TerminalNode NOT() { return getToken(PlSqlParser.NOT, 0); }
		public Like_escape_partContext like_escape_part() {
			return getRuleContext(Like_escape_partContext.class,0);
		}
		public Compound_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCompound_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCompound_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCompound_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compound_expressionContext compound_expression() throws RecognitionException {
		Compound_expressionContext _localctx = new Compound_expressionContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_compound_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4116);
			concatenation();
			setState(4131);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
			case 1:
				{
				setState(4118);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4117);
					match(NOT);
					}
				}

				setState(4129);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case IN:
					{
					setState(4120);
					match(IN);
					setState(4121);
					in_elements();
					}
					break;
				case BETWEEN:
					{
					setState(4122);
					match(BETWEEN);
					setState(4123);
					between_elements();
					}
					break;
				case LIKE:
				case LIKE2:
				case LIKE4:
				case LIKEC:
					{
					setState(4124);
					like_type();
					setState(4125);
					concatenation();
					setState(4127);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,495,_ctx) ) {
					case 1:
						{
						setState(4126);
						like_escape_part();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_operatorContext extends ParserRuleContext {
		public Not_equal_opContext not_equal_op() {
			return getRuleContext(Not_equal_opContext.class,0);
		}
		public Less_than_or_equals_opContext less_than_or_equals_op() {
			return getRuleContext(Less_than_or_equals_opContext.class,0);
		}
		public Greater_than_or_equals_opContext greater_than_or_equals_op() {
			return getRuleContext(Greater_than_or_equals_opContext.class,0);
		}
		public Relational_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRelational_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRelational_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitRelational_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relational_operatorContext relational_operator() throws RecognitionException {
		Relational_operatorContext _localctx = new Relational_operatorContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_relational_operator);
		try {
			setState(4139);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4133);
				match(EQUALS_OP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4134);
				not_equal_op();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4135);
				match(LESS_THAN_OP);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4136);
				match(GREATER_THAN_OP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4137);
				less_than_or_equals_op();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4138);
				greater_than_or_equals_op();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_typeContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(PlSqlParser.LIKE, 0); }
		public TerminalNode LIKEC() { return getToken(PlSqlParser.LIKEC, 0); }
		public TerminalNode LIKE2() { return getToken(PlSqlParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(PlSqlParser.LIKE4, 0); }
		public Like_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLike_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLike_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitLike_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Like_typeContext like_type() throws RecognitionException {
		Like_typeContext _localctx = new Like_typeContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_like_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4141);
			_la = _input.LA(1);
			if ( !(((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (LIKE - 202)) | (1L << (LIKE2 - 202)) | (1L << (LIKE4 - 202)) | (1L << (LIKEC - 202)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_escape_partContext extends ParserRuleContext {
		public TerminalNode ESCAPE() { return getToken(PlSqlParser.ESCAPE, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Like_escape_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_escape_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLike_escape_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLike_escape_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitLike_escape_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Like_escape_partContext like_escape_part() throws RecognitionException {
		Like_escape_partContext _localctx = new Like_escape_partContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_like_escape_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4143);
			match(ESCAPE);
			setState(4144);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_elementsContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public In_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterIn_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitIn_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitIn_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_elementsContext in_elements() throws RecognitionException {
		In_elementsContext _localctx = new In_elementsContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_in_elements);
		int _la;
		try {
			setState(4164);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4146);
				match(LEFT_PAREN);
				setState(4147);
				subquery();
				setState(4148);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4150);
				match(LEFT_PAREN);
				setState(4151);
				concatenation();
				setState(4156);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4152);
					match(COMMA);
					setState(4153);
					concatenation();
					}
					}
					setState(4158);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4159);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4161);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4162);
				bind_variable();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4163);
				general_element();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_elementsContext extends ParserRuleContext {
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public Between_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterBetween_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitBetween_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitBetween_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Between_elementsContext between_elements() throws RecognitionException {
		Between_elementsContext _localctx = new Between_elementsContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_between_elements);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4166);
			concatenation();
			setState(4167);
			match(AND);
			setState(4168);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConcatenationContext extends ParserRuleContext {
		public List<Additive_expressionContext> additive_expression() {
			return getRuleContexts(Additive_expressionContext.class);
		}
		public Additive_expressionContext additive_expression(int i) {
			return getRuleContext(Additive_expressionContext.class,i);
		}
		public List<Concatenation_opContext> concatenation_op() {
			return getRuleContexts(Concatenation_opContext.class);
		}
		public Concatenation_opContext concatenation_op(int i) {
			return getRuleContext(Concatenation_opContext.class,i);
		}
		public ConcatenationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConcatenation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConcatenation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitConcatenation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConcatenationContext concatenation() throws RecognitionException {
		ConcatenationContext _localctx = new ConcatenationContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_concatenation);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4170);
			additive_expression();
			setState(4176);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,501,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4171);
					concatenation_op();
					setState(4172);
					additive_expression();
					}
					} 
				}
				setState(4178);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,501,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Additive_expressionContext extends ParserRuleContext {
		public Token s513;
		public List<Token> op = new ArrayList<Token>();
		public Token s514;
		public Token _tset7391;
		public List<Multiply_expressionContext> multiply_expression() {
			return getRuleContexts(Multiply_expressionContext.class);
		}
		public Multiply_expressionContext multiply_expression(int i) {
			return getRuleContext(Multiply_expressionContext.class,i);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_additive_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAdditive_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAdditive_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitAdditive_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Additive_expressionContext additive_expression() throws RecognitionException {
		Additive_expressionContext _localctx = new Additive_expressionContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_additive_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4179);
			multiply_expression();
			setState(4184);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,502,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4180);
					((Additive_expressionContext)_localctx)._tset7391 = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
						((Additive_expressionContext)_localctx)._tset7391 = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					((Additive_expressionContext)_localctx).op.add(((Additive_expressionContext)_localctx)._tset7391);
					setState(4181);
					multiply_expression();
					}
					} 
				}
				setState(4186);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,502,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiply_expressionContext extends ParserRuleContext {
		public Token s512;
		public List<Token> op = new ArrayList<Token>();
		public Token s516;
		public Token _tset7414;
		public List<Datetime_expressionContext> datetime_expression() {
			return getRuleContexts(Datetime_expressionContext.class);
		}
		public Datetime_expressionContext datetime_expression(int i) {
			return getRuleContext(Datetime_expressionContext.class,i);
		}
		public Multiply_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiply_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMultiply_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMultiply_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitMultiply_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiply_expressionContext multiply_expression() throws RecognitionException {
		Multiply_expressionContext _localctx = new Multiply_expressionContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_multiply_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4187);
			datetime_expression();
			setState(4192);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,503,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4188);
					((Multiply_expressionContext)_localctx)._tset7414 = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
						((Multiply_expressionContext)_localctx)._tset7414 = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					((Multiply_expressionContext)_localctx).op.add(((Multiply_expressionContext)_localctx)._tset7414);
					setState(4189);
					datetime_expression();
					}
					} 
				}
				setState(4194);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,503,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_expressionContext extends ParserRuleContext {
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
		public Interval_expressionContext interval_expression() {
			return getRuleContext(Interval_expressionContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Datetime_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDatetime_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDatetime_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitDatetime_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Datetime_expressionContext datetime_expression() throws RecognitionException {
		Datetime_expressionContext _localctx = new Datetime_expressionContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_datetime_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4195);
			model_expression();
			setState(4204);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,505,_ctx) ) {
			case 1:
				{
				setState(4196);
				match(AT);
				setState(4201);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LOCAL:
					{
					setState(4197);
					match(LOCAL);
					}
					break;
				case TIME:
					{
					setState(4198);
					match(TIME);
					setState(4199);
					match(ZONE);
					setState(4200);
					concatenation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(4203);
				interval_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_expressionContext extends ParserRuleContext {
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public Interval_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterInterval_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitInterval_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitInterval_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_expressionContext interval_expression() throws RecognitionException {
		Interval_expressionContext _localctx = new Interval_expressionContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_interval_expression);
		int _la;
		try {
			setState(4230);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DAY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4206);
				match(DAY);
				setState(4211);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4207);
					match(LEFT_PAREN);
					setState(4208);
					concatenation();
					setState(4209);
					match(RIGHT_PAREN);
					}
				}

				setState(4213);
				match(TO);
				setState(4214);
				match(SECOND);
				setState(4219);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
				case 1:
					{
					setState(4215);
					match(LEFT_PAREN);
					setState(4216);
					concatenation();
					setState(4217);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4221);
				match(YEAR);
				setState(4226);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4222);
					match(LEFT_PAREN);
					setState(4223);
					concatenation();
					setState(4224);
					match(RIGHT_PAREN);
					}
				}

				setState(4228);
				match(TO);
				setState(4229);
				match(MONTH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public Model_expression_elementContext model_expression_element() {
			return getRuleContext(Model_expression_elementContext.class,0);
		}
		public Model_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitModel_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_expressionContext model_expression() throws RecognitionException {
		Model_expressionContext _localctx = new Model_expressionContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_model_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4232);
			unary_expression();
			setState(4237);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,510,_ctx) ) {
			case 1:
				{
				setState(4233);
				match(LEFT_BRACKET);
				setState(4234);
				model_expression_element();
				setState(4235);
				match(RIGHT_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expression_elementContext extends ParserRuleContext {
		public List<TerminalNode> ANY() { return getTokens(PlSqlParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(PlSqlParser.ANY, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<Single_column_for_loopContext> single_column_for_loop() {
			return getRuleContexts(Single_column_for_loopContext.class);
		}
		public Single_column_for_loopContext single_column_for_loop(int i) {
			return getRuleContext(Single_column_for_loopContext.class,i);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return getRuleContext(Multi_column_for_loopContext.class,0);
		}
		public Model_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterModel_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitModel_expression_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitModel_expression_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_expression_elementContext model_expression_element() throws RecognitionException {
		Model_expression_elementContext _localctx = new Model_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_model_expression_element);
		int _la;
		try {
			setState(4262);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4241);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
				case 1:
					{
					setState(4239);
					match(ANY);
					}
					break;
				case 2:
					{
					setState(4240);
					expression();
					}
					break;
				}
				setState(4250);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4243);
					match(COMMA);
					setState(4246);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,512,_ctx) ) {
					case 1:
						{
						setState(4244);
						match(ANY);
						}
						break;
					case 2:
						{
						setState(4245);
						expression();
						}
						break;
					}
					}
					}
					setState(4252);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4253);
				single_column_for_loop();
				setState(4258);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4254);
					match(COMMA);
					setState(4255);
					single_column_for_loop();
					}
					}
					setState(4260);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4261);
				multi_column_for_loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_column_for_loopContext extends ParserRuleContext {
		public ExpressionContext ex1;
		public ExpressionContext ex2;
		public ExpressionContext ex3;
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public For_increment_decrement_typeContext for_increment_decrement_type() {
			return getRuleContext(For_increment_decrement_typeContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public For_like_partContext for_like_part() {
			return getRuleContext(For_like_partContext.class,0);
		}
		public Single_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSingle_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSingle_column_for_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSingle_column_for_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Single_column_for_loopContext single_column_for_loop() throws RecognitionException {
		Single_column_for_loopContext _localctx = new Single_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_single_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4264);
			match(FOR);
			setState(4265);
			column_name();
			setState(4278);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN:
				{
				setState(4266);
				match(IN);
				setState(4267);
				expression_list();
				}
				break;
			case FROM:
			case LIKE:
				{
				setState(4269);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE) {
					{
					setState(4268);
					for_like_part();
					}
				}

				setState(4271);
				match(FROM);
				setState(4272);
				((Single_column_for_loopContext)_localctx).ex1 = expression();
				setState(4273);
				match(TO);
				setState(4274);
				((Single_column_for_loopContext)_localctx).ex2 = expression();
				setState(4275);
				for_increment_decrement_type();
				setState(4276);
				((Single_column_for_loopContext)_localctx).ex3 = expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_like_partContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(PlSqlParser.LIKE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_like_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_like_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFor_like_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFor_like_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitFor_like_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_like_partContext for_like_part() throws RecognitionException {
		For_like_partContext _localctx = new For_like_partContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_for_like_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4280);
			match(LIKE);
			setState(4281);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_increment_decrement_typeContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(PlSqlParser.INCREMENT, 0); }
		public TerminalNode DECREMENT() { return getToken(PlSqlParser.DECREMENT, 0); }
		public For_increment_decrement_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_increment_decrement_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFor_increment_decrement_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFor_increment_decrement_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitFor_increment_decrement_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_increment_decrement_typeContext for_increment_decrement_type() throws RecognitionException {
		For_increment_decrement_typeContext _localctx = new For_increment_decrement_typeContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_for_increment_decrement_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4283);
			_la = _input.LA(1);
			if ( !(_la==DECREMENT || _la==INCREMENT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_column_for_loopContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public Multi_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMulti_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMulti_column_for_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitMulti_column_for_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multi_column_for_loopContext multi_column_for_loop() throws RecognitionException {
		Multi_column_for_loopContext _localctx = new Multi_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_multi_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4285);
			match(FOR);
			setState(4286);
			match(LEFT_PAREN);
			setState(4287);
			column_name();
			setState(4292);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4288);
				match(COMMA);
				setState(4289);
				column_name();
				}
				}
				setState(4294);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4295);
			match(RIGHT_PAREN);
			setState(4296);
			match(IN);
			setState(4297);
			match(LEFT_PAREN);
			setState(4310);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,520,_ctx) ) {
			case 1:
				{
				setState(4298);
				subquery();
				}
				break;
			case 2:
				{
				setState(4299);
				match(LEFT_PAREN);
				setState(4300);
				expression_list();
				setState(4305);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4301);
					match(COMMA);
					setState(4302);
					expression_list();
					}
					}
					setState(4307);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4308);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(4312);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public TerminalNode PRIOR() { return getToken(PlSqlParser.PRIOR, 0); }
		public TerminalNode CONNECT_BY_ROOT() { return getToken(PlSqlParser.CONNECT_BY_ROOT, 0); }
		public TerminalNode NEW() { return getToken(PlSqlParser.NEW, 0); }
		public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Quantified_expressionContext quantified_expression() {
			return getRuleContext(Quantified_expressionContext.class,0);
		}
		public Standard_functionContext standard_function() {
			return getRuleContext(Standard_functionContext.class,0);
		}
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUnary_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUnary_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitUnary_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unary_expressionContext unary_expression() throws RecognitionException {
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_unary_expression);
		int _la;
		try {
			setState(4330);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,521,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4314);
				_la = _input.LA(1);
				if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4315);
				unary_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4316);
				match(PRIOR);
				setState(4317);
				unary_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4318);
				match(CONNECT_BY_ROOT);
				setState(4319);
				unary_expression();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4320);
				match(NEW);
				setState(4321);
				unary_expression();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4322);
				match(DISTINCT);
				setState(4323);
				unary_expression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4324);
				match(ALL);
				setState(4325);
				unary_expression();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4326);
				case_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4327);
				quantified_expression();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4328);
				standard_function();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4329);
				atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_statementContext extends ParserRuleContext {
		public Searched_case_statementContext searched_case_statement() {
			return getRuleContext(Searched_case_statementContext.class,0);
		}
		public Simple_case_statementContext simple_case_statement() {
			return getRuleContext(Simple_case_statementContext.class,0);
		}
		public Case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCase_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCase_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCase_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_statementContext case_statement() throws RecognitionException {
		Case_statementContext _localctx = new Case_statementContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_case_statement);
		try {
			setState(4334);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4332);
				searched_case_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4333);
				simple_case_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(PlSqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(PlSqlParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Simple_case_when_partContext> simple_case_when_part() {
			return getRuleContexts(Simple_case_when_partContext.class);
		}
		public Simple_case_when_partContext simple_case_when_part(int i) {
			return getRuleContext(Simple_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Simple_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSimple_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSimple_case_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSimple_case_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_case_statementContext simple_case_statement() throws RecognitionException {
		Simple_case_statementContext _localctx = new Simple_case_statementContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_simple_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4337);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==REGULAR_ID) {
				{
				setState(4336);
				label_name();
				}
			}

			setState(4339);
			((Simple_case_statementContext)_localctx).ck1 = match(CASE);
			setState(4340);
			expression();
			setState(4342); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4341);
				simple_case_when_part();
				}
				}
				setState(4344); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4346);
				case_else_part();
				}
			}

			setState(4349);
			match(END);
			setState(4351);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,526,_ctx) ) {
			case 1:
				{
				setState(4350);
				match(CASE);
				}
				break;
			}
			setState(4354);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
			case 1:
				{
				setState(4353);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Simple_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSimple_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSimple_case_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSimple_case_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_case_when_partContext simple_case_when_part() throws RecognitionException {
		Simple_case_when_partContext _localctx = new Simple_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_simple_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4356);
			match(WHEN);
			setState(4357);
			expression();
			setState(4358);
			match(THEN);
			setState(4361);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
			case 1:
				{
				setState(4359);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4360);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public TerminalNode END() { return getToken(PlSqlParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(PlSqlParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(PlSqlParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Searched_case_when_partContext> searched_case_when_part() {
			return getRuleContexts(Searched_case_when_partContext.class);
		}
		public Searched_case_when_partContext searched_case_when_part(int i) {
			return getRuleContext(Searched_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Searched_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSearched_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSearched_case_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSearched_case_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Searched_case_statementContext searched_case_statement() throws RecognitionException {
		Searched_case_statementContext _localctx = new Searched_case_statementContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_searched_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4364);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==REGULAR_ID) {
				{
				setState(4363);
				label_name();
				}
			}

			setState(4366);
			((Searched_case_statementContext)_localctx).ck1 = match(CASE);
			setState(4368); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4367);
				searched_case_when_part();
				}
				}
				setState(4370); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4373);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4372);
				case_else_part();
				}
			}

			setState(4375);
			match(END);
			setState(4377);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
			case 1:
				{
				setState(4376);
				match(CASE);
				}
				break;
			}
			setState(4380);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,533,_ctx) ) {
			case 1:
				{
				setState(4379);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(PlSqlParser.WHEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode THEN() { return getToken(PlSqlParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Searched_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSearched_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSearched_case_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSearched_case_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Searched_case_when_partContext searched_case_when_part() throws RecognitionException {
		Searched_case_when_partContext _localctx = new Searched_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_searched_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4382);
			match(WHEN);
			setState(4383);
			expression();
			setState(4384);
			match(THEN);
			setState(4387);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
			case 1:
				{
				setState(4385);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4386);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(PlSqlParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Case_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCase_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCase_else_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCase_else_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_else_partContext case_else_part() throws RecognitionException {
		Case_else_partContext _localctx = new Case_else_partContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_case_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4389);
			match(ELSE);
			setState(4392);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,535,_ctx) ) {
			case 1:
				{
				setState(4390);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4391);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AtomContext extends ParserRuleContext {
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public Outer_join_signContext outer_join_sign() {
			return getRuleContext(Outer_join_signContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Expression_or_vectorContext expression_or_vector() {
			return getRuleContext(Expression_or_vectorContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public AtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AtomContext atom() throws RecognitionException {
		AtomContext _localctx = new AtomContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_atom);
		try {
			int _alt;
			setState(4414);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4394);
				table_element();
				setState(4395);
				outer_join_sign();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4397);
				bind_variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4398);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4399);
				general_element();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4400);
				match(LEFT_PAREN);
				setState(4412);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,537,_ctx) ) {
				case 1:
					{
					setState(4401);
					subquery();
					setState(4402);
					match(RIGHT_PAREN);
					setState(4406);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,536,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(4403);
							subquery_operation_part();
							}
							} 
						}
						setState(4408);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,536,_ctx);
					}
					}
					break;
				case 2:
					{
					setState(4409);
					expression_or_vector();
					setState(4410);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_or_vectorContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Vector_exprContext vector_expr() {
			return getRuleContext(Vector_exprContext.class,0);
		}
		public Expression_or_vectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_or_vector; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterExpression_or_vector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitExpression_or_vector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitExpression_or_vector(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_or_vectorContext expression_or_vector() throws RecognitionException {
		Expression_or_vectorContext _localctx = new Expression_or_vectorContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_expression_or_vector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4416);
			expression();
			setState(4418);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4417);
				vector_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vector_exprContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Vector_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vector_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterVector_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitVector_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitVector_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vector_exprContext vector_expr() throws RecognitionException {
		Vector_exprContext _localctx = new Vector_exprContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_vector_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4420);
			match(COMMA);
			setState(4421);
			expression();
			setState(4426);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4422);
				match(COMMA);
				setState(4423);
				expression();
				}
				}
				setState(4428);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quantified_expressionContext extends ParserRuleContext {
		public TerminalNode SOME() { return getToken(PlSqlParser.SOME, 0); }
		public TerminalNode EXISTS() { return getToken(PlSqlParser.EXISTS, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(PlSqlParser.ANY, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Quantified_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantified_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterQuantified_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitQuantified_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitQuantified_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Quantified_expressionContext quantified_expression() throws RecognitionException {
		Quantified_expressionContext _localctx = new Quantified_expressionContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_quantified_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4429);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==EXISTS || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4438);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
			case 1:
				{
				setState(4430);
				match(LEFT_PAREN);
				setState(4431);
				subquery();
				setState(4432);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(4434);
				match(LEFT_PAREN);
				setState(4435);
				expression();
				setState(4436);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_functionContext extends ParserRuleContext {
		public TerminalNode SUBSTR() { return getToken(PlSqlParser.SUBSTR, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public TerminalNode TO_CHAR() { return getToken(PlSqlParser.TO_CHAR, 0); }
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public Standard_functionContext standard_function() {
			return getRuleContext(Standard_functionContext.class,0);
		}
		public List<Quoted_stringContext> quoted_string() {
			return getRuleContexts(Quoted_stringContext.class);
		}
		public Quoted_stringContext quoted_string(int i) {
			return getRuleContext(Quoted_stringContext.class,i);
		}
		public TerminalNode DECODE() { return getToken(PlSqlParser.DECODE, 0); }
		public TerminalNode CHR() { return getToken(PlSqlParser.CHR, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode NCHAR_CS() { return getToken(PlSqlParser.NCHAR_CS, 0); }
		public TerminalNode NVL() { return getToken(PlSqlParser.NVL, 0); }
		public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public TerminalNode LEADING() { return getToken(PlSqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(PlSqlParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(PlSqlParser.BOTH, 0); }
		public TerminalNode TO_DATE() { return getToken(PlSqlParser.TO_DATE, 0); }
		public String_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterString_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitString_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitString_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final String_functionContext string_function() throws RecognitionException {
		String_functionContext _localctx = new String_functionContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_string_function);
		int _la;
		try {
			setState(4517);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SUBSTR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4440);
				match(SUBSTR);
				setState(4441);
				match(LEFT_PAREN);
				setState(4442);
				expression();
				setState(4443);
				match(COMMA);
				setState(4444);
				expression();
				setState(4447);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4445);
					match(COMMA);
					setState(4446);
					expression();
					}
				}

				setState(4449);
				match(RIGHT_PAREN);
				}
				break;
			case TO_CHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4451);
				match(TO_CHAR);
				setState(4452);
				match(LEFT_PAREN);
				setState(4456);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
				case 1:
					{
					setState(4453);
					table_element();
					}
					break;
				case 2:
					{
					setState(4454);
					standard_function();
					}
					break;
				case 3:
					{
					setState(4455);
					expression();
					}
					break;
				}
				setState(4460);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
				case 1:
					{
					setState(4458);
					match(COMMA);
					setState(4459);
					quoted_string();
					}
					break;
				}
				setState(4464);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4462);
					match(COMMA);
					setState(4463);
					quoted_string();
					}
				}

				setState(4466);
				match(RIGHT_PAREN);
				}
				break;
			case DECODE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4468);
				match(DECODE);
				setState(4469);
				match(LEFT_PAREN);
				setState(4470);
				expression();
				setState(4475);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4471);
					match(COMMA);
					setState(4472);
					expression();
					}
					}
					setState(4477);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4478);
				match(RIGHT_PAREN);
				}
				break;
			case CHR:
				enterOuterAlt(_localctx, 4);
				{
				setState(4480);
				match(CHR);
				setState(4481);
				match(LEFT_PAREN);
				setState(4482);
				concatenation();
				setState(4483);
				match(USING);
				setState(4484);
				match(NCHAR_CS);
				setState(4485);
				match(RIGHT_PAREN);
				}
				break;
			case NVL:
				enterOuterAlt(_localctx, 5);
				{
				setState(4487);
				match(NVL);
				setState(4488);
				match(LEFT_PAREN);
				setState(4489);
				expression();
				setState(4490);
				match(COMMA);
				setState(4491);
				expression();
				setState(4492);
				match(RIGHT_PAREN);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 6);
				{
				setState(4494);
				match(TRIM);
				setState(4495);
				match(LEFT_PAREN);
				setState(4503);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,549,_ctx) ) {
				case 1:
					{
					setState(4497);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						setState(4496);
						_la = _input.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(4500);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						setState(4499);
						quoted_string();
						}
					}

					setState(4502);
					match(FROM);
					}
					break;
				}
				setState(4505);
				concatenation();
				setState(4506);
				match(RIGHT_PAREN);
				}
				break;
			case TO_DATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(4508);
				match(TO_DATE);
				setState(4509);
				match(LEFT_PAREN);
				setState(4510);
				expression();
				setState(4513);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4511);
					match(COMMA);
					setState(4512);
					quoted_string();
					}
				}

				setState(4515);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_functionContext extends ParserRuleContext {
		public String_functionContext string_function() {
			return getRuleContext(String_functionContext.class,0);
		}
		public Numeric_function_wrapperContext numeric_function_wrapper() {
			return getRuleContext(Numeric_function_wrapperContext.class,0);
		}
		public Other_functionContext other_function() {
			return getRuleContext(Other_functionContext.class,0);
		}
		public Standard_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterStandard_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitStandard_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitStandard_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Standard_functionContext standard_function() throws RecognitionException {
		Standard_functionContext _localctx = new Standard_functionContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_standard_function);
		try {
			setState(4522);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,552,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4519);
				string_function();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4520);
				numeric_function_wrapper();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4521);
				other_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_function_wrapperContext extends ParserRuleContext {
		public Numeric_functionContext numeric_function() {
			return getRuleContext(Numeric_functionContext.class,0);
		}
		public Single_column_for_loopContext single_column_for_loop() {
			return getRuleContext(Single_column_for_loopContext.class,0);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return getRuleContext(Multi_column_for_loopContext.class,0);
		}
		public Numeric_function_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_function_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNumeric_function_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNumeric_function_wrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitNumeric_function_wrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numeric_function_wrapperContext numeric_function_wrapper() throws RecognitionException {
		Numeric_function_wrapperContext _localctx = new Numeric_function_wrapperContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_numeric_function_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4524);
			numeric_function();
			setState(4527);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,553,_ctx) ) {
			case 1:
				{
				setState(4525);
				single_column_for_loop();
				}
				break;
			case 2:
				{
				setState(4526);
				multi_column_for_loop();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_functionContext extends ParserRuleContext {
		public TerminalNode SUM() { return getToken(PlSqlParser.SUM, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode ROUND() { return getToken(PlSqlParser.ROUND, 0); }
		public List<TerminalNode> COMMA() { return getTokens(PlSqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(PlSqlParser.COMMA, i);
		}
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode AVG() { return getToken(PlSqlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(PlSqlParser.MAX, 0); }
		public TerminalNode LEAST() { return getToken(PlSqlParser.LEAST, 0); }
		public TerminalNode GREATEST() { return getToken(PlSqlParser.GREATEST, 0); }
		public Numeric_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNumeric_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNumeric_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitNumeric_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numeric_functionContext numeric_function() throws RecognitionException {
		Numeric_functionContext _localctx = new Numeric_functionContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_numeric_function);
		int _la;
		try {
			setState(4601);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SUM:
				enterOuterAlt(_localctx, 1);
				{
				setState(4529);
				match(SUM);
				setState(4530);
				match(LEFT_PAREN);
				setState(4532);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
				case 1:
					{
					setState(4531);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4534);
				expression();
				setState(4535);
				match(RIGHT_PAREN);
				}
				break;
			case COUNT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4537);
				match(COUNT);
				setState(4538);
				match(LEFT_PAREN);
				setState(4546);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ASTERISK:
					{
					setState(4539);
					match(ASTERISK);
					}
					break;
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNIQUE:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case DECODE:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case NVL:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROUND:
				case ROW_NUMBER:
				case SUBSTR:
				case TO_CHAR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case LEAST:
				case GREATEST:
				case TO_DATE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case RIGHT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(4544);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COALESCE) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONNECT_BY_ROOT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DISTINCT - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NULL - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NUMERIC - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (PRIOR - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT - 321)) | (1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)) | (1L << (SUBMULTISET - 321)) | (1L << (SUBPARTITION - 321)) | (1L << (SUBSTITUTABLE - 321)) | (1L << (SUBTYPE - 321)) | (1L << (SUCCESS - 321)) | (1L << (SUSPEND - 321)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUE - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNIQUE - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (DECODE - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (NVL - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROUND - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TO_CHAR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (LEAST - 453)) | (1L << (GREATEST - 453)) | (1L << (TO_DATE - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (UNSIGNED_INTEGER - 453)) | (1L << (APPROXIMATE_NUM_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (LEFT_PAREN - 453)) | (1L << (PLUS_SIGN - 453)) | (1L << (MINUS_SIGN - 453)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (BINDVAR - 519)) | (1L << (COLON - 519)) | (1L << (INTRODUCER - 519)) | (1L << (REGULAR_ID - 519)))) != 0)) {
						{
						setState(4541);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
						case 1:
							{
							setState(4540);
							_la = _input.LA(1);
							if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						}
						setState(4543);
						concatenation();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4548);
				match(RIGHT_PAREN);
				setState(4550);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
				case 1:
					{
					setState(4549);
					over_clause();
					}
					break;
				}
				}
				break;
			case ROUND:
				enterOuterAlt(_localctx, 3);
				{
				setState(4552);
				match(ROUND);
				setState(4553);
				match(LEFT_PAREN);
				setState(4554);
				expression();
				setState(4557);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4555);
					match(COMMA);
					setState(4556);
					match(UNSIGNED_INTEGER);
					}
				}

				setState(4559);
				match(RIGHT_PAREN);
				}
				break;
			case AVG:
				enterOuterAlt(_localctx, 4);
				{
				setState(4561);
				match(AVG);
				setState(4562);
				match(LEFT_PAREN);
				setState(4564);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
				case 1:
					{
					setState(4563);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4566);
				expression();
				setState(4567);
				match(RIGHT_PAREN);
				}
				break;
			case MAX:
				enterOuterAlt(_localctx, 5);
				{
				setState(4569);
				match(MAX);
				setState(4570);
				match(LEFT_PAREN);
				setState(4572);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,561,_ctx) ) {
				case 1:
					{
					setState(4571);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4574);
				expression();
				setState(4575);
				match(RIGHT_PAREN);
				}
				break;
			case LEAST:
				enterOuterAlt(_localctx, 6);
				{
				setState(4577);
				match(LEAST);
				setState(4578);
				match(LEFT_PAREN);
				setState(4579);
				expression();
				setState(4584);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4580);
					match(COMMA);
					setState(4581);
					expression();
					}
					}
					setState(4586);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4587);
				match(RIGHT_PAREN);
				}
				break;
			case GREATEST:
				enterOuterAlt(_localctx, 7);
				{
				setState(4589);
				match(GREATEST);
				setState(4590);
				match(LEFT_PAREN);
				setState(4591);
				expression();
				setState(4596);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4592);
					match(COMMA);
					setState(4593);
					expression();
					}
					}
					setState(4598);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4599);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Other_functionContext extends ParserRuleContext {
		public Over_clause_keywordContext over_clause_keyword() {
			return getRuleContext(Over_clause_keywordContext.class,0);
		}
		public Function_argument_analyticContext function_argument_analytic() {
			return getRuleContext(Function_argument_analyticContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Function_argument_modelingContext function_argument_modeling() {
			return getRuleContext(Function_argument_modelingContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode DISTINCT() { return getToken(PlSqlParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(PlSqlParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(PlSqlParser.ALL, 0); }
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode CAST() { return getToken(PlSqlParser.CAST, 0); }
		public TerminalNode XMLCAST() { return getToken(PlSqlParser.XMLCAST, 0); }
		public TerminalNode MULTISET() { return getToken(PlSqlParser.MULTISET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode COALESCE() { return getToken(PlSqlParser.COALESCE, 0); }
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(PlSqlParser.COMMA, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public Collect_order_by_partContext collect_order_by_part() {
			return getRuleContext(Collect_order_by_partContext.class,0);
		}
		public Within_or_over_clause_keywordContext within_or_over_clause_keyword() {
			return getRuleContext(Within_or_over_clause_keywordContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public List<Within_or_over_partContext> within_or_over_part() {
			return getRuleContexts(Within_or_over_partContext.class);
		}
		public Within_or_over_partContext within_or_over_part(int i) {
			return getRuleContext(Within_or_over_partContext.class,i);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode PERCENT_ISOPEN() { return getToken(PlSqlParser.PERCENT_ISOPEN, 0); }
		public TerminalNode PERCENT_FOUND() { return getToken(PlSqlParser.PERCENT_FOUND, 0); }
		public TerminalNode PERCENT_NOTFOUND() { return getToken(PlSqlParser.PERCENT_NOTFOUND, 0); }
		public TerminalNode PERCENT_ROWCOUNT() { return getToken(PlSqlParser.PERCENT_ROWCOUNT, 0); }
		public TerminalNode DECOMPOSE() { return getToken(PlSqlParser.DECOMPOSE, 0); }
		public TerminalNode CANONICAL() { return getToken(PlSqlParser.CANONICAL, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(PlSqlParser.COMPATIBILITY, 0); }
		public TerminalNode EXTRACT() { return getToken(PlSqlParser.EXTRACT, 0); }
		public TerminalNode FROM() { return getToken(PlSqlParser.FROM, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(PlSqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(PlSqlParser.LAST_VALUE, 0); }
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls() {
			return getRuleContext(Respect_or_ignore_nullsContext.class,0);
		}
		public Standard_prediction_function_keywordContext standard_prediction_function_keyword() {
			return getRuleContext(Standard_prediction_function_keywordContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Cost_matrix_clauseContext cost_matrix_clause() {
			return getRuleContext(Cost_matrix_clauseContext.class,0);
		}
		public TerminalNode TRANSLATE() { return getToken(PlSqlParser.TRANSLATE, 0); }
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public TerminalNode CHAR_CS() { return getToken(PlSqlParser.CHAR_CS, 0); }
		public TerminalNode NCHAR_CS() { return getToken(PlSqlParser.NCHAR_CS, 0); }
		public TerminalNode TREAT() { return getToken(PlSqlParser.TREAT, 0); }
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
		public TerminalNode LEADING() { return getToken(PlSqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(PlSqlParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(PlSqlParser.BOTH, 0); }
		public TerminalNode XMLAGG() { return getToken(PlSqlParser.XMLAGG, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode XMLCOLATTVAL() { return getToken(PlSqlParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLFOREST() { return getToken(PlSqlParser.XMLFOREST, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PlSqlParser.XMLELEMENT, 0); }
		public Xml_attributes_clauseContext xml_attributes_clause() {
			return getRuleContext(Xml_attributes_clauseContext.class,0);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(PlSqlParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode EVALNAME() { return getToken(PlSqlParser.EVALNAME, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public TerminalNode XMLEXISTS() { return getToken(PlSqlParser.XMLEXISTS, 0); }
		public Xml_passing_clauseContext xml_passing_clause() {
			return getRuleContext(Xml_passing_clauseContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(PlSqlParser.XMLPARSE, 0); }
		public TerminalNode DOCUMENT() { return getToken(PlSqlParser.DOCUMENT, 0); }
		public TerminalNode CONTENT() { return getToken(PlSqlParser.CONTENT, 0); }
		public TerminalNode WELLFORMED() { return getToken(PlSqlParser.WELLFORMED, 0); }
		public TerminalNode XMLPI() { return getToken(PlSqlParser.XMLPI, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode XMLQUERY() { return getToken(PlSqlParser.XMLQUERY, 0); }
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode EMPTY() { return getToken(PlSqlParser.EMPTY, 0); }
		public TerminalNode XMLROOT() { return getToken(PlSqlParser.XMLROOT, 0); }
		public Xmlroot_param_version_partContext xmlroot_param_version_part() {
			return getRuleContext(Xmlroot_param_version_partContext.class,0);
		}
		public Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() {
			return getRuleContext(Xmlroot_param_standalone_partContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(PlSqlParser.XMLSERIALIZE, 0); }
		public Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() {
			return getRuleContext(Xmlserialize_param_enconding_partContext.class,0);
		}
		public Xmlserialize_param_version_partContext xmlserialize_param_version_part() {
			return getRuleContext(Xmlserialize_param_version_partContext.class,0);
		}
		public Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() {
			return getRuleContext(Xmlserialize_param_ident_partContext.class,0);
		}
		public TerminalNode DEFAULTS() { return getToken(PlSqlParser.DEFAULTS, 0); }
		public TerminalNode HIDE() { return getToken(PlSqlParser.HIDE, 0); }
		public TerminalNode SHOW() { return getToken(PlSqlParser.SHOW, 0); }
		public TerminalNode XMLTABLE() { return getToken(PlSqlParser.XMLTABLE, 0); }
		public Xml_namespaces_clauseContext xml_namespaces_clause() {
			return getRuleContext(Xml_namespaces_clauseContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(PlSqlParser.COLUMNS, 0); }
		public List<Xml_table_columnContext> xml_table_column() {
			return getRuleContexts(Xml_table_columnContext.class);
		}
		public Xml_table_columnContext xml_table_column(int i) {
			return getRuleContext(Xml_table_columnContext.class,i);
		}
		public Other_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_other_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOther_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOther_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitOther_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Other_functionContext other_function() throws RecognitionException {
		Other_functionContext _localctx = new Other_functionContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_other_function);
		int _la;
		try {
			int _alt;
			setState(4925);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,619,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4603);
				over_clause_keyword();
				setState(4604);
				function_argument_analytic();
				setState(4606);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,565,_ctx) ) {
				case 1:
					{
					setState(4605);
					over_clause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4608);
				regular_id();
				setState(4609);
				function_argument_modeling();
				setState(4611);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,566,_ctx) ) {
				case 1:
					{
					setState(4610);
					using_clause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4613);
				match(COUNT);
				setState(4614);
				match(LEFT_PAREN);
				setState(4620);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ASTERISK:
					{
					setState(4615);
					match(ASTERISK);
					}
					break;
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COALESCE:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNIQUE:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case DECODE:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case NVL:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROUND:
				case ROW_NUMBER:
				case SUBSTR:
				case TO_CHAR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case LEAST:
				case GREATEST:
				case TO_DATE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(4617);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,567,_ctx) ) {
					case 1:
						{
						setState(4616);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					setState(4619);
					concatenation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4622);
				match(RIGHT_PAREN);
				setState(4624);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,569,_ctx) ) {
				case 1:
					{
					setState(4623);
					over_clause();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4626);
				_la = _input.LA(1);
				if ( !(_la==CAST || _la==XMLCAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4627);
				match(LEFT_PAREN);
				setState(4634);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,570,_ctx) ) {
				case 1:
					{
					setState(4628);
					match(MULTISET);
					setState(4629);
					match(LEFT_PAREN);
					setState(4630);
					subquery();
					setState(4631);
					match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					setState(4633);
					concatenation();
					}
					break;
				}
				setState(4636);
				match(AS);
				setState(4637);
				type_spec();
				setState(4638);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4640);
				match(COALESCE);
				setState(4641);
				match(LEFT_PAREN);
				setState(4642);
				table_element();
				setState(4648);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4643);
					match(COMMA);
					setState(4646);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
						{
						setState(4644);
						numeric();
						}
						break;
					case NATIONAL_CHAR_STRING_LIT:
					case CHAR_STRING:
						{
						setState(4645);
						quoted_string();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4650);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4652);
				match(COLLECT);
				setState(4653);
				match(LEFT_PAREN);
				setState(4655);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,573,_ctx) ) {
				case 1:
					{
					setState(4654);
					_la = _input.LA(1);
					if ( !(_la==DISTINCT || _la==UNIQUE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4657);
				concatenation();
				setState(4659);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4658);
					collect_order_by_part();
					}
				}

				setState(4661);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4663);
				within_or_over_clause_keyword();
				setState(4664);
				function_argument();
				setState(4666); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4665);
						within_or_over_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4668); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,575,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4670);
				cursor_name();
				setState(4671);
				_la = _input.LA(1);
				if ( !(((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (PERCENT_ISOPEN - 284)) | (1L << (PERCENT_FOUND - 284)) | (1L << (PERCENT_NOTFOUND - 284)) | (1L << (PERCENT_ROWCOUNT - 284)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4673);
				match(DECOMPOSE);
				setState(4674);
				match(LEFT_PAREN);
				setState(4675);
				concatenation();
				setState(4677);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CANONICAL || _la==COMPATIBILITY) {
					{
					setState(4676);
					_la = _input.LA(1);
					if ( !(_la==CANONICAL || _la==COMPATIBILITY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4679);
				match(RIGHT_PAREN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4681);
				match(EXTRACT);
				setState(4682);
				match(LEFT_PAREN);
				setState(4683);
				regular_id();
				setState(4684);
				match(FROM);
				setState(4685);
				concatenation();
				setState(4686);
				match(RIGHT_PAREN);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4688);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4689);
				function_argument_analytic();
				setState(4691);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(4690);
					respect_or_ignore_nulls();
					}
				}

				setState(4693);
				over_clause();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4695);
				standard_prediction_function_keyword();
				setState(4696);
				match(LEFT_PAREN);
				setState(4697);
				expression();
				setState(4702);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4698);
					match(COMMA);
					setState(4699);
					expression();
					}
					}
					setState(4704);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4706);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COST) {
					{
					setState(4705);
					cost_matrix_clause();
					}
				}

				setState(4709);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4708);
					using_clause();
					}
				}

				setState(4711);
				match(RIGHT_PAREN);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4713);
				match(TRANSLATE);
				setState(4714);
				match(LEFT_PAREN);
				setState(4715);
				expression();
				setState(4718);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4716);
					match(USING);
					setState(4717);
					_la = _input.LA(1);
					if ( !(_la==CHAR_CS || _la==NCHAR_CS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4724);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4720);
					match(COMMA);
					setState(4721);
					expression();
					}
					}
					setState(4726);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4727);
				match(RIGHT_PAREN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4729);
				match(TREAT);
				setState(4730);
				match(LEFT_PAREN);
				setState(4731);
				expression();
				setState(4732);
				match(AS);
				setState(4734);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,583,_ctx) ) {
				case 1:
					{
					setState(4733);
					match(REF);
					}
					break;
				}
				setState(4736);
				type_spec();
				setState(4737);
				match(RIGHT_PAREN);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4739);
				match(TRIM);
				setState(4740);
				match(LEFT_PAREN);
				setState(4748);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,586,_ctx) ) {
				case 1:
					{
					setState(4742);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						setState(4741);
						_la = _input.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(4745);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						setState(4744);
						quoted_string();
						}
					}

					setState(4747);
					match(FROM);
					}
					break;
				}
				setState(4750);
				concatenation();
				setState(4751);
				match(RIGHT_PAREN);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4753);
				match(XMLAGG);
				setState(4754);
				match(LEFT_PAREN);
				setState(4755);
				expression();
				setState(4757);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4756);
					order_by_clause();
					}
				}

				setState(4759);
				match(RIGHT_PAREN);
				setState(4762);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,588,_ctx) ) {
				case 1:
					{
					setState(4760);
					match(PERIOD);
					setState(4761);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4764);
				_la = _input.LA(1);
				if ( !(_la==XMLCOLATTVAL || _la==XMLFOREST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4765);
				match(LEFT_PAREN);
				setState(4766);
				xml_multiuse_expression_element();
				setState(4771);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4767);
					match(COMMA);
					setState(4768);
					xml_multiuse_expression_element();
					}
					}
					setState(4773);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4774);
				match(RIGHT_PAREN);
				setState(4777);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
				case 1:
					{
					setState(4775);
					match(PERIOD);
					setState(4776);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4779);
				match(XMLELEMENT);
				setState(4780);
				match(LEFT_PAREN);
				setState(4782);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,591,_ctx) ) {
				case 1:
					{
					setState(4781);
					_la = _input.LA(1);
					if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4785);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
				case 1:
					{
					setState(4784);
					_la = _input.LA(1);
					if ( !(_la==EVALNAME || _la==NAME) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4787);
				expression();
				setState(4790);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,593,_ctx) ) {
				case 1:
					{
					setState(4788);
					match(COMMA);
					setState(4789);
					xml_attributes_clause();
					}
					break;
				}
				setState(4799);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4792);
					match(COMMA);
					setState(4793);
					expression();
					setState(4795);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
						{
						setState(4794);
						column_alias();
						}
					}

					}
					}
					setState(4801);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4802);
				match(RIGHT_PAREN);
				setState(4805);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,596,_ctx) ) {
				case 1:
					{
					setState(4803);
					match(PERIOD);
					setState(4804);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(4807);
				match(XMLEXISTS);
				setState(4808);
				match(LEFT_PAREN);
				setState(4809);
				expression();
				setState(4811);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4810);
					xml_passing_clause();
					}
				}

				setState(4813);
				match(RIGHT_PAREN);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(4815);
				match(XMLPARSE);
				setState(4816);
				match(LEFT_PAREN);
				setState(4817);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4818);
				concatenation();
				setState(4820);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WELLFORMED) {
					{
					setState(4819);
					match(WELLFORMED);
					}
				}

				setState(4822);
				match(RIGHT_PAREN);
				setState(4825);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,599,_ctx) ) {
				case 1:
					{
					setState(4823);
					match(PERIOD);
					setState(4824);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(4827);
				match(XMLPI);
				setState(4828);
				match(LEFT_PAREN);
				setState(4833);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NAME:
					{
					setState(4829);
					match(NAME);
					setState(4830);
					identifier();
					}
					break;
				case EVALNAME:
					{
					setState(4831);
					match(EVALNAME);
					setState(4832);
					concatenation();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4837);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4835);
					match(COMMA);
					setState(4836);
					concatenation();
					}
				}

				setState(4839);
				match(RIGHT_PAREN);
				setState(4842);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
				case 1:
					{
					setState(4840);
					match(PERIOD);
					setState(4841);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(4844);
				match(XMLQUERY);
				setState(4845);
				match(LEFT_PAREN);
				setState(4846);
				concatenation();
				setState(4848);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4847);
					xml_passing_clause();
					}
				}

				setState(4850);
				match(RETURNING);
				setState(4851);
				match(CONTENT);
				setState(4855);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULL) {
					{
					setState(4852);
					match(NULL);
					setState(4853);
					match(ON);
					setState(4854);
					match(EMPTY);
					}
				}

				setState(4857);
				match(RIGHT_PAREN);
				setState(4860);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
				case 1:
					{
					setState(4858);
					match(PERIOD);
					setState(4859);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(4862);
				match(XMLROOT);
				setState(4863);
				match(LEFT_PAREN);
				setState(4864);
				concatenation();
				setState(4867);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,606,_ctx) ) {
				case 1:
					{
					setState(4865);
					match(COMMA);
					setState(4866);
					xmlroot_param_version_part();
					}
					break;
				}
				setState(4871);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4869);
					match(COMMA);
					setState(4870);
					xmlroot_param_standalone_part();
					}
				}

				setState(4873);
				match(RIGHT_PAREN);
				setState(4876);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,608,_ctx) ) {
				case 1:
					{
					setState(4874);
					match(PERIOD);
					setState(4875);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(4878);
				match(XMLSERIALIZE);
				setState(4879);
				match(LEFT_PAREN);
				setState(4880);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4881);
				concatenation();
				setState(4884);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4882);
					match(AS);
					setState(4883);
					type_spec();
					}
				}

				setState(4887);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENCODING) {
					{
					setState(4886);
					xmlserialize_param_enconding_part();
					}
				}

				setState(4890);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERSION) {
					{
					setState(4889);
					xmlserialize_param_version_part();
					}
				}

				setState(4893);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDENT || _la==NO) {
					{
					setState(4892);
					xmlserialize_param_ident_part();
					}
				}

				setState(4897);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HIDE || _la==SHOW) {
					{
					setState(4895);
					_la = _input.LA(1);
					if ( !(_la==HIDE || _la==SHOW) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4896);
					match(DEFAULTS);
					}
				}

				setState(4899);
				match(RIGHT_PAREN);
				setState(4902);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,614,_ctx) ) {
				case 1:
					{
					setState(4900);
					match(PERIOD);
					setState(4901);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(4904);
				match(XMLTABLE);
				setState(4905);
				match(LEFT_PAREN);
				setState(4907);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,615,_ctx) ) {
				case 1:
					{
					setState(4906);
					xml_namespaces_clause();
					}
					break;
				}
				setState(4909);
				concatenation();
				setState(4911);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4910);
					xml_passing_clause();
					}
				}

				setState(4918);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMNS) {
					{
					setState(4913);
					match(COLUMNS);
					setState(4914);
					xml_table_column();
					{
					setState(4915);
					match(COMMA);
					setState(4916);
					xml_table_column();
					}
					}
				}

				setState(4920);
				match(RIGHT_PAREN);
				setState(4923);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,618,_ctx) ) {
				case 1:
					{
					setState(4921);
					match(PERIOD);
					setState(4922);
					general_element_part();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode AVG() { return getToken(PlSqlParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(PlSqlParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(PlSqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(PlSqlParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(PlSqlParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(PlSqlParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(PlSqlParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(PlSqlParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(PlSqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(PlSqlParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(PlSqlParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(PlSqlParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(PlSqlParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(PlSqlParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(PlSqlParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(PlSqlParser.COVAR_, 0); }
		public Over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOver_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOver_clause_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitOver_clause_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clause_keywordContext over_clause_keyword() throws RecognitionException {
		Over_clause_keywordContext _localctx = new Over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4927);
			_la = _input.LA(1);
			if ( !(((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (AVG - 473)) | (1L << (CORR - 473)) | (1L << (COVAR_ - 473)) | (1L << (LAG - 473)) | (1L << (LEAD - 473)) | (1L << (MAX - 473)) | (1L << (MEDIAN - 473)) | (1L << (MIN - 473)) | (1L << (NTILE - 473)) | (1L << (RATIO_TO_REPORT - 473)) | (1L << (REGR_ - 473)) | (1L << (ROW_NUMBER - 473)) | (1L << (SUM - 473)) | (1L << (STDDEV - 473)) | (1L << (VAR_ - 473)) | (1L << (VARIANCE - 473)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode CUME_DIST() { return getToken(PlSqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PlSqlParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(PlSqlParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(PlSqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(PlSqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(PlSqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(PlSqlParser.RANK, 0); }
		public Within_or_over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWithin_or_over_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWithin_or_over_clause_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitWithin_or_over_clause_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Within_or_over_clause_keywordContext within_or_over_clause_keyword() throws RecognitionException {
		Within_or_over_clause_keywordContext _localctx = new Within_or_over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_within_or_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4929);
			_la = _input.LA(1);
			if ( !(((((_la - 466)) & ~0x3f) == 0 && ((1L << (_la - 466)) & ((1L << (CUME_DIST - 466)) | (1L << (DENSE_RANK - 466)) | (1L << (LISTAGG - 466)) | (1L << (PERCENT_RANK - 466)) | (1L << (PERCENTILE_CONT - 466)) | (1L << (PERCENTILE_DISC - 466)) | (1L << (RANK - 466)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_prediction_function_keywordContext extends ParserRuleContext {
		public TerminalNode PREDICTION() { return getToken(PlSqlParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(PlSqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(PlSqlParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(PlSqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(PlSqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(PlSqlParser.PREDICTION_SET, 0); }
		public Standard_prediction_function_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_prediction_function_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterStandard_prediction_function_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitStandard_prediction_function_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitStandard_prediction_function_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Standard_prediction_function_keywordContext standard_prediction_function_keyword() throws RecognitionException {
		Standard_prediction_function_keywordContext _localctx = new Standard_prediction_function_keywordContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_standard_prediction_function_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4931);
			_la = _input.LA(1);
			if ( !(((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (PREDICTION - 460)) | (1L << (PREDICTION_BOUNDS - 460)) | (1L << (PREDICTION_COST - 460)) | (1L << (PREDICTION_DETAILS - 460)) | (1L << (PREDICTION_PROBABILITY - 460)) | (1L << (PREDICTION_SET - 460)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(PlSqlParser.OVER, 0); }
		public Query_partition_clauseContext query_partition_clause() {
			return getRuleContext(Query_partition_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Windowing_clauseContext windowing_clause() {
			return getRuleContext(Windowing_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOver_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4933);
			match(OVER);
			setState(4934);
			match(LEFT_PAREN);
			setState(4936);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4935);
				query_partition_clause();
				}
			}

			setState(4942);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(4938);
				order_by_clause();
				setState(4940);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RANGE || _la==ROWS) {
					{
					setState(4939);
					windowing_clause();
					}
				}

				}
			}

			setState(4944);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_clauseContext extends ParserRuleContext {
		public Windowing_typeContext windowing_type() {
			return getRuleContext(Windowing_typeContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(PlSqlParser.BETWEEN, 0); }
		public List<Windowing_elementsContext> windowing_elements() {
			return getRuleContexts(Windowing_elementsContext.class);
		}
		public Windowing_elementsContext windowing_elements(int i) {
			return getRuleContext(Windowing_elementsContext.class,i);
		}
		public TerminalNode AND() { return getToken(PlSqlParser.AND, 0); }
		public Windowing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWindowing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWindowing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitWindowing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Windowing_clauseContext windowing_clause() throws RecognitionException {
		Windowing_clauseContext _localctx = new Windowing_clauseContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_windowing_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4946);
			windowing_type();
			setState(4953);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BETWEEN:
				{
				setState(4947);
				match(BETWEEN);
				setState(4948);
				windowing_elements();
				setState(4949);
				match(AND);
				setState(4950);
				windowing_elements();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4952);
				windowing_elements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_typeContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public Windowing_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWindowing_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWindowing_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitWindowing_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Windowing_typeContext windowing_type() throws RecognitionException {
		Windowing_typeContext _localctx = new Windowing_typeContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_windowing_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4955);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_elementsContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(PlSqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(PlSqlParser.PRECEDING, 0); }
		public TerminalNode CURRENT() { return getToken(PlSqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode FOLLOWING() { return getToken(PlSqlParser.FOLLOWING, 0); }
		public Windowing_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWindowing_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWindowing_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitWindowing_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Windowing_elementsContext windowing_elements() throws RecognitionException {
		Windowing_elementsContext _localctx = new Windowing_elementsContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_windowing_elements);
		int _la;
		try {
			setState(4964);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,624,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4957);
				match(UNBOUNDED);
				setState(4958);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4959);
				match(CURRENT);
				setState(4960);
				match(ROW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4961);
				concatenation();
				setState(4962);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public List<Using_elementContext> using_element() {
			return getRuleContexts(Using_elementContext.class);
		}
		public Using_elementContext using_element(int i) {
			return getRuleContext(Using_elementContext.class,i);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUsing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUsing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitUsing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_using_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4966);
			match(USING);
			setState(4976);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(4967);
				match(ASTERISK);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4968);
				using_element();
				setState(4973);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,625,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4969);
						match(COMMA);
						setState(4970);
						using_element();
						}
						} 
					}
					setState(4975);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,625,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public TerminalNode IN() { return getToken(PlSqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Using_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterUsing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitUsing_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitUsing_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_elementContext using_element() throws RecognitionException {
		Using_elementContext _localctx = new Using_elementContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_using_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4983);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,628,_ctx) ) {
			case 1:
				{
				setState(4978);
				match(IN);
				setState(4980);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,627,_ctx) ) {
				case 1:
					{
					setState(4979);
					match(OUT);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(4982);
				match(OUT);
				}
				break;
			}
			setState(4985);
			select_list_elements();
			setState(4987);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,629,_ctx) ) {
			case 1:
				{
				setState(4986);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collect_order_by_partContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(PlSqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Collect_order_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collect_order_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCollect_order_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCollect_order_by_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCollect_order_by_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collect_order_by_partContext collect_order_by_part() throws RecognitionException {
		Collect_order_by_partContext _localctx = new Collect_order_by_partContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_collect_order_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4989);
			match(ORDER);
			setState(4990);
			match(BY);
			setState(4991);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_partContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(PlSqlParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(PlSqlParser.GROUP, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Within_or_over_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWithin_or_over_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWithin_or_over_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitWithin_or_over_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Within_or_over_partContext within_or_over_part() throws RecognitionException {
		Within_or_over_partContext _localctx = new Within_or_over_partContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_within_or_over_part);
		try {
			setState(5000);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(4993);
				match(WITHIN);
				setState(4994);
				match(GROUP);
				setState(4995);
				match(LEFT_PAREN);
				setState(4996);
				order_by_clause();
				setState(4997);
				match(RIGHT_PAREN);
				}
				break;
			case OVER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4999);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_matrix_clauseContext extends ParserRuleContext {
		public TerminalNode COST() { return getToken(PlSqlParser.COST, 0); }
		public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
		public List<Cost_class_nameContext> cost_class_name() {
			return getRuleContexts(Cost_class_nameContext.class);
		}
		public Cost_class_nameContext cost_class_name(int i) {
			return getRuleContext(Cost_class_nameContext.class,i);
		}
		public TerminalNode VALUES() { return getToken(PlSqlParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode AUTO() { return getToken(PlSqlParser.AUTO, 0); }
		public Cost_matrix_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_matrix_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCost_matrix_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCost_matrix_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCost_matrix_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cost_matrix_clauseContext cost_matrix_clause() throws RecognitionException {
		Cost_matrix_clauseContext _localctx = new Cost_matrix_clauseContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_cost_matrix_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5002);
			match(COST);
			setState(5020);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MODEL:
				{
				setState(5003);
				match(MODEL);
				setState(5005);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTO) {
					{
					setState(5004);
					match(AUTO);
					}
				}

				}
				break;
			case LEFT_PAREN:
				{
				setState(5007);
				match(LEFT_PAREN);
				setState(5008);
				cost_class_name();
				setState(5013);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5009);
					match(COMMA);
					setState(5010);
					cost_class_name();
					}
					}
					setState(5015);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5016);
				match(RIGHT_PAREN);
				setState(5017);
				match(VALUES);
				setState(5018);
				expression_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_passing_clauseContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(PlSqlParser.PASSING, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode BY() { return getToken(PlSqlParser.BY, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Xml_passing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_passing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXml_passing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXml_passing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitXml_passing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_passing_clauseContext xml_passing_clause() throws RecognitionException {
		Xml_passing_clauseContext _localctx = new Xml_passing_clauseContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_xml_passing_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5022);
			match(PASSING);
			setState(5025);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BY) {
				{
				setState(5023);
				match(BY);
				setState(5024);
				match(VALUE);
				}
			}

			setState(5027);
			expression();
			setState(5029);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
				{
				setState(5028);
				column_alias();
				}
			}

			{
			setState(5031);
			match(COMMA);
			setState(5032);
			expression();
			setState(5034);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,636,_ctx) ) {
			case 1:
				{
				setState(5033);
				column_alias();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attributes_clauseContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(PlSqlParser.XMLATTRIBUTES, 0); }
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(PlSqlParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(PlSqlParser.SCHEMACHECK, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(PlSqlParser.NOSCHEMACHECK, 0); }
		public Xml_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXml_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXml_attributes_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitXml_attributes_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attributes_clauseContext xml_attributes_clause() throws RecognitionException {
		Xml_attributes_clauseContext _localctx = new Xml_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_xml_attributes_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5036);
			match(XMLATTRIBUTES);
			setState(5037);
			match(LEFT_PAREN);
			setState(5039);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,637,_ctx) ) {
			case 1:
				{
				setState(5038);
				_la = _input.LA(1);
				if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(5042);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,638,_ctx) ) {
			case 1:
				{
				setState(5041);
				_la = _input.LA(1);
				if ( !(_la==NOSCHEMACHECK || _la==SCHEMACHECK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(5044);
			xml_multiuse_expression_element();
			setState(5049);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5045);
				match(COMMA);
				setState(5046);
				xml_multiuse_expression_element();
				}
				}
				setState(5051);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5052);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_namespaces_clauseContext extends ParserRuleContext {
		public TerminalNode XMLNAMESPACES() { return getToken(PlSqlParser.XMLNAMESPACES, 0); }
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_namespaces_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespaces_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXml_namespaces_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXml_namespaces_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitXml_namespaces_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_namespaces_clauseContext xml_namespaces_clause() throws RecognitionException {
		Xml_namespaces_clauseContext _localctx = new Xml_namespaces_clauseContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_xml_namespaces_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5054);
			match(XMLNAMESPACES);
			setState(5055);
			match(LEFT_PAREN);
			setState(5059);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,640,_ctx) ) {
			case 1:
				{
				setState(5056);
				concatenation();
				setState(5057);
				column_alias();
				}
				break;
			}
			setState(5067);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5061);
				match(COMMA);
				setState(5062);
				concatenation();
				setState(5063);
				column_alias();
				}
				}
				setState(5069);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5071);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(5070);
				xml_general_default_part();
				}
			}

			setState(5073);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_table_columnContext extends ParserRuleContext {
		public Xml_column_nameContext xml_column_name() {
			return getRuleContext(Xml_column_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(PlSqlParser.ORDINALITY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode PATH() { return getToken(PlSqlParser.PATH, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_table_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_table_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXml_table_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXml_table_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitXml_table_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_table_columnContext xml_table_column() throws RecognitionException {
		Xml_table_columnContext _localctx = new Xml_table_columnContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_xml_table_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5075);
			xml_column_name();
			setState(5086);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(5076);
				match(FOR);
				setState(5077);
				match(ORDINALITY);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(5078);
				type_spec();
				setState(5081);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(5079);
					match(PATH);
					setState(5080);
					concatenation();
					}
				}

				setState(5084);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(5083);
					xml_general_default_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_general_default_partContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_general_default_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_general_default_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXml_general_default_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXml_general_default_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitXml_general_default_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_general_default_partContext xml_general_default_part() throws RecognitionException {
		Xml_general_default_partContext _localctx = new Xml_general_default_partContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_xml_general_default_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5088);
			match(DEFAULT);
			setState(5089);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_multiuse_expression_elementContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode EVALNAME() { return getToken(PlSqlParser.EVALNAME, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_multiuse_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_multiuse_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXml_multiuse_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXml_multiuse_expression_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitXml_multiuse_expression_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_multiuse_expression_elementContext xml_multiuse_expression_element() throws RecognitionException {
		Xml_multiuse_expression_elementContext _localctx = new Xml_multiuse_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_xml_multiuse_expression_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5091);
			expression();
			setState(5098);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(5092);
				match(AS);
				setState(5096);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,646,_ctx) ) {
				case 1:
					{
					setState(5093);
					id_expression();
					}
					break;
				case 2:
					{
					setState(5094);
					match(EVALNAME);
					setState(5095);
					concatenation();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(PlSqlParser.VERSION, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Xmlroot_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXmlroot_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXmlroot_param_version_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitXmlroot_param_version_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlroot_param_version_partContext xmlroot_param_version_part() throws RecognitionException {
		Xmlroot_param_version_partContext _localctx = new Xmlroot_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_xmlroot_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5100);
			match(VERSION);
			setState(5104);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,648,_ctx) ) {
			case 1:
				{
				setState(5101);
				match(NO);
				setState(5102);
				match(VALUE);
				}
				break;
			case 2:
				{
				setState(5103);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_standalone_partContext extends ParserRuleContext {
		public TerminalNode STANDALONE() { return getToken(PlSqlParser.STANDALONE, 0); }
		public TerminalNode YES() { return getToken(PlSqlParser.YES, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public Xmlroot_param_standalone_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_standalone_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXmlroot_param_standalone_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXmlroot_param_standalone_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitXmlroot_param_standalone_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() throws RecognitionException {
		Xmlroot_param_standalone_partContext _localctx = new Xmlroot_param_standalone_partContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_xmlroot_param_standalone_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5106);
			match(STANDALONE);
			setState(5112);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case YES:
				{
				setState(5107);
				match(YES);
				}
				break;
			case NO:
				{
				setState(5108);
				match(NO);
				setState(5110);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(5109);
					match(VALUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_enconding_partContext extends ParserRuleContext {
		public TerminalNode ENCODING() { return getToken(PlSqlParser.ENCODING, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xmlserialize_param_enconding_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_enconding_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXmlserialize_param_enconding_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXmlserialize_param_enconding_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitXmlserialize_param_enconding_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() throws RecognitionException {
		Xmlserialize_param_enconding_partContext _localctx = new Xmlserialize_param_enconding_partContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_xmlserialize_param_enconding_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5114);
			match(ENCODING);
			setState(5115);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(PlSqlParser.VERSION, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xmlserialize_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXmlserialize_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXmlserialize_param_version_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitXmlserialize_param_version_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlserialize_param_version_partContext xmlserialize_param_version_part() throws RecognitionException {
		Xmlserialize_param_version_partContext _localctx = new Xmlserialize_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_xmlserialize_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5117);
			match(VERSION);
			setState(5118);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_ident_partContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode INDENT() { return getToken(PlSqlParser.INDENT, 0); }
		public TerminalNode SIZE() { return getToken(PlSqlParser.SIZE, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xmlserialize_param_ident_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_ident_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXmlserialize_param_ident_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXmlserialize_param_ident_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitXmlserialize_param_ident_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() throws RecognitionException {
		Xmlserialize_param_ident_partContext _localctx = new Xmlserialize_param_ident_partContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_xmlserialize_param_ident_part);
		int _la;
		try {
			setState(5128);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(5120);
				match(NO);
				setState(5121);
				match(INDENT);
				}
				break;
			case INDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5122);
				match(INDENT);
				setState(5126);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIZE) {
					{
					setState(5123);
					match(SIZE);
					setState(5124);
					match(EQUALS_OP);
					setState(5125);
					concatenation();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_plus_commandContext extends ParserRuleContext {
		public Whenever_commandContext whenever_command() {
			return getRuleContext(Whenever_commandContext.class,0);
		}
		public Exit_commandContext exit_command() {
			return getRuleContext(Exit_commandContext.class,0);
		}
		public Prompt_commandContext prompt_command() {
			return getRuleContext(Prompt_commandContext.class,0);
		}
		public Set_commandContext set_command() {
			return getRuleContext(Set_commandContext.class,0);
		}
		public Show_errors_commandContext show_errors_command() {
			return getRuleContext(Show_errors_commandContext.class,0);
		}
		public Start_commandContext start_command() {
			return getRuleContext(Start_commandContext.class,0);
		}
		public Sql_plus_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_plus_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSql_plus_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSql_plus_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSql_plus_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_plus_commandContext sql_plus_command() throws RecognitionException {
		Sql_plus_commandContext _localctx = new Sql_plus_commandContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_sql_plus_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5137);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SOLIDUS:
				{
				setState(5130);
				match(SOLIDUS);
				}
				break;
			case WHENEVER:
				{
				setState(5131);
				whenever_command();
				}
				break;
			case EXIT:
				{
				setState(5132);
				exit_command();
				}
				break;
			case PROMPT:
				{
				setState(5133);
				prompt_command();
				}
				break;
			case SET:
				{
				setState(5134);
				set_command();
				}
				break;
			case SHOW:
				{
				setState(5135);
				show_errors_command();
				}
				break;
			case START_CMD:
				{
				setState(5136);
				start_command();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5140);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,654,_ctx) ) {
			case 1:
				{
				setState(5139);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Whenever_commandContext extends ParserRuleContext {
		public TerminalNode WHENEVER() { return getToken(PlSqlParser.WHENEVER, 0); }
		public TerminalNode SQLERROR() { return getToken(PlSqlParser.SQLERROR, 0); }
		public TerminalNode OSERROR() { return getToken(PlSqlParser.OSERROR, 0); }
		public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
		public TerminalNode CONTINUE() { return getToken(PlSqlParser.CONTINUE, 0); }
		public TerminalNode SUCCESS() { return getToken(PlSqlParser.SUCCESS, 0); }
		public TerminalNode FAILURE() { return getToken(PlSqlParser.FAILURE, 0); }
		public TerminalNode WARNING() { return getToken(PlSqlParser.WARNING, 0); }
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode NONE() { return getToken(PlSqlParser.NONE, 0); }
		public Whenever_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenever_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWhenever_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWhenever_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitWhenever_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Whenever_commandContext whenever_command() throws RecognitionException {
		Whenever_commandContext _localctx = new Whenever_commandContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_whenever_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5142);
			match(WHENEVER);
			setState(5143);
			_la = _input.LA(1);
			if ( !(_la==OSERROR || _la==SQLERROR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5149);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXIT:
				{
				setState(5144);
				match(EXIT);
				setState(5145);
				_la = _input.LA(1);
				if ( !(_la==FAILURE || _la==SUCCESS || _la==WARNING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5146);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case CONTINUE:
				{
				setState(5147);
				match(CONTINUE);
				setState(5148);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==NONE || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public List<Regular_idContext> regular_id() {
			return getRuleContexts(Regular_idContext.class);
		}
		public Regular_idContext regular_id(int i) {
			return getRuleContext(Regular_idContext.class,i);
		}
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public TerminalNode ON() { return getToken(PlSqlParser.ON, 0); }
		public TerminalNode OFF() { return getToken(PlSqlParser.OFF, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Set_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSet_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSet_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSet_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_commandContext set_command() throws RecognitionException {
		Set_commandContext _localctx = new Set_commandContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_set_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5151);
			match(SET);
			setState(5152);
			regular_id();
			setState(5158);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,656,_ctx) ) {
			case 1:
				{
				setState(5153);
				match(CHAR_STRING);
				}
				break;
			case 2:
				{
				setState(5154);
				match(ON);
				}
				break;
			case 3:
				{
				setState(5155);
				match(OFF);
				}
				break;
			case 4:
				{
				setState(5156);
				numeric();
				}
				break;
			case 5:
				{
				setState(5157);
				regular_id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_commandContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
		public Exit_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterExit_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitExit_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitExit_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exit_commandContext exit_command() throws RecognitionException {
		Exit_commandContext _localctx = new Exit_commandContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_exit_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5160);
			match(EXIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prompt_commandContext extends ParserRuleContext {
		public TerminalNode PROMPT() { return getToken(PlSqlParser.PROMPT, 0); }
		public Prompt_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prompt_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPrompt_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPrompt_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitPrompt_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prompt_commandContext prompt_command() throws RecognitionException {
		Prompt_commandContext _localctx = new Prompt_commandContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_prompt_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5162);
			match(PROMPT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Show_errors_commandContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(PlSqlParser.SHOW, 0); }
		public TerminalNode ERR() { return getToken(PlSqlParser.ERR, 0); }
		public TerminalNode ERRORS() { return getToken(PlSqlParser.ERRORS, 0); }
		public Show_errors_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_show_errors_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterShow_errors_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitShow_errors_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitShow_errors_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Show_errors_commandContext show_errors_command() throws RecognitionException {
		Show_errors_commandContext _localctx = new Show_errors_commandContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_show_errors_command);
		try {
			setState(5168);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,657,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5164);
				match(SHOW);
				setState(5165);
				match(ERR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5166);
				match(SHOW);
				setState(5167);
				match(ERRORS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_commandContext extends ParserRuleContext {
		public TerminalNode START_CMD() { return getToken(PlSqlParser.START_CMD, 0); }
		public Start_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterStart_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitStart_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitStart_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Start_commandContext start_command() throws RecognitionException {
		Start_commandContext _localctx = new Start_commandContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_start_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5170);
			match(START_CMD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_extension_clauseContext extends ParserRuleContext {
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode SUBPARTITION() { return getToken(PlSqlParser.SUBPARTITION, 0); }
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode FOR() { return getToken(PlSqlParser.FOR, 0); }
		public Partition_extension_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_extension_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPartition_extension_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPartition_extension_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitPartition_extension_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_extension_clauseContext partition_extension_clause() throws RecognitionException {
		Partition_extension_clauseContext _localctx = new Partition_extension_clauseContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_partition_extension_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5172);
			_la = _input.LA(1);
			if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5174);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5173);
				match(FOR);
				}
			}

			setState(5176);
			expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_aliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		public TerminalNode AS() { return getToken(PlSqlParser.AS, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterColumn_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitColumn_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitColumn_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_column_alias);
		int _la;
		try {
			setState(5186);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5179);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5178);
					match(AS);
					}
				}

				setState(5183);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(5181);
					identifier();
					}
					break;
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5182);
					alias_quoted_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5185);
				match(AS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_aliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTable_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_table_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5190);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5188);
				identifier();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				{
				setState(5189);
				alias_quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alias_quoted_stringContext extends ParserRuleContext {
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Alias_quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAlias_quoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAlias_quoted_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitAlias_quoted_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alias_quoted_stringContext alias_quoted_string() throws RecognitionException {
		Alias_quoted_stringContext _localctx = new Alias_quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_alias_quoted_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5192);
			quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(PlSqlParser.WHERE, 0); }
		public Current_of_clauseContext current_of_clause() {
			return getRuleContext(Current_of_clauseContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitWhere_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5194);
			match(WHERE);
			setState(5197);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
				{
				setState(5195);
				current_of_clause();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COALESCE:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case DECODE:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case NVL:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROUND:
			case ROW_NUMBER:
			case SUBSTR:
			case TO_CHAR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case LEAST:
			case GREATEST:
			case TO_DATE:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5196);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Current_of_clauseContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(PlSqlParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(PlSqlParser.OF, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Current_of_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_current_of_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCurrent_of_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCurrent_of_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCurrent_of_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Current_of_clauseContext current_of_clause() throws RecognitionException {
		Current_of_clauseContext _localctx = new Current_of_clauseContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_current_of_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5199);
			match(CURRENT);
			setState(5200);
			match(OF);
			setState(5201);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(PlSqlParser.INTO, 0); }
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public TerminalNode BULK() { return getToken(PlSqlParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitInto_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitInto_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_into_clause);
		int _la;
		try {
			setState(5223);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				enterOuterAlt(_localctx, 1);
				{
				setState(5203);
				match(INTO);
				setState(5204);
				variable_name();
				setState(5209);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5205);
					match(COMMA);
					setState(5206);
					variable_name();
					}
					}
					setState(5211);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case BULK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5212);
				match(BULK);
				setState(5213);
				match(COLLECT);
				setState(5214);
				match(INTO);
				setState(5215);
				variable_name();
				setState(5220);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5216);
					match(COMMA);
					setState(5217);
					variable_name();
					}
					}
					setState(5222);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_column_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Xml_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterXml_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitXml_column_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitXml_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_column_nameContext xml_column_name() throws RecognitionException {
		Xml_column_nameContext _localctx = new Xml_column_nameContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_xml_column_name);
		try {
			setState(5227);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5225);
				identifier();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5226);
				quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_class_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Cost_class_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_class_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCost_class_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCost_class_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCost_class_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cost_class_nameContext cost_class_name() throws RecognitionException {
		Cost_class_nameContext _localctx = new Cost_class_nameContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_cost_class_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5229);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAttribute_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAttribute_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitAttribute_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_nameContext attribute_name() throws RecognitionException {
		Attribute_nameContext _localctx = new Attribute_nameContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_attribute_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5231);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSavepoint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSavepoint_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSavepoint_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Savepoint_nameContext savepoint_name() throws RecognitionException {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_savepoint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5233);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_segment_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Rollback_segment_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_segment_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRollback_segment_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRollback_segment_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitRollback_segment_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_segment_nameContext rollback_segment_name() throws RecognitionException {
		Rollback_segment_nameContext _localctx = new Rollback_segment_nameContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_rollback_segment_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5235);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_var_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Table_var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_var_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_var_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTable_var_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_var_nameContext table_var_name() throws RecognitionException {
		Table_var_nameContext _localctx = new Table_var_nameContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_table_var_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5237);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSchema_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSchema_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSchema_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_nameContext schema_name() throws RecognitionException {
		Schema_nameContext _localctx = new Schema_nameContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_schema_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5239);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Routine_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRoutine_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRoutine_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitRoutine_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Routine_nameContext routine_name() throws RecognitionException {
		Routine_nameContext _localctx = new Routine_nameContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_routine_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5241);
			identifier();
			setState(5246);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5242);
				match(PERIOD);
				setState(5243);
				id_expression();
				}
				}
				setState(5248);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5251);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(5249);
				match(AT_SIGN);
				setState(5250);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Package_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPackage_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPackage_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitPackage_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_nameContext package_name() throws RecognitionException {
		Package_nameContext _localctx = new Package_nameContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_package_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5253);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implementation_type_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Implementation_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implementation_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterImplementation_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitImplementation_type_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitImplementation_type_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Implementation_type_nameContext implementation_type_name() throws RecognitionException {
		Implementation_type_nameContext _localctx = new Implementation_type_nameContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_implementation_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5255);
			identifier();
			setState(5258);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5256);
				match(PERIOD);
				setState(5257);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Parameter_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterParameter_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitParameter_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitParameter_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_nameContext parameter_name() throws RecognitionException {
		Parameter_nameContext _localctx = new Parameter_nameContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_parameter_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5260);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_model_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Reference_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterReference_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitReference_model_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitReference_model_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_model_nameContext reference_model_name() throws RecognitionException {
		Reference_model_nameContext _localctx = new Reference_model_nameContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_reference_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5262);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_model_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Main_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterMain_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitMain_model_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitMain_model_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Main_model_nameContext main_model_name() throws RecognitionException {
		Main_model_nameContext _localctx = new Main_model_nameContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_main_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5264);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_function_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Aggregate_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterAggregate_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitAggregate_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitAggregate_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_function_nameContext aggregate_function_name() throws RecognitionException {
		Aggregate_function_nameContext _localctx = new Aggregate_function_nameContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_aggregate_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5266);
			identifier();
			setState(5271);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5267);
				match(PERIOD);
				setState(5268);
				id_expression();
				}
				}
				setState(5273);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Query_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterQuery_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitQuery_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitQuery_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_nameContext query_name() throws RecognitionException {
		Query_nameContext _localctx = new Query_nameContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_query_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5274);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConstraint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConstraint_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitConstraint_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_nameContext constraint_name() throws RecognitionException {
		Constraint_nameContext _localctx = new Constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_constraint_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5276);
			identifier();
			setState(5281);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5277);
				match(PERIOD);
				setState(5278);
				id_expression();
				}
				}
				setState(5283);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5286);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(5284);
				match(AT_SIGN);
				setState(5285);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Label_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLabel_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLabel_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitLabel_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Label_nameContext label_name() throws RecognitionException {
		Label_nameContext _localctx = new Label_nameContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_label_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5288);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitType_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_nameContext type_name() throws RecognitionException {
		Type_nameContext _localctx = new Type_nameContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5290);
			id_expression();
			setState(5295);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5291);
				match(PERIOD);
				setState(5292);
				id_expression();
				}
				}
				setState(5297);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Sequence_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSequence_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSequence_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSequence_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_nameContext sequence_name() throws RecognitionException {
		Sequence_nameContext _localctx = new Sequence_nameContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_sequence_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5298);
			id_expression();
			setState(5303);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5299);
				match(PERIOD);
				setState(5300);
				id_expression();
				}
				}
				setState(5305);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Exception_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterException_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitException_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitException_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_nameContext exception_name() throws RecognitionException {
		Exception_nameContext _localctx = new Exception_nameContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_exception_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5306);
			identifier();
			setState(5311);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5307);
				match(PERIOD);
				setState(5308);
				id_expression();
				}
				}
				setState(5313);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunction_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunction_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitFunction_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_nameContext function_name() throws RecognitionException {
		Function_nameContext _localctx = new Function_nameContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5314);
			identifier();
			setState(5317);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5315);
				match(PERIOD);
				setState(5316);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Procedure_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterProcedure_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitProcedure_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitProcedure_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_nameContext procedure_name() throws RecognitionException {
		Procedure_nameContext _localctx = new Procedure_nameContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_procedure_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5319);
			identifier();
			setState(5322);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5320);
				match(PERIOD);
				setState(5321);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTrigger_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTrigger_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTrigger_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_nameContext trigger_name() throws RecognitionException {
		Trigger_nameContext _localctx = new Trigger_nameContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_trigger_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5324);
			identifier();
			setState(5327);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5325);
				match(PERIOD);
				setState(5326);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Variable_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterVariable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitVariable_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitVariable_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_nameContext variable_name() throws RecognitionException {
		Variable_nameContext _localctx = new Variable_nameContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_variable_name);
		int _la;
		try {
			setState(5339);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5331);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTRODUCER) {
					{
					setState(5329);
					match(INTRODUCER);
					setState(5330);
					char_set_name();
					}
				}

				setState(5333);
				id_expression();
				setState(5336);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(5334);
					match(PERIOD);
					setState(5335);
					id_expression();
					}
				}

				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5338);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterIndex_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitIndex_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitIndex_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_nameContext index_name() throws RecognitionException {
		Index_nameContext _localctx = new Index_nameContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_index_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5341);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_cursor_name);
		try {
			setState(5345);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5343);
				identifier();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5344);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Record_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRecord_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRecord_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitRecord_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_nameContext record_name() throws RecognitionException {
		Record_nameContext _localctx = new Record_nameContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_record_name);
		try {
			setState(5349);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5347);
				identifier();
				}
				break;
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5348);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Collection_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterCollection_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitCollection_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitCollection_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collection_nameContext collection_name() throws RecognitionException {
		Collection_nameContext _localctx = new Collection_nameContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_collection_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5351);
			identifier();
			setState(5354);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5352);
				match(PERIOD);
				setState(5353);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Link_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Link_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_link_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLink_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLink_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitLink_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Link_nameContext link_name() throws RecognitionException {
		Link_nameContext _localctx = new Link_nameContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_link_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5356);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterColumn_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitColumn_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitColumn_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_column_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5358);
			identifier();
			setState(5363);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5359);
				match(PERIOD);
				setState(5360);
				id_expression();
				}
				}
				setState(5365);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tableview_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Tableview_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableview_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTableview_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTableview_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTableview_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tableview_nameContext tableview_name() throws RecognitionException {
		Tableview_nameContext _localctx = new Tableview_nameContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_tableview_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5366);
			identifier();
			setState(5369);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
			case 1:
				{
				setState(5367);
				match(PERIOD);
				setState(5368);
				id_expression();
				}
				break;
			}
			setState(5374);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,688,_ctx) ) {
			case 1:
				{
				setState(5371);
				match(AT_SIGN);
				setState(5372);
				link_name();
				}
				break;
			case 2:
				{
				setState(5373);
				partition_extension_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Char_set_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Char_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_char_set_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterChar_set_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitChar_set_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitChar_set_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Char_set_nameContext char_set_name() throws RecognitionException {
		Char_set_nameContext _localctx = new Char_set_nameContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_char_set_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5376);
			id_expression();
			setState(5381);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5377);
				match(PERIOD);
				setState(5378);
				id_expression();
				}
				}
				setState(5383);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Synonym_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Synonym_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_synonym_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSynonym_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSynonym_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSynonym_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Synonym_nameContext synonym_name() throws RecognitionException {
		Synonym_nameContext _localctx = new Synonym_nameContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_synonym_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5384);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_object_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Schema_object_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_object_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterSchema_object_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitSchema_object_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitSchema_object_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_object_nameContext schema_object_name() throws RecognitionException {
		Schema_object_nameContext _localctx = new Schema_object_nameContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_schema_object_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5386);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Keep_clauseContext extends ParserRuleContext {
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PlSqlParser.DENSE_RANK, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Keep_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keep_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterKeep_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitKeep_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitKeep_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Keep_clauseContext keep_clause() throws RecognitionException {
		Keep_clauseContext _localctx = new Keep_clauseContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_keep_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5388);
			match(KEEP);
			setState(5389);
			match(LEFT_PAREN);
			setState(5390);
			match(DENSE_RANK);
			setState(5391);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5392);
			order_by_clause();
			setState(5393);
			match(RIGHT_PAREN);
			setState(5395);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,690,_ctx) ) {
			case 1:
				{
				setState(5394);
				over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argumentContext extends ParserRuleContext {
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public Function_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunction_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunction_argument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitFunction_argument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argumentContext function_argument() throws RecognitionException {
		Function_argumentContext _localctx = new Function_argumentContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_function_argument);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5397);
			match(LEFT_PAREN);
			setState(5399);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COALESCE) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONNECT_BY_ROOT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DISTINCT - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NOT - 193)) | (1L << (NULL - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NUMERIC - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (PRIOR - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT - 321)) | (1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)) | (1L << (SUBMULTISET - 321)) | (1L << (SUBPARTITION - 321)) | (1L << (SUBSTITUTABLE - 321)) | (1L << (SUBTYPE - 321)) | (1L << (SUCCESS - 321)) | (1L << (SUSPEND - 321)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUE - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (DECODE - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (NVL - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROUND - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TO_CHAR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (LEAST - 453)) | (1L << (GREATEST - 453)) | (1L << (TO_DATE - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (UNSIGNED_INTEGER - 453)) | (1L << (APPROXIMATE_NUM_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (LEFT_PAREN - 453)) | (1L << (PLUS_SIGN - 453)) | (1L << (MINUS_SIGN - 453)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (BINDVAR - 519)) | (1L << (COLON - 519)) | (1L << (INTRODUCER - 519)) | (1L << (REGULAR_ID - 519)))) != 0)) {
				{
				setState(5398);
				argument();
				}
			}

			setState(5405);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5401);
				match(COMMA);
				setState(5402);
				argument();
				}
				}
				setState(5407);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5408);
			match(RIGHT_PAREN);
			setState(5410);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,693,_ctx) ) {
			case 1:
				{
				setState(5409);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_analyticContext extends ParserRuleContext {
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<Respect_or_ignore_nullsContext> respect_or_ignore_nulls() {
			return getRuleContexts(Respect_or_ignore_nullsContext.class);
		}
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls(int i) {
			return getRuleContext(Respect_or_ignore_nullsContext.class,i);
		}
		public Function_argument_analyticContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_analytic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunction_argument_analytic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunction_argument_analytic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitFunction_argument_analytic(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argument_analyticContext function_argument_analytic() throws RecognitionException {
		Function_argument_analyticContext _localctx = new Function_argument_analyticContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_function_argument_analytic);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5412);
			match(LEFT_PAREN);
			setState(5417);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COALESCE) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (CONNECT_BY_ROOT - 65)) | (1L << (CONSTANT - 65)) | (1L << (CONSTRAINT - 65)) | (1L << (CONSTRAINTS - 65)) | (1L << (CONSTRUCTOR - 65)) | (1L << (CONTENT - 65)) | (1L << (CONTEXT - 65)) | (1L << (CONTINUE - 65)) | (1L << (CONVERT - 65)) | (1L << (CORRUPT_XID - 65)) | (1L << (CORRUPT_XID_ALL - 65)) | (1L << (COST - 65)) | (1L << (COUNT - 65)) | (1L << (CROSS - 65)) | (1L << (CUBE - 65)) | (1L << (CURRENT_USER - 65)) | (1L << (CURSOR - 65)) | (1L << (CUSTOMDATUM - 65)) | (1L << (CYCLE - 65)) | (1L << (DATA - 65)) | (1L << (DATABASE - 65)) | (1L << (DATE - 65)) | (1L << (DAY - 65)) | (1L << (DB_ROLE_CHANGE - 65)) | (1L << (DBTIMEZONE - 65)) | (1L << (DDL - 65)) | (1L << (DEBUG - 65)) | (1L << (DEC - 65)) | (1L << (DECIMAL - 65)) | (1L << (DECOMPOSE - 65)) | (1L << (DECREMENT - 65)) | (1L << (DEFAULT - 65)) | (1L << (DEFAULTS - 65)) | (1L << (DEFERRED - 65)) | (1L << (DEFINER - 65)) | (1L << (DETERMINISTIC - 65)) | (1L << (DIMENSION - 65)) | (1L << (DISABLE - 65)) | (1L << (DISASSOCIATE - 65)) | (1L << (DISTINCT - 65)) | (1L << (DOCUMENT - 65)) | (1L << (DOUBLE - 65)) | (1L << (DSINTERVAL_UNCONSTRAINED - 65)) | (1L << (EACH - 65)) | (1L << (ELEMENT - 65)) | (1L << (EMPTY - 65)) | (1L << (ENABLE - 65)) | (1L << (ENCODING - 65)) | (1L << (ENTITYESCAPING - 65)) | (1L << (ERR - 65)) | (1L << (ERRORS - 65)) | (1L << (ESCAPE - 65)) | (1L << (EVALNAME - 65)) | (1L << (EXCEPTION - 65)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (EXCEPTION_INIT - 129)) | (1L << (EXCEPTIONS - 129)) | (1L << (EXCLUDE - 129)) | (1L << (EXECUTE - 129)) | (1L << (EXISTS - 129)) | (1L << (EXIT - 129)) | (1L << (EXPLAIN - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAILURE - 129)) | (1L << (FALSE - 129)) | (1L << (FINAL - 129)) | (1L << (FIRST - 129)) | (1L << (FIRST_VALUE - 129)) | (1L << (FLOAT - 129)) | (1L << (FOLLOWING - 129)) | (1L << (FOLLOWS - 129)) | (1L << (FORALL - 129)) | (1L << (FORCE - 129)) | (1L << (FULL - 129)) | (1L << (FUNCTION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (HIDE - 129)) | (1L << (HOUR - 129)) | (1L << (IGNORE - 129)) | (1L << (IMMEDIATE - 129)) | (1L << (INCLUDE - 129)) | (1L << (INCLUDING - 129)) | (1L << (INCREMENT - 129)) | (1L << (INDENT - 129)) | (1L << (INDEXED - 129)) | (1L << (INDICATOR - 129)) | (1L << (INDICES - 129)) | (1L << (INFINITE - 129)) | (1L << (INLINE - 129)) | (1L << (INNER - 129)) | (1L << (INOUT - 129)) | (1L << (INSTANTIABLE - 129)) | (1L << (INSTEAD - 129)) | (1L << (INT - 129)) | (1L << (INTEGER - 129)) | (1L << (INTERVAL - 129)) | (1L << (INVALIDATE - 129)) | (1L << (ISOLATION - 129)) | (1L << (ITERATE - 129)) | (1L << (JAVA - 129)) | (1L << (JOIN - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (KEEP - 193)) | (1L << (KEY - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)) | (1L << (NOSCHEMACHECK - 193)) | (1L << (NOT - 193)) | (1L << (NULL - 193)) | (1L << (NULLS - 193)) | (1L << (NUMBER - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NUMERIC - 257)) | (1L << (NVARCHAR2 - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (PRIOR - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT - 321)) | (1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)) | (1L << (SUBMULTISET - 321)) | (1L << (SUBPARTITION - 321)) | (1L << (SUBSTITUTABLE - 321)) | (1L << (SUBTYPE - 321)) | (1L << (SUCCESS - 321)) | (1L << (SUSPEND - 321)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUE - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (DECODE - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (NVL - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROUND - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TO_CHAR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (LEAST - 453)) | (1L << (GREATEST - 453)) | (1L << (TO_DATE - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (UNSIGNED_INTEGER - 453)) | (1L << (APPROXIMATE_NUM_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)) | (1L << (LEFT_PAREN - 453)) | (1L << (PLUS_SIGN - 453)) | (1L << (MINUS_SIGN - 453)))) != 0) || ((((_la - 519)) & ~0x3f) == 0 && ((1L << (_la - 519)) & ((1L << (BINDVAR - 519)) | (1L << (COLON - 519)) | (1L << (INTRODUCER - 519)) | (1L << (REGULAR_ID - 519)))) != 0)) {
				{
				setState(5413);
				argument();
				setState(5415);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(5414);
					respect_or_ignore_nulls();
					}
				}

				}
			}

			setState(5426);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5419);
				match(COMMA);
				setState(5420);
				argument();
				setState(5422);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(5421);
					respect_or_ignore_nulls();
					}
				}

				}
				}
				setState(5428);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5429);
			match(RIGHT_PAREN);
			setState(5431);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,698,_ctx) ) {
			case 1:
				{
				setState(5430);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_modelingContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(PlSqlParser.USING, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public List<TerminalNode> NULL() { return getTokens(PlSqlParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(PlSqlParser.NULL, i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Function_argument_modelingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_modeling; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterFunction_argument_modeling(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitFunction_argument_modeling(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitFunction_argument_modeling(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argument_modelingContext function_argument_modeling() throws RecognitionException {
		Function_argument_modelingContext _localctx = new Function_argument_modelingContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_function_argument_modeling);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5433);
			match(LEFT_PAREN);
			setState(5434);
			column_name();
			setState(5447);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5435);
				match(COMMA);
				setState(5438);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
					{
					setState(5436);
					numeric();
					}
					break;
				case NULL:
					{
					setState(5437);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5445);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5440);
					match(COMMA);
					setState(5443);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
						{
						setState(5441);
						numeric();
						}
						break;
					case NULL:
						{
						setState(5442);
						match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
			}

			setState(5449);
			match(USING);
			setState(5469);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,706,_ctx) ) {
			case 1:
				{
				setState(5450);
				tableview_name();
				setState(5451);
				match(PERIOD);
				setState(5452);
				match(ASTERISK);
				}
				break;
			case 2:
				{
				setState(5454);
				match(ASTERISK);
				}
				break;
			case 3:
				{
				setState(5455);
				expression();
				setState(5457);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
					{
					setState(5456);
					column_alias();
					}
				}

				setState(5466);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5459);
					match(COMMA);
					setState(5460);
					expression();
					setState(5462);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)) | (1L << (NATIONAL_CHAR_STRING_LIT - 453)) | (1L << (CHAR_STRING - 453)) | (1L << (DELIMITED_ID - 453)))) != 0) || _la==INTRODUCER || _la==REGULAR_ID) {
						{
						setState(5461);
						column_alias();
						}
					}

					}
					}
					setState(5468);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(5471);
			match(RIGHT_PAREN);
			setState(5473);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,707,_ctx) ) {
			case 1:
				{
				setState(5472);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Respect_or_ignore_nullsContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode RESPECT() { return getToken(PlSqlParser.RESPECT, 0); }
		public TerminalNode IGNORE() { return getToken(PlSqlParser.IGNORE, 0); }
		public Respect_or_ignore_nullsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_respect_or_ignore_nulls; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRespect_or_ignore_nulls(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRespect_or_ignore_nulls(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitRespect_or_ignore_nulls(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Respect_or_ignore_nullsContext respect_or_ignore_nulls() throws RecognitionException {
		Respect_or_ignore_nullsContext _localctx = new Respect_or_ignore_nullsContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_respect_or_ignore_nulls);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5475);
			_la = _input.LA(1);
			if ( !(_la==IGNORE || _la==RESPECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5476);
			match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArgumentContext argument() throws RecognitionException {
		ArgumentContext _localctx = new ArgumentContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5482);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,708,_ctx) ) {
			case 1:
				{
				setState(5478);
				identifier();
				setState(5479);
				match(EQUALS_OP);
				setState(5480);
				match(GREATER_THAN_OP);
				}
				break;
			}
			setState(5484);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_specContext extends ParserRuleContext {
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode PERCENT_ROWTYPE() { return getToken(PlSqlParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(PlSqlParser.PERCENT_TYPE, 0); }
		public Type_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterType_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitType_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitType_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_specContext type_spec() throws RecognitionException {
		Type_specContext _localctx = new Type_specContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_type_spec);
		int _la;
		try {
			setState(5494);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,711,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5486);
				datatype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5488);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,709,_ctx) ) {
				case 1:
					{
					setState(5487);
					match(REF);
					}
					break;
				}
				setState(5490);
				type_name();
				setState(5492);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) {
					{
					setState(5491);
					_la = _input.LA(1);
					if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatatypeContext extends ParserRuleContext {
		public Native_datatype_elementContext native_datatype_element() {
			return getRuleContext(Native_datatype_elementContext.class,0);
		}
		public Precision_partContext precision_part() {
			return getRuleContext(Precision_partContext.class,0);
		}
		public TerminalNode WITH() { return getToken(PlSqlParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public TerminalNode CHARACTER() { return getToken(PlSqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public DatatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datatype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterDatatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitDatatype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitDatatype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatatypeContext datatype() throws RecognitionException {
		DatatypeContext _localctx = new DatatypeContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_datatype);
		int _la;
		try {
			setState(5527);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case CLOB:
			case DATE:
			case DAY:
			case DEC:
			case DECIMAL:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case FLOAT:
			case HOUR:
			case INT:
			case INTEGER:
			case LONG:
			case MINUTE:
			case MLSLABEL:
			case MONTH:
			case NATURAL:
			case NATURALN:
			case NCHAR:
			case NCLOB:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case RAW:
			case REAL:
			case ROWID:
			case SECOND:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SMALLINT:
			case STRING:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case UROWID:
			case VARCHAR:
			case VARCHAR2:
			case YEAR:
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 1);
				{
				setState(5496);
				native_datatype_element();
				setState(5498);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,712,_ctx) ) {
				case 1:
					{
					setState(5497);
					precision_part();
					}
					break;
				}
				setState(5509);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WITH:
					{
					setState(5500);
					match(WITH);
					setState(5502);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LOCAL) {
						{
						setState(5501);
						match(LOCAL);
						}
					}

					setState(5504);
					match(TIME);
					setState(5505);
					match(ZONE);
					}
					break;
				case CHARACTER:
					{
					setState(5506);
					match(CHARACTER);
					setState(5507);
					match(SET);
					setState(5508);
					char_set_name();
					}
					break;
				case EOF:
				case AGGREGATE:
				case AS:
				case AUTHID:
				case CASCADE:
				case CONSTRUCTOR:
				case DEFAULT:
				case DETERMINISTIC:
				case ENCODING:
				case EXTERNAL:
				case FINAL:
				case HIDE:
				case INDENT:
				case INDEX:
				case INDEXED:
				case INSTANTIABLE:
				case INVALIDATE:
				case IS:
				case MAP:
				case MEMBER:
				case NO:
				case NOT:
				case ORDER:
				case OVERRIDING:
				case PARALLEL_ENABLE:
				case PATH:
				case PIPELINED:
				case RANGE:
				case RESULT_CACHE:
				case RETURN:
				case SHOW:
				case STATIC:
				case VERSION:
				case LEFT_PAREN:
				case RIGHT_PAREN:
				case COMMA:
				case ASSIGN_OP:
				case SEMICOLON:
					break;
				default:
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5511);
				match(INTERVAL);
				setState(5512);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==YEAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5517);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(5513);
					match(LEFT_PAREN);
					setState(5514);
					expression();
					setState(5515);
					match(RIGHT_PAREN);
					}
				}

				setState(5519);
				match(TO);
				setState(5520);
				_la = _input.LA(1);
				if ( !(_la==MONTH || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5525);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,716,_ctx) ) {
				case 1:
					{
					setState(5521);
					match(LEFT_PAREN);
					setState(5522);
					expression();
					setState(5523);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Precision_partContext extends ParserRuleContext {
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public TerminalNode CHAR() { return getToken(PlSqlParser.CHAR, 0); }
		public TerminalNode BYTE() { return getToken(PlSqlParser.BYTE, 0); }
		public Precision_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterPrecision_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitPrecision_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitPrecision_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Precision_partContext precision_part() throws RecognitionException {
		Precision_partContext _localctx = new Precision_partContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_precision_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5529);
			match(LEFT_PAREN);
			setState(5530);
			numeric();
			setState(5533);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5531);
				match(COMMA);
				setState(5532);
				numeric();
				}
			}

			setState(5536);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BYTE || _la==CHAR) {
				{
				setState(5535);
				_la = _input.LA(1);
				if ( !(_la==BYTE || _la==CHAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5538);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Native_datatype_elementContext extends ParserRuleContext {
		public TerminalNode BINARY_INTEGER() { return getToken(PlSqlParser.BINARY_INTEGER, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(PlSqlParser.PLS_INTEGER, 0); }
		public TerminalNode NATURAL() { return getToken(PlSqlParser.NATURAL, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(PlSqlParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(PlSqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode NATURALN() { return getToken(PlSqlParser.NATURALN, 0); }
		public TerminalNode POSITIVE() { return getToken(PlSqlParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(PlSqlParser.POSITIVEN, 0); }
		public TerminalNode SIGNTYPE() { return getToken(PlSqlParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(PlSqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode NVARCHAR2() { return getToken(PlSqlParser.NVARCHAR2, 0); }
		public TerminalNode DEC() { return getToken(PlSqlParser.DEC, 0); }
		public TerminalNode INTEGER() { return getToken(PlSqlParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(PlSqlParser.INT, 0); }
		public TerminalNode NUMERIC() { return getToken(PlSqlParser.NUMERIC, 0); }
		public TerminalNode SMALLINT() { return getToken(PlSqlParser.SMALLINT, 0); }
		public TerminalNode NUMBER() { return getToken(PlSqlParser.NUMBER, 0); }
		public TerminalNode DECIMAL() { return getToken(PlSqlParser.DECIMAL, 0); }
		public TerminalNode DOUBLE() { return getToken(PlSqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(PlSqlParser.PRECISION, 0); }
		public TerminalNode FLOAT() { return getToken(PlSqlParser.FLOAT, 0); }
		public TerminalNode REAL() { return getToken(PlSqlParser.REAL, 0); }
		public TerminalNode NCHAR() { return getToken(PlSqlParser.NCHAR, 0); }
		public TerminalNode LONG() { return getToken(PlSqlParser.LONG, 0); }
		public TerminalNode RAW() { return getToken(PlSqlParser.RAW, 0); }
		public TerminalNode CHAR() { return getToken(PlSqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(PlSqlParser.CHARACTER, 0); }
		public TerminalNode VARCHAR2() { return getToken(PlSqlParser.VARCHAR2, 0); }
		public TerminalNode VARCHAR() { return getToken(PlSqlParser.VARCHAR, 0); }
		public TerminalNode STRING() { return getToken(PlSqlParser.STRING, 0); }
		public TerminalNode BOOLEAN() { return getToken(PlSqlParser.BOOLEAN, 0); }
		public TerminalNode DATE() { return getToken(PlSqlParser.DATE, 0); }
		public TerminalNode ROWID() { return getToken(PlSqlParser.ROWID, 0); }
		public TerminalNode UROWID() { return getToken(PlSqlParser.UROWID, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(PlSqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(PlSqlParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(PlSqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(PlSqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(PlSqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(PlSqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode BFILE() { return getToken(PlSqlParser.BFILE, 0); }
		public TerminalNode BLOB() { return getToken(PlSqlParser.BLOB, 0); }
		public TerminalNode CLOB() { return getToken(PlSqlParser.CLOB, 0); }
		public TerminalNode NCLOB() { return getToken(PlSqlParser.NCLOB, 0); }
		public TerminalNode MLSLABEL() { return getToken(PlSqlParser.MLSLABEL, 0); }
		public Native_datatype_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_native_datatype_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNative_datatype_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNative_datatype_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitNative_datatype_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Native_datatype_elementContext native_datatype_element() throws RecognitionException {
		Native_datatype_elementContext _localctx = new Native_datatype_elementContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_native_datatype_element);
		int _la;
		try {
			setState(5600);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5540);
				match(BINARY_INTEGER);
				}
				break;
			case PLS_INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5541);
				match(PLS_INTEGER);
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5542);
				match(NATURAL);
				}
				break;
			case BINARY_FLOAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(5543);
				match(BINARY_FLOAT);
				}
				break;
			case BINARY_DOUBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5544);
				match(BINARY_DOUBLE);
				}
				break;
			case NATURALN:
				enterOuterAlt(_localctx, 6);
				{
				setState(5545);
				match(NATURALN);
				}
				break;
			case POSITIVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5546);
				match(POSITIVE);
				}
				break;
			case POSITIVEN:
				enterOuterAlt(_localctx, 8);
				{
				setState(5547);
				match(POSITIVEN);
				}
				break;
			case SIGNTYPE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5548);
				match(SIGNTYPE);
				}
				break;
			case SIMPLE_INTEGER:
				enterOuterAlt(_localctx, 10);
				{
				setState(5549);
				match(SIMPLE_INTEGER);
				}
				break;
			case NVARCHAR2:
				enterOuterAlt(_localctx, 11);
				{
				setState(5550);
				match(NVARCHAR2);
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 12);
				{
				setState(5551);
				match(DEC);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 13);
				{
				setState(5552);
				match(INTEGER);
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 14);
				{
				setState(5553);
				match(INT);
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 15);
				{
				setState(5554);
				match(NUMERIC);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 16);
				{
				setState(5555);
				match(SMALLINT);
				}
				break;
			case NUMBER:
				enterOuterAlt(_localctx, 17);
				{
				setState(5556);
				match(NUMBER);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 18);
				{
				setState(5557);
				match(DECIMAL);
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 19);
				{
				setState(5558);
				match(DOUBLE);
				setState(5560);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(5559);
					match(PRECISION);
					}
				}

				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 20);
				{
				setState(5562);
				match(FLOAT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 21);
				{
				setState(5563);
				match(REAL);
				}
				break;
			case NCHAR:
				enterOuterAlt(_localctx, 22);
				{
				setState(5564);
				match(NCHAR);
				}
				break;
			case LONG:
				enterOuterAlt(_localctx, 23);
				{
				setState(5565);
				match(LONG);
				setState(5567);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RAW) {
					{
					setState(5566);
					match(RAW);
					}
				}

				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 24);
				{
				setState(5569);
				match(CHAR);
				}
				break;
			case CHARACTER:
				enterOuterAlt(_localctx, 25);
				{
				setState(5570);
				match(CHARACTER);
				}
				break;
			case VARCHAR2:
				enterOuterAlt(_localctx, 26);
				{
				setState(5571);
				match(VARCHAR2);
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 27);
				{
				setState(5572);
				match(VARCHAR);
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 28);
				{
				setState(5573);
				match(STRING);
				}
				break;
			case RAW:
				enterOuterAlt(_localctx, 29);
				{
				setState(5574);
				match(RAW);
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 30);
				{
				setState(5575);
				match(BOOLEAN);
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 31);
				{
				setState(5576);
				match(DATE);
				}
				break;
			case ROWID:
				enterOuterAlt(_localctx, 32);
				{
				setState(5577);
				match(ROWID);
				}
				break;
			case UROWID:
				enterOuterAlt(_localctx, 33);
				{
				setState(5578);
				match(UROWID);
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 34);
				{
				setState(5579);
				match(YEAR);
				}
				break;
			case MONTH:
				enterOuterAlt(_localctx, 35);
				{
				setState(5580);
				match(MONTH);
				}
				break;
			case DAY:
				enterOuterAlt(_localctx, 36);
				{
				setState(5581);
				match(DAY);
				}
				break;
			case HOUR:
				enterOuterAlt(_localctx, 37);
				{
				setState(5582);
				match(HOUR);
				}
				break;
			case MINUTE:
				enterOuterAlt(_localctx, 38);
				{
				setState(5583);
				match(MINUTE);
				}
				break;
			case SECOND:
				enterOuterAlt(_localctx, 39);
				{
				setState(5584);
				match(SECOND);
				}
				break;
			case TIMEZONE_HOUR:
				enterOuterAlt(_localctx, 40);
				{
				setState(5585);
				match(TIMEZONE_HOUR);
				}
				break;
			case TIMEZONE_MINUTE:
				enterOuterAlt(_localctx, 41);
				{
				setState(5586);
				match(TIMEZONE_MINUTE);
				}
				break;
			case TIMEZONE_REGION:
				enterOuterAlt(_localctx, 42);
				{
				setState(5587);
				match(TIMEZONE_REGION);
				}
				break;
			case TIMEZONE_ABBR:
				enterOuterAlt(_localctx, 43);
				{
				setState(5588);
				match(TIMEZONE_ABBR);
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 44);
				{
				setState(5589);
				match(TIMESTAMP);
				}
				break;
			case TIMESTAMP_UNCONSTRAINED:
				enterOuterAlt(_localctx, 45);
				{
				setState(5590);
				match(TIMESTAMP_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 46);
				{
				setState(5591);
				match(TIMESTAMP_TZ_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 47);
				{
				setState(5592);
				match(TIMESTAMP_LTZ_UNCONSTRAINED);
				}
				break;
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 48);
				{
				setState(5593);
				match(YMINTERVAL_UNCONSTRAINED);
				}
				break;
			case DSINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 49);
				{
				setState(5594);
				match(DSINTERVAL_UNCONSTRAINED);
				}
				break;
			case BFILE:
				enterOuterAlt(_localctx, 50);
				{
				setState(5595);
				match(BFILE);
				}
				break;
			case BLOB:
				enterOuterAlt(_localctx, 51);
				{
				setState(5596);
				match(BLOB);
				}
				break;
			case CLOB:
				enterOuterAlt(_localctx, 52);
				{
				setState(5597);
				match(CLOB);
				}
				break;
			case NCLOB:
				enterOuterAlt(_localctx, 53);
				{
				setState(5598);
				match(NCLOB);
				}
				break;
			case MLSLABEL:
				enterOuterAlt(_localctx, 54);
				{
				setState(5599);
				match(MLSLABEL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bind_variableContext extends ParserRuleContext {
		public List<TerminalNode> BINDVAR() { return getTokens(PlSqlParser.BINDVAR); }
		public TerminalNode BINDVAR(int i) {
			return getToken(PlSqlParser.BINDVAR, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PlSqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PlSqlParser.UNSIGNED_INTEGER, i);
		}
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public TerminalNode INDICATOR() { return getToken(PlSqlParser.INDICATOR, 0); }
		public Bind_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bind_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterBind_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitBind_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitBind_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bind_variableContext bind_variable() throws RecognitionException {
		Bind_variableContext _localctx = new Bind_variableContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_bind_variable);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5605);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINDVAR:
				{
				setState(5602);
				match(BINDVAR);
				}
				break;
			case COLON:
				{
				setState(5603);
				match(COLON);
				setState(5604);
				match(UNSIGNED_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5615);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,726,_ctx) ) {
			case 1:
				{
				setState(5608);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDICATOR) {
					{
					setState(5607);
					match(INDICATOR);
					}
				}

				setState(5613);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINDVAR:
					{
					setState(5610);
					match(BINDVAR);
					}
					break;
				case COLON:
					{
					setState(5611);
					match(COLON);
					setState(5612);
					match(UNSIGNED_INTEGER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(5621);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,727,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5617);
					match(PERIOD);
					setState(5618);
					general_element_part();
					}
					} 
				}
				setState(5623);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,727,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_elementContext extends ParserRuleContext {
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public General_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGeneral_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGeneral_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitGeneral_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_elementContext general_element() throws RecognitionException {
		General_elementContext _localctx = new General_elementContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_general_element);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5624);
			general_element_part();
			setState(5629);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,728,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5625);
					match(PERIOD);
					setState(5626);
					general_element_part();
					}
					} 
				}
				setState(5631);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,728,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_element_partContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public General_element_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGeneral_element_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGeneral_element_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitGeneral_element_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_element_partContext general_element_part() throws RecognitionException {
		General_element_partContext _localctx = new General_element_partContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_general_element_part);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5634);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5632);
				match(INTRODUCER);
				setState(5633);
				char_set_name();
				}
			}

			setState(5636);
			id_expression();
			setState(5641);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,730,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5637);
					match(PERIOD);
					setState(5638);
					id_expression();
					}
					} 
				}
				setState(5643);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,730,_ctx);
			}
			setState(5646);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,731,_ctx) ) {
			case 1:
				{
				setState(5644);
				match(AT_SIGN);
				setState(5645);
				link_name();
				}
				break;
			}
			setState(5649);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,732,_ctx) ) {
			case 1:
				{
				setState(5648);
				function_argument();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_elementContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public Table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterTable_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitTable_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitTable_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_elementContext table_element() throws RecognitionException {
		Table_elementContext _localctx = new Table_elementContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5651);
				match(INTRODUCER);
				setState(5652);
				char_set_name();
				}
			}

			setState(5655);
			id_expression();
			setState(5660);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5656);
				match(PERIOD);
				setState(5657);
				id_expression();
				}
				}
				setState(5662);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public List<Quoted_stringContext> quoted_string() {
			return getRuleContexts(Quoted_stringContext.class);
		}
		public Quoted_stringContext quoted_string(int i) {
			return getRuleContext(Quoted_stringContext.class,i);
		}
		public List<Bind_variableContext> bind_variable() {
			return getRuleContexts(Bind_variableContext.class);
		}
		public Bind_variableContext bind_variable(int i) {
			return getRuleContext(Bind_variableContext.class,i);
		}
		public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public List<TerminalNode> DAY() { return getTokens(PlSqlParser.DAY); }
		public TerminalNode DAY(int i) {
			return getToken(PlSqlParser.DAY, i);
		}
		public List<TerminalNode> HOUR() { return getTokens(PlSqlParser.HOUR); }
		public TerminalNode HOUR(int i) {
			return getToken(PlSqlParser.HOUR, i);
		}
		public List<TerminalNode> MINUTE() { return getTokens(PlSqlParser.MINUTE); }
		public TerminalNode MINUTE(int i) {
			return getToken(PlSqlParser.MINUTE, i);
		}
		public List<TerminalNode> SECOND() { return getTokens(PlSqlParser.SECOND); }
		public TerminalNode SECOND(int i) {
			return getToken(PlSqlParser.SECOND, i);
		}
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public TerminalNode TO() { return getToken(PlSqlParser.TO, 0); }
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(PlSqlParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(PlSqlParser.UNSIGNED_INTEGER, i);
		}
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode DATE() { return getToken(PlSqlParser.DATE, 0); }
		public TerminalNode NULL() { return getToken(PlSqlParser.NULL, 0); }
		public TerminalNode TRUE() { return getToken(PlSqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(PlSqlParser.FALSE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(PlSqlParser.DBTIMEZONE, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(PlSqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
		public TerminalNode DEFAULT() { return getToken(PlSqlParser.DEFAULT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_constant);
		int _la;
		try {
			setState(5725);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5663);
				match(TIMESTAMP);
				setState(5666);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5664);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(5665);
					bind_variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5672);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,736,_ctx) ) {
				case 1:
					{
					setState(5668);
					match(AT);
					setState(5669);
					match(TIME);
					setState(5670);
					match(ZONE);
					setState(5671);
					quoted_string();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5674);
				match(INTERVAL);
				setState(5678);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5675);
					quoted_string();
					}
					break;
				case BINDVAR:
				case COLON:
					{
					setState(5676);
					bind_variable();
					}
					break;
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERR:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case KEY:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR2:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case COVAR_:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case REGR_:
				case ROW_NUMBER:
				case SUBSTR:
				case TRIM:
				case SUM:
				case STDDEV:
				case VAR_:
				case VARIANCE:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(5677);
					general_element_part();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5680);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==MONTH || _la==SECOND || _la==YEAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5694);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,741,_ctx) ) {
				case 1:
					{
					setState(5681);
					match(LEFT_PAREN);
					setState(5684);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						setState(5682);
						match(UNSIGNED_INTEGER);
						}
						break;
					case BINDVAR:
					case COLON:
						{
						setState(5683);
						bind_variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5691);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5686);
						match(COMMA);
						setState(5689);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case UNSIGNED_INTEGER:
							{
							setState(5687);
							match(UNSIGNED_INTEGER);
							}
							break;
						case BINDVAR:
						case COLON:
							{
							setState(5688);
							bind_variable();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					setState(5693);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5711);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,745,_ctx) ) {
				case 1:
					{
					setState(5696);
					match(TO);
					setState(5709);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DAY:
						{
						setState(5697);
						match(DAY);
						}
						break;
					case HOUR:
						{
						setState(5698);
						match(HOUR);
						}
						break;
					case MINUTE:
						{
						setState(5699);
						match(MINUTE);
						}
						break;
					case SECOND:
						{
						setState(5700);
						match(SECOND);
						setState(5707);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,743,_ctx) ) {
						case 1:
							{
							setState(5701);
							match(LEFT_PAREN);
							setState(5704);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case UNSIGNED_INTEGER:
								{
								setState(5702);
								match(UNSIGNED_INTEGER);
								}
								break;
							case BINDVAR:
							case COLON:
								{
								setState(5703);
								bind_variable();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(5706);
							match(RIGHT_PAREN);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5713);
				numeric();
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5714);
				match(DATE);
				setState(5715);
				quoted_string();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 5);
				{
				setState(5716);
				quoted_string();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 6);
				{
				setState(5717);
				match(NULL);
				}
				break;
			case TRUE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5718);
				match(TRUE);
				}
				break;
			case FALSE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5719);
				match(FALSE);
				}
				break;
			case DBTIMEZONE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5720);
				match(DBTIMEZONE);
				}
				break;
			case SESSIONTIMEZONE:
				enterOuterAlt(_localctx, 10);
				{
				setState(5721);
				match(SESSIONTIMEZONE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 11);
				{
				setState(5722);
				match(MINVALUE);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 12);
				{
				setState(5723);
				match(MAXVALUE);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 13);
				{
				setState(5724);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(PlSqlParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode APPROXIMATE_NUM_LIT() { return getToken(PlSqlParser.APPROXIMATE_NUM_LIT, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNumeric(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitNumeric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_numeric);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5727);
			_la = _input.LA(1);
			if ( !(_la==UNSIGNED_INTEGER || _la==APPROXIMATE_NUM_LIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_negativeContext extends ParserRuleContext {
		public TerminalNode MINUS_SIGN() { return getToken(PlSqlParser.MINUS_SIGN, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Numeric_negativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_negative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNumeric_negative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNumeric_negative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitNumeric_negative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numeric_negativeContext numeric_negative() throws RecognitionException {
		Numeric_negativeContext _localctx = new Numeric_negativeContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_numeric_negative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5729);
			match(MINUS_SIGN);
			setState(5730);
			numeric();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quoted_stringContext extends ParserRuleContext {
		public TerminalNode CHAR_STRING() { return getToken(PlSqlParser.CHAR_STRING, 0); }
		public TerminalNode NATIONAL_CHAR_STRING_LIT() { return getToken(PlSqlParser.NATIONAL_CHAR_STRING_LIT, 0); }
		public Quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterQuoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitQuoted_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitQuoted_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Quoted_stringContext quoted_string() throws RecognitionException {
		Quoted_stringContext _localctx = new Quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_quoted_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5732);
			_la = _input.LA(1);
			if ( !(_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode INTRODUCER() { return getToken(PlSqlParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_identifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5736);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5734);
				match(INTRODUCER);
				setState(5735);
				char_set_name();
				}
			}

			setState(5738);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Id_expressionContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public TerminalNode DELIMITED_ID() { return getToken(PlSqlParser.DELIMITED_ID, 0); }
		public Id_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterId_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitId_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitId_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Id_expressionContext id_expression() throws RecognitionException {
		Id_expressionContext _localctx = new Id_expressionContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_id_expression);
		try {
			setState(5742);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERR:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case KEY:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR2:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case COVAR_:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case REGR_:
			case ROW_NUMBER:
			case SUBSTR:
			case TRIM:
			case SUM:
			case STDDEV:
			case VAR_:
			case VARIANCE:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5740);
				regular_id();
				}
				break;
			case DELIMITED_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(5741);
				match(DELIMITED_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Not_equal_opContext extends ParserRuleContext {
		public TerminalNode NOT_EQUAL_OP() { return getToken(PlSqlParser.NOT_EQUAL_OP, 0); }
		public Not_equal_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_not_equal_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNot_equal_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNot_equal_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitNot_equal_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Not_equal_opContext not_equal_op() throws RecognitionException {
		Not_equal_opContext _localctx = new Not_equal_opContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_not_equal_op);
		try {
			setState(5751);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT_EQUAL_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5744);
				match(NOT_EQUAL_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5745);
				match(LESS_THAN_OP);
				setState(5746);
				match(GREATER_THAN_OP);
				}
				break;
			case EXCLAMATION_OPERATOR_PART:
				enterOuterAlt(_localctx, 3);
				{
				setState(5747);
				match(EXCLAMATION_OPERATOR_PART);
				setState(5748);
				match(EQUALS_OP);
				}
				break;
			case CARRET_OPERATOR_PART:
				enterOuterAlt(_localctx, 4);
				{
				setState(5749);
				match(CARRET_OPERATOR_PART);
				setState(5750);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Greater_than_or_equals_opContext extends ParserRuleContext {
		public Greater_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_greater_than_or_equals_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterGreater_than_or_equals_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitGreater_than_or_equals_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitGreater_than_or_equals_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Greater_than_or_equals_opContext greater_than_or_equals_op() throws RecognitionException {
		Greater_than_or_equals_opContext _localctx = new Greater_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_greater_than_or_equals_op);
		try {
			setState(5756);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GREATER_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5753);
				match(GREATER_THAN_OR_EQUALS_OP);
				}
				break;
			case GREATER_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5754);
				match(GREATER_THAN_OP);
				setState(5755);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Less_than_or_equals_opContext extends ParserRuleContext {
		public Less_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_less_than_or_equals_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterLess_than_or_equals_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitLess_than_or_equals_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitLess_than_or_equals_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Less_than_or_equals_opContext less_than_or_equals_op() throws RecognitionException {
		Less_than_or_equals_opContext _localctx = new Less_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_less_than_or_equals_op);
		try {
			setState(5761);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5758);
				match(LESS_THAN_OR_EQUALS_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5759);
				match(LESS_THAN_OP);
				setState(5760);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Concatenation_opContext extends ParserRuleContext {
		public Concatenation_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterConcatenation_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitConcatenation_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitConcatenation_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Concatenation_opContext concatenation_op() throws RecognitionException {
		Concatenation_opContext _localctx = new Concatenation_opContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_concatenation_op);
		try {
			setState(5766);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONCATENATION_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5763);
				match(CONCATENATION_OP);
				}
				break;
			case VERTICAL_BAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5764);
				match(VERTICAL_BAR);
				setState(5765);
				match(VERTICAL_BAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_signContext extends ParserRuleContext {
		public Outer_join_signContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterOuter_join_sign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitOuter_join_sign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitOuter_join_sign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Outer_join_signContext outer_join_sign() throws RecognitionException {
		Outer_join_signContext _localctx = new Outer_join_signContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_outer_join_sign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5768);
			match(LEFT_PAREN);
			setState(5769);
			match(PLUS_SIGN);
			setState(5770);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regular_idContext extends ParserRuleContext {
		public TerminalNode REGULAR_ID() { return getToken(PlSqlParser.REGULAR_ID, 0); }
		public TerminalNode A_LETTER() { return getToken(PlSqlParser.A_LETTER, 0); }
		public TerminalNode ADD() { return getToken(PlSqlParser.ADD, 0); }
		public TerminalNode AFTER() { return getToken(PlSqlParser.AFTER, 0); }
		public TerminalNode AGENT() { return getToken(PlSqlParser.AGENT, 0); }
		public TerminalNode AGGREGATE() { return getToken(PlSqlParser.AGGREGATE, 0); }
		public TerminalNode ANALYZE() { return getToken(PlSqlParser.ANALYZE, 0); }
		public TerminalNode ARRAY() { return getToken(PlSqlParser.ARRAY, 0); }
		public TerminalNode ASSOCIATE() { return getToken(PlSqlParser.ASSOCIATE, 0); }
		public TerminalNode AT() { return getToken(PlSqlParser.AT, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(PlSqlParser.ATTRIBUTE, 0); }
		public TerminalNode AUDIT() { return getToken(PlSqlParser.AUDIT, 0); }
		public TerminalNode AUTHID() { return getToken(PlSqlParser.AUTHID, 0); }
		public TerminalNode AUTO() { return getToken(PlSqlParser.AUTO, 0); }
		public TerminalNode AUTOMATIC() { return getToken(PlSqlParser.AUTOMATIC, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(PlSqlParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode BATCH() { return getToken(PlSqlParser.BATCH, 0); }
		public TerminalNode BEFORE() { return getToken(PlSqlParser.BEFORE, 0); }
		public TerminalNode BFILE() { return getToken(PlSqlParser.BFILE, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(PlSqlParser.BINARY_DOUBLE, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(PlSqlParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_INTEGER() { return getToken(PlSqlParser.BINARY_INTEGER, 0); }
		public TerminalNode BLOB() { return getToken(PlSqlParser.BLOB, 0); }
		public TerminalNode BLOCK() { return getToken(PlSqlParser.BLOCK, 0); }
		public TerminalNode BODY() { return getToken(PlSqlParser.BODY, 0); }
		public TerminalNode BOOLEAN() { return getToken(PlSqlParser.BOOLEAN, 0); }
		public TerminalNode BOTH() { return getToken(PlSqlParser.BOTH, 0); }
		public TerminalNode BULK() { return getToken(PlSqlParser.BULK, 0); }
		public TerminalNode BYTE() { return getToken(PlSqlParser.BYTE, 0); }
		public TerminalNode C_LETTER() { return getToken(PlSqlParser.C_LETTER, 0); }
		public TerminalNode CALL() { return getToken(PlSqlParser.CALL, 0); }
		public TerminalNode CANONICAL() { return getToken(PlSqlParser.CANONICAL, 0); }
		public TerminalNode CASCADE() { return getToken(PlSqlParser.CASCADE, 0); }
		public TerminalNode CAST() { return getToken(PlSqlParser.CAST, 0); }
		public TerminalNode CHAR() { return getToken(PlSqlParser.CHAR, 0); }
		public TerminalNode CHAR_CS() { return getToken(PlSqlParser.CHAR_CS, 0); }
		public TerminalNode CHARACTER() { return getToken(PlSqlParser.CHARACTER, 0); }
		public TerminalNode CHR() { return getToken(PlSqlParser.CHR, 0); }
		public TerminalNode CLOB() { return getToken(PlSqlParser.CLOB, 0); }
		public TerminalNode CLOSE() { return getToken(PlSqlParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(PlSqlParser.CLUSTER, 0); }
		public TerminalNode COLLECT() { return getToken(PlSqlParser.COLLECT, 0); }
		public TerminalNode COLUMNS() { return getToken(PlSqlParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(PlSqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(PlSqlParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(PlSqlParser.COMMITTED, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(PlSqlParser.COMPATIBILITY, 0); }
		public TerminalNode COMPILE() { return getToken(PlSqlParser.COMPILE, 0); }
		public TerminalNode COMPOUND() { return getToken(PlSqlParser.COMPOUND, 0); }
		public TerminalNode CONSTANT() { return getToken(PlSqlParser.CONSTANT, 0); }
		public TerminalNode CONSTRAINT() { return getToken(PlSqlParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(PlSqlParser.CONSTRAINTS, 0); }
		public TerminalNode CONSTRUCTOR() { return getToken(PlSqlParser.CONSTRUCTOR, 0); }
		public TerminalNode CONTENT() { return getToken(PlSqlParser.CONTENT, 0); }
		public TerminalNode CONTEXT() { return getToken(PlSqlParser.CONTEXT, 0); }
		public TerminalNode CONTINUE() { return getToken(PlSqlParser.CONTINUE, 0); }
		public TerminalNode CONVERT() { return getToken(PlSqlParser.CONVERT, 0); }
		public TerminalNode CORRUPT_XID() { return getToken(PlSqlParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(PlSqlParser.CORRUPT_XID_ALL, 0); }
		public TerminalNode COST() { return getToken(PlSqlParser.COST, 0); }
		public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
		public TerminalNode CROSS() { return getToken(PlSqlParser.CROSS, 0); }
		public TerminalNode CUBE() { return getToken(PlSqlParser.CUBE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(PlSqlParser.CURRENT_USER, 0); }
		public TerminalNode CURSOR() { return getToken(PlSqlParser.CURSOR, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(PlSqlParser.CUSTOMDATUM, 0); }
		public TerminalNode CYCLE() { return getToken(PlSqlParser.CYCLE, 0); }
		public TerminalNode DATA() { return getToken(PlSqlParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(PlSqlParser.DATABASE, 0); }
		public TerminalNode DAY() { return getToken(PlSqlParser.DAY, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(PlSqlParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(PlSqlParser.DBTIMEZONE, 0); }
		public TerminalNode DDL() { return getToken(PlSqlParser.DDL, 0); }
		public TerminalNode DEBUG() { return getToken(PlSqlParser.DEBUG, 0); }
		public TerminalNode DEC() { return getToken(PlSqlParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(PlSqlParser.DECIMAL, 0); }
		public TerminalNode DECOMPOSE() { return getToken(PlSqlParser.DECOMPOSE, 0); }
		public TerminalNode DECREMENT() { return getToken(PlSqlParser.DECREMENT, 0); }
		public TerminalNode DEFAULTS() { return getToken(PlSqlParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(PlSqlParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(PlSqlParser.DEFINER, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(PlSqlParser.DETERMINISTIC, 0); }
		public TerminalNode DIMENSION() { return getToken(PlSqlParser.DIMENSION, 0); }
		public TerminalNode DISABLE() { return getToken(PlSqlParser.DISABLE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(PlSqlParser.DISASSOCIATE, 0); }
		public TerminalNode DOCUMENT() { return getToken(PlSqlParser.DOCUMENT, 0); }
		public TerminalNode DOUBLE() { return getToken(PlSqlParser.DOUBLE, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode EACH() { return getToken(PlSqlParser.EACH, 0); }
		public TerminalNode ELEMENT() { return getToken(PlSqlParser.ELEMENT, 0); }
		public TerminalNode EMPTY() { return getToken(PlSqlParser.EMPTY, 0); }
		public TerminalNode ENABLE() { return getToken(PlSqlParser.ENABLE, 0); }
		public TerminalNode ENCODING() { return getToken(PlSqlParser.ENCODING, 0); }
		public TerminalNode ENTITYESCAPING() { return getToken(PlSqlParser.ENTITYESCAPING, 0); }
		public TerminalNode ERR() { return getToken(PlSqlParser.ERR, 0); }
		public TerminalNode ERRORS() { return getToken(PlSqlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(PlSqlParser.ESCAPE, 0); }
		public TerminalNode EVALNAME() { return getToken(PlSqlParser.EVALNAME, 0); }
		public TerminalNode EXCEPTION() { return getToken(PlSqlParser.EXCEPTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(PlSqlParser.EXCEPTION_INIT, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(PlSqlParser.EXCEPTIONS, 0); }
		public TerminalNode EXCLUDE() { return getToken(PlSqlParser.EXCLUDE, 0); }
		public TerminalNode EXECUTE() { return getToken(PlSqlParser.EXECUTE, 0); }
		public TerminalNode EXIT() { return getToken(PlSqlParser.EXIT, 0); }
		public TerminalNode EXPLAIN() { return getToken(PlSqlParser.EXPLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(PlSqlParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(PlSqlParser.EXTRACT, 0); }
		public TerminalNode FAILURE() { return getToken(PlSqlParser.FAILURE, 0); }
		public TerminalNode FINAL() { return getToken(PlSqlParser.FINAL, 0); }
		public TerminalNode FIRST() { return getToken(PlSqlParser.FIRST, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(PlSqlParser.FIRST_VALUE, 0); }
		public TerminalNode FLOAT() { return getToken(PlSqlParser.FLOAT, 0); }
		public TerminalNode FOLLOWING() { return getToken(PlSqlParser.FOLLOWING, 0); }
		public TerminalNode FOLLOWS() { return getToken(PlSqlParser.FOLLOWS, 0); }
		public TerminalNode FORALL() { return getToken(PlSqlParser.FORALL, 0); }
		public TerminalNode FORCE() { return getToken(PlSqlParser.FORCE, 0); }
		public TerminalNode FULL() { return getToken(PlSqlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(PlSqlParser.FUNCTION, 0); }
		public TerminalNode GROUPING() { return getToken(PlSqlParser.GROUPING, 0); }
		public TerminalNode HASH() { return getToken(PlSqlParser.HASH, 0); }
		public TerminalNode HIDE() { return getToken(PlSqlParser.HIDE, 0); }
		public TerminalNode HOUR() { return getToken(PlSqlParser.HOUR, 0); }
		public TerminalNode IGNORE() { return getToken(PlSqlParser.IGNORE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(PlSqlParser.IMMEDIATE, 0); }
		public TerminalNode INCLUDE() { return getToken(PlSqlParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(PlSqlParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(PlSqlParser.INCREMENT, 0); }
		public TerminalNode INDENT() { return getToken(PlSqlParser.INDENT, 0); }
		public TerminalNode INDEXED() { return getToken(PlSqlParser.INDEXED, 0); }
		public TerminalNode INDICATOR() { return getToken(PlSqlParser.INDICATOR, 0); }
		public TerminalNode INDICES() { return getToken(PlSqlParser.INDICES, 0); }
		public TerminalNode INFINITE() { return getToken(PlSqlParser.INFINITE, 0); }
		public TerminalNode INLINE() { return getToken(PlSqlParser.INLINE, 0); }
		public TerminalNode INNER() { return getToken(PlSqlParser.INNER, 0); }
		public TerminalNode INOUT() { return getToken(PlSqlParser.INOUT, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(PlSqlParser.INSTANTIABLE, 0); }
		public TerminalNode INSTEAD() { return getToken(PlSqlParser.INSTEAD, 0); }
		public TerminalNode INT() { return getToken(PlSqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(PlSqlParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(PlSqlParser.INTERVAL, 0); }
		public TerminalNode INVALIDATE() { return getToken(PlSqlParser.INVALIDATE, 0); }
		public TerminalNode ISOLATION() { return getToken(PlSqlParser.ISOLATION, 0); }
		public TerminalNode ITERATE() { return getToken(PlSqlParser.ITERATE, 0); }
		public TerminalNode JAVA() { return getToken(PlSqlParser.JAVA, 0); }
		public TerminalNode JOIN() { return getToken(PlSqlParser.JOIN, 0); }
		public TerminalNode KEEP() { return getToken(PlSqlParser.KEEP, 0); }
		public TerminalNode KEY() { return getToken(PlSqlParser.KEY, 0); }
		public TerminalNode LANGUAGE() { return getToken(PlSqlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(PlSqlParser.LAST, 0); }
		public TerminalNode LAST_VALUE() { return getToken(PlSqlParser.LAST_VALUE, 0); }
		public TerminalNode LEADING() { return getToken(PlSqlParser.LEADING, 0); }
		public TerminalNode LEFT() { return getToken(PlSqlParser.LEFT, 0); }
		public TerminalNode LEVEL() { return getToken(PlSqlParser.LEVEL, 0); }
		public TerminalNode LIBRARY() { return getToken(PlSqlParser.LIBRARY, 0); }
		public TerminalNode LIKE2() { return getToken(PlSqlParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(PlSqlParser.LIKE4, 0); }
		public TerminalNode LIKEC() { return getToken(PlSqlParser.LIKEC, 0); }
		public TerminalNode LIMIT() { return getToken(PlSqlParser.LIMIT, 0); }
		public TerminalNode LOCAL() { return getToken(PlSqlParser.LOCAL, 0); }
		public TerminalNode LOCKED() { return getToken(PlSqlParser.LOCKED, 0); }
		public TerminalNode LOG() { return getToken(PlSqlParser.LOG, 0); }
		public TerminalNode LOGOFF() { return getToken(PlSqlParser.LOGOFF, 0); }
		public TerminalNode LOGON() { return getToken(PlSqlParser.LOGON, 0); }
		public TerminalNode LONG() { return getToken(PlSqlParser.LONG, 0); }
		public TerminalNode LOOP() { return getToken(PlSqlParser.LOOP, 0); }
		public TerminalNode MAIN() { return getToken(PlSqlParser.MAIN, 0); }
		public TerminalNode MAP() { return getToken(PlSqlParser.MAP, 0); }
		public TerminalNode MATCHED() { return getToken(PlSqlParser.MATCHED, 0); }
		public TerminalNode MAXVALUE() { return getToken(PlSqlParser.MAXVALUE, 0); }
		public TerminalNode MEASURES() { return getToken(PlSqlParser.MEASURES, 0); }
		public TerminalNode MEMBER() { return getToken(PlSqlParser.MEMBER, 0); }
		public TerminalNode MERGE() { return getToken(PlSqlParser.MERGE, 0); }
		public TerminalNode MINUTE() { return getToken(PlSqlParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(PlSqlParser.MINVALUE, 0); }
		public TerminalNode MLSLABEL() { return getToken(PlSqlParser.MLSLABEL, 0); }
		public TerminalNode MODEL() { return getToken(PlSqlParser.MODEL, 0); }
		public TerminalNode MODIFY() { return getToken(PlSqlParser.MODIFY, 0); }
		public TerminalNode MONTH() { return getToken(PlSqlParser.MONTH, 0); }
		public TerminalNode MULTISET() { return getToken(PlSqlParser.MULTISET, 0); }
		public TerminalNode NAME() { return getToken(PlSqlParser.NAME, 0); }
		public TerminalNode NAN() { return getToken(PlSqlParser.NAN, 0); }
		public TerminalNode NATURAL() { return getToken(PlSqlParser.NATURAL, 0); }
		public TerminalNode NATURALN() { return getToken(PlSqlParser.NATURALN, 0); }
		public TerminalNode NAV() { return getToken(PlSqlParser.NAV, 0); }
		public TerminalNode NCHAR() { return getToken(PlSqlParser.NCHAR, 0); }
		public TerminalNode NCHAR_CS() { return getToken(PlSqlParser.NCHAR_CS, 0); }
		public TerminalNode NCLOB() { return getToken(PlSqlParser.NCLOB, 0); }
		public TerminalNode NESTED() { return getToken(PlSqlParser.NESTED, 0); }
		public TerminalNode NEW() { return getToken(PlSqlParser.NEW, 0); }
		public TerminalNode NO() { return getToken(PlSqlParser.NO, 0); }
		public TerminalNode NOAUDIT() { return getToken(PlSqlParser.NOAUDIT, 0); }
		public TerminalNode NOCOPY() { return getToken(PlSqlParser.NOCOPY, 0); }
		public TerminalNode NOCYCLE() { return getToken(PlSqlParser.NOCYCLE, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(PlSqlParser.NOENTITYESCAPING, 0); }
		public TerminalNode NONE() { return getToken(PlSqlParser.NONE, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(PlSqlParser.NOSCHEMACHECK, 0); }
		public TerminalNode NULLS() { return getToken(PlSqlParser.NULLS, 0); }
		public TerminalNode NUMBER() { return getToken(PlSqlParser.NUMBER, 0); }
		public TerminalNode NUMERIC() { return getToken(PlSqlParser.NUMERIC, 0); }
		public TerminalNode NVARCHAR2() { return getToken(PlSqlParser.NVARCHAR2, 0); }
		public TerminalNode OBJECT() { return getToken(PlSqlParser.OBJECT, 0); }
		public TerminalNode OFF() { return getToken(PlSqlParser.OFF, 0); }
		public TerminalNode OID() { return getToken(PlSqlParser.OID, 0); }
		public TerminalNode OLD() { return getToken(PlSqlParser.OLD, 0); }
		public TerminalNode ONLY() { return getToken(PlSqlParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(PlSqlParser.OPEN, 0); }
		public TerminalNode ORADATA() { return getToken(PlSqlParser.ORADATA, 0); }
		public TerminalNode ORDINALITY() { return getToken(PlSqlParser.ORDINALITY, 0); }
		public TerminalNode OSERROR() { return getToken(PlSqlParser.OSERROR, 0); }
		public TerminalNode OUT() { return getToken(PlSqlParser.OUT, 0); }
		public TerminalNode OUTER() { return getToken(PlSqlParser.OUTER, 0); }
		public TerminalNode OVER() { return getToken(PlSqlParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(PlSqlParser.OVERRIDING, 0); }
		public TerminalNode PACKAGE() { return getToken(PlSqlParser.PACKAGE, 0); }
		public TerminalNode PARALLEL_ENABLE() { return getToken(PlSqlParser.PARALLEL_ENABLE, 0); }
		public TerminalNode PARAMETERS() { return getToken(PlSqlParser.PARAMETERS, 0); }
		public TerminalNode PARENT() { return getToken(PlSqlParser.PARENT, 0); }
		public TerminalNode PARTITION() { return getToken(PlSqlParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(PlSqlParser.PASSING, 0); }
		public TerminalNode PATH() { return getToken(PlSqlParser.PATH, 0); }
		public TerminalNode PIPELINED() { return getToken(PlSqlParser.PIPELINED, 0); }
		public TerminalNode PLAN() { return getToken(PlSqlParser.PLAN, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(PlSqlParser.PLS_INTEGER, 0); }
		public TerminalNode POSITIVE() { return getToken(PlSqlParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(PlSqlParser.POSITIVEN, 0); }
		public TerminalNode PRAGMA() { return getToken(PlSqlParser.PRAGMA, 0); }
		public TerminalNode PRECEDING() { return getToken(PlSqlParser.PRECEDING, 0); }
		public TerminalNode PRECISION() { return getToken(PlSqlParser.PRECISION, 0); }
		public TerminalNode PRESENT() { return getToken(PlSqlParser.PRESENT, 0); }
		public TerminalNode RAISE() { return getToken(PlSqlParser.RAISE, 0); }
		public TerminalNode RANGE() { return getToken(PlSqlParser.RANGE, 0); }
		public TerminalNode RAW() { return getToken(PlSqlParser.RAW, 0); }
		public TerminalNode READ() { return getToken(PlSqlParser.READ, 0); }
		public TerminalNode REAL() { return getToken(PlSqlParser.REAL, 0); }
		public TerminalNode RECORD() { return getToken(PlSqlParser.RECORD, 0); }
		public TerminalNode REF() { return getToken(PlSqlParser.REF, 0); }
		public TerminalNode REFERENCE() { return getToken(PlSqlParser.REFERENCE, 0); }
		public TerminalNode REFERENCING() { return getToken(PlSqlParser.REFERENCING, 0); }
		public TerminalNode REJECT() { return getToken(PlSqlParser.REJECT, 0); }
		public TerminalNode RELIES_ON() { return getToken(PlSqlParser.RELIES_ON, 0); }
		public TerminalNode RENAME() { return getToken(PlSqlParser.RENAME, 0); }
		public TerminalNode REPLACE() { return getToken(PlSqlParser.REPLACE, 0); }
		public TerminalNode RESPECT() { return getToken(PlSqlParser.RESPECT, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(PlSqlParser.RESTRICT_REFERENCES, 0); }
		public TerminalNode RESULT() { return getToken(PlSqlParser.RESULT, 0); }
		public TerminalNode RESULT_CACHE() { return getToken(PlSqlParser.RESULT_CACHE, 0); }
		public TerminalNode RETURN() { return getToken(PlSqlParser.RETURN, 0); }
		public TerminalNode RETURNING() { return getToken(PlSqlParser.RETURNING, 0); }
		public TerminalNode REUSE() { return getToken(PlSqlParser.REUSE, 0); }
		public TerminalNode REVERSE() { return getToken(PlSqlParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(PlSqlParser.RIGHT, 0); }
		public TerminalNode ROLLBACK() { return getToken(PlSqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(PlSqlParser.ROLLUP, 0); }
		public TerminalNode ROW() { return getToken(PlSqlParser.ROW, 0); }
		public TerminalNode ROWID() { return getToken(PlSqlParser.ROWID, 0); }
		public TerminalNode ROWS() { return getToken(PlSqlParser.ROWS, 0); }
		public TerminalNode RULES() { return getToken(PlSqlParser.RULES, 0); }
		public TerminalNode SAMPLE() { return getToken(PlSqlParser.SAMPLE, 0); }
		public TerminalNode SAVE() { return getToken(PlSqlParser.SAVE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(PlSqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(PlSqlParser.SCHEMA, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(PlSqlParser.SCHEMACHECK, 0); }
		public TerminalNode SCN() { return getToken(PlSqlParser.SCN, 0); }
		public TerminalNode SECOND() { return getToken(PlSqlParser.SECOND, 0); }
		public TerminalNode SEED() { return getToken(PlSqlParser.SEED, 0); }
		public TerminalNode SEGMENT() { return getToken(PlSqlParser.SEGMENT, 0); }
		public TerminalNode SELF() { return getToken(PlSqlParser.SELF, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(PlSqlParser.SEQUENTIAL, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(PlSqlParser.SERIALIZABLE, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(PlSqlParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode SERVERERROR() { return getToken(PlSqlParser.SERVERERROR, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(PlSqlParser.SESSIONTIMEZONE, 0); }
		public TerminalNode SET() { return getToken(PlSqlParser.SET, 0); }
		public TerminalNode SETS() { return getToken(PlSqlParser.SETS, 0); }
		public TerminalNode SETTINGS() { return getToken(PlSqlParser.SETTINGS, 0); }
		public TerminalNode SHOW() { return getToken(PlSqlParser.SHOW, 0); }
		public TerminalNode SHUTDOWN() { return getToken(PlSqlParser.SHUTDOWN, 0); }
		public TerminalNode SIBLINGS() { return getToken(PlSqlParser.SIBLINGS, 0); }
		public TerminalNode SIGNTYPE() { return getToken(PlSqlParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(PlSqlParser.SIMPLE_INTEGER, 0); }
		public TerminalNode SINGLE() { return getToken(PlSqlParser.SINGLE, 0); }
		public TerminalNode SKIP_() { return getToken(PlSqlParser.SKIP_, 0); }
		public TerminalNode SMALLINT() { return getToken(PlSqlParser.SMALLINT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(PlSqlParser.SNAPSHOT, 0); }
		public TerminalNode SOME() { return getToken(PlSqlParser.SOME, 0); }
		public TerminalNode SPECIFICATION() { return getToken(PlSqlParser.SPECIFICATION, 0); }
		public TerminalNode SQLDATA() { return getToken(PlSqlParser.SQLDATA, 0); }
		public TerminalNode SQLERROR() { return getToken(PlSqlParser.SQLERROR, 0); }
		public TerminalNode STANDALONE() { return getToken(PlSqlParser.STANDALONE, 0); }
		public TerminalNode STARTUP() { return getToken(PlSqlParser.STARTUP, 0); }
		public TerminalNode STATEMENT() { return getToken(PlSqlParser.STATEMENT, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(PlSqlParser.STATEMENT_ID, 0); }
		public TerminalNode STATIC() { return getToken(PlSqlParser.STATIC, 0); }
		public TerminalNode STATISTICS() { return getToken(PlSqlParser.STATISTICS, 0); }
		public TerminalNode STRING() { return getToken(PlSqlParser.STRING, 0); }
		public TerminalNode SUBSTR() { return getToken(PlSqlParser.SUBSTR, 0); }
		public TerminalNode SUBMULTISET() { return getToken(PlSqlParser.SUBMULTISET, 0); }
		public TerminalNode SUBPARTITION() { return getToken(PlSqlParser.SUBPARTITION, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(PlSqlParser.SUBSTITUTABLE, 0); }
		public TerminalNode SUBTYPE() { return getToken(PlSqlParser.SUBTYPE, 0); }
		public TerminalNode SUCCESS() { return getToken(PlSqlParser.SUCCESS, 0); }
		public TerminalNode SUSPEND() { return getToken(PlSqlParser.SUSPEND, 0); }
		public TerminalNode TIME() { return getToken(PlSqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(PlSqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(PlSqlParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(PlSqlParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(PlSqlParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(PlSqlParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(PlSqlParser.TIMEZONE_REGION, 0); }
		public TerminalNode TRAILING() { return getToken(PlSqlParser.TRAILING, 0); }
		public TerminalNode TRANSACTION() { return getToken(PlSqlParser.TRANSACTION, 0); }
		public TerminalNode TRANSLATE() { return getToken(PlSqlParser.TRANSLATE, 0); }
		public TerminalNode TREAT() { return getToken(PlSqlParser.TREAT, 0); }
		public TerminalNode TRIGGER() { return getToken(PlSqlParser.TRIGGER, 0); }
		public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
		public TerminalNode TRUNCATE() { return getToken(PlSqlParser.TRUNCATE, 0); }
		public TerminalNode TYPE() { return getToken(PlSqlParser.TYPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(PlSqlParser.UNBOUNDED, 0); }
		public TerminalNode UNDER() { return getToken(PlSqlParser.UNDER, 0); }
		public TerminalNode UNLIMITED() { return getToken(PlSqlParser.UNLIMITED, 0); }
		public TerminalNode UNTIL() { return getToken(PlSqlParser.UNTIL, 0); }
		public TerminalNode UPDATED() { return getToken(PlSqlParser.UPDATED, 0); }
		public TerminalNode UPSERT() { return getToken(PlSqlParser.UPSERT, 0); }
		public TerminalNode UROWID() { return getToken(PlSqlParser.UROWID, 0); }
		public TerminalNode USE() { return getToken(PlSqlParser.USE, 0); }
		public TerminalNode VALIDATE() { return getToken(PlSqlParser.VALIDATE, 0); }
		public TerminalNode VALUE() { return getToken(PlSqlParser.VALUE, 0); }
		public TerminalNode VARCHAR() { return getToken(PlSqlParser.VARCHAR, 0); }
		public TerminalNode VARCHAR2() { return getToken(PlSqlParser.VARCHAR2, 0); }
		public TerminalNode VARIABLE() { return getToken(PlSqlParser.VARIABLE, 0); }
		public TerminalNode VARRAY() { return getToken(PlSqlParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(PlSqlParser.VARYING, 0); }
		public TerminalNode VERSION() { return getToken(PlSqlParser.VERSION, 0); }
		public TerminalNode VERSIONS() { return getToken(PlSqlParser.VERSIONS, 0); }
		public TerminalNode WAIT() { return getToken(PlSqlParser.WAIT, 0); }
		public TerminalNode WARNING() { return getToken(PlSqlParser.WARNING, 0); }
		public TerminalNode WELLFORMED() { return getToken(PlSqlParser.WELLFORMED, 0); }
		public TerminalNode WHENEVER() { return getToken(PlSqlParser.WHENEVER, 0); }
		public TerminalNode WHILE() { return getToken(PlSqlParser.WHILE, 0); }
		public TerminalNode WITHIN() { return getToken(PlSqlParser.WITHIN, 0); }
		public TerminalNode WORK() { return getToken(PlSqlParser.WORK, 0); }
		public TerminalNode WRITE() { return getToken(PlSqlParser.WRITE, 0); }
		public TerminalNode XML() { return getToken(PlSqlParser.XML, 0); }
		public TerminalNode XMLAGG() { return getToken(PlSqlParser.XMLAGG, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(PlSqlParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCAST() { return getToken(PlSqlParser.XMLCAST, 0); }
		public TerminalNode XMLCOLATTVAL() { return getToken(PlSqlParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLELEMENT() { return getToken(PlSqlParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(PlSqlParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(PlSqlParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(PlSqlParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(PlSqlParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(PlSqlParser.XMLPI, 0); }
		public TerminalNode XMLQUERY() { return getToken(PlSqlParser.XMLQUERY, 0); }
		public TerminalNode XMLROOT() { return getToken(PlSqlParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(PlSqlParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(PlSqlParser.XMLTABLE, 0); }
		public TerminalNode YEAR() { return getToken(PlSqlParser.YEAR, 0); }
		public TerminalNode YES() { return getToken(PlSqlParser.YES, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(PlSqlParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode ZONE() { return getToken(PlSqlParser.ZONE, 0); }
		public TerminalNode PREDICTION() { return getToken(PlSqlParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(PlSqlParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(PlSqlParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(PlSqlParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(PlSqlParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(PlSqlParser.PREDICTION_SET, 0); }
		public TerminalNode CUME_DIST() { return getToken(PlSqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(PlSqlParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(PlSqlParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(PlSqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(PlSqlParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(PlSqlParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(PlSqlParser.RANK, 0); }
		public TerminalNode AVG() { return getToken(PlSqlParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(PlSqlParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(PlSqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(PlSqlParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(PlSqlParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(PlSqlParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(PlSqlParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(PlSqlParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(PlSqlParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(PlSqlParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(PlSqlParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(PlSqlParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(PlSqlParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(PlSqlParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(PlSqlParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(PlSqlParser.COVAR_, 0); }
		public Regular_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterRegular_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitRegular_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitRegular_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Regular_idContext regular_id() throws RecognitionException {
		Regular_idContext _localctx = new Regular_idContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_regular_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5772);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMMITTED) | (1L << COMPATIBILITY) | (1L << COMPILE) | (1L << COMPOUND))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (CONSTANT - 66)) | (1L << (CONSTRAINT - 66)) | (1L << (CONSTRAINTS - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (CONTENT - 66)) | (1L << (CONTEXT - 66)) | (1L << (CONTINUE - 66)) | (1L << (CONVERT - 66)) | (1L << (CORRUPT_XID - 66)) | (1L << (CORRUPT_XID_ALL - 66)) | (1L << (COST - 66)) | (1L << (COUNT - 66)) | (1L << (CROSS - 66)) | (1L << (CUBE - 66)) | (1L << (CURRENT_USER - 66)) | (1L << (CURSOR - 66)) | (1L << (CUSTOMDATUM - 66)) | (1L << (CYCLE - 66)) | (1L << (DATA - 66)) | (1L << (DATABASE - 66)) | (1L << (DAY - 66)) | (1L << (DB_ROLE_CHANGE - 66)) | (1L << (DBTIMEZONE - 66)) | (1L << (DDL - 66)) | (1L << (DEBUG - 66)) | (1L << (DEC - 66)) | (1L << (DECIMAL - 66)) | (1L << (DECOMPOSE - 66)) | (1L << (DECREMENT - 66)) | (1L << (DEFAULTS - 66)) | (1L << (DEFERRED - 66)) | (1L << (DEFINER - 66)) | (1L << (DETERMINISTIC - 66)) | (1L << (DIMENSION - 66)) | (1L << (DISABLE - 66)) | (1L << (DISASSOCIATE - 66)) | (1L << (DOCUMENT - 66)) | (1L << (DOUBLE - 66)) | (1L << (DSINTERVAL_UNCONSTRAINED - 66)) | (1L << (EACH - 66)) | (1L << (ELEMENT - 66)) | (1L << (EMPTY - 66)) | (1L << (ENABLE - 66)) | (1L << (ENCODING - 66)) | (1L << (ENTITYESCAPING - 66)) | (1L << (ERR - 66)) | (1L << (ERRORS - 66)) | (1L << (ESCAPE - 66)) | (1L << (EVALNAME - 66)) | (1L << (EXCEPTION - 66)) | (1L << (EXCEPTION_INIT - 66)))) != 0) || ((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (EXCEPTIONS - 130)) | (1L << (EXCLUDE - 130)) | (1L << (EXECUTE - 130)) | (1L << (EXIT - 130)) | (1L << (EXPLAIN - 130)) | (1L << (EXTERNAL - 130)) | (1L << (EXTRACT - 130)) | (1L << (FAILURE - 130)) | (1L << (FINAL - 130)) | (1L << (FIRST - 130)) | (1L << (FIRST_VALUE - 130)) | (1L << (FLOAT - 130)) | (1L << (FOLLOWING - 130)) | (1L << (FOLLOWS - 130)) | (1L << (FORALL - 130)) | (1L << (FORCE - 130)) | (1L << (FULL - 130)) | (1L << (FUNCTION - 130)) | (1L << (GROUPING - 130)) | (1L << (HASH - 130)) | (1L << (HIDE - 130)) | (1L << (HOUR - 130)) | (1L << (IGNORE - 130)) | (1L << (IMMEDIATE - 130)) | (1L << (INCLUDE - 130)) | (1L << (INCLUDING - 130)) | (1L << (INCREMENT - 130)) | (1L << (INDENT - 130)) | (1L << (INDEXED - 130)) | (1L << (INDICATOR - 130)) | (1L << (INDICES - 130)) | (1L << (INFINITE - 130)) | (1L << (INLINE - 130)) | (1L << (INNER - 130)) | (1L << (INOUT - 130)) | (1L << (INSTANTIABLE - 130)) | (1L << (INSTEAD - 130)) | (1L << (INT - 130)) | (1L << (INTEGER - 130)) | (1L << (INTERVAL - 130)) | (1L << (INVALIDATE - 130)) | (1L << (ISOLATION - 130)) | (1L << (ITERATE - 130)) | (1L << (JAVA - 130)) | (1L << (JOIN - 130)) | (1L << (KEEP - 130)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (KEY - 194)) | (1L << (LANGUAGE - 194)) | (1L << (LAST - 194)) | (1L << (LAST_VALUE - 194)) | (1L << (LEADING - 194)) | (1L << (LEFT - 194)) | (1L << (LEVEL - 194)) | (1L << (LIBRARY - 194)) | (1L << (LIKE2 - 194)) | (1L << (LIKE4 - 194)) | (1L << (LIKEC - 194)) | (1L << (LIMIT - 194)) | (1L << (LOCAL - 194)) | (1L << (LOCKED - 194)) | (1L << (LOG - 194)) | (1L << (LOGOFF - 194)) | (1L << (LOGON - 194)) | (1L << (LONG - 194)) | (1L << (LOOP - 194)) | (1L << (MAIN - 194)) | (1L << (MAP - 194)) | (1L << (MATCHED - 194)) | (1L << (MAXVALUE - 194)) | (1L << (MEASURES - 194)) | (1L << (MEMBER - 194)) | (1L << (MERGE - 194)) | (1L << (MINUTE - 194)) | (1L << (MINVALUE - 194)) | (1L << (MLSLABEL - 194)) | (1L << (MODEL - 194)) | (1L << (MODIFY - 194)) | (1L << (MONTH - 194)) | (1L << (MULTISET - 194)) | (1L << (NAME - 194)) | (1L << (NAN - 194)) | (1L << (NATURAL - 194)) | (1L << (NATURALN - 194)) | (1L << (NAV - 194)) | (1L << (NCHAR - 194)) | (1L << (NCHAR_CS - 194)) | (1L << (NCLOB - 194)) | (1L << (NESTED - 194)) | (1L << (NEW - 194)) | (1L << (NO - 194)) | (1L << (NOAUDIT - 194)) | (1L << (NOCOPY - 194)) | (1L << (NOCYCLE - 194)) | (1L << (NOENTITYESCAPING - 194)) | (1L << (NONE - 194)) | (1L << (NOSCHEMACHECK - 194)) | (1L << (NULLS - 194)) | (1L << (NUMBER - 194)) | (1L << (NUMERIC - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (NVARCHAR2 - 258)) | (1L << (OBJECT - 258)) | (1L << (OFF - 258)) | (1L << (OID - 258)) | (1L << (OLD - 258)) | (1L << (ONLY - 258)) | (1L << (OPEN - 258)) | (1L << (ORADATA - 258)) | (1L << (ORDINALITY - 258)) | (1L << (OSERROR - 258)) | (1L << (OUT - 258)) | (1L << (OUTER - 258)) | (1L << (OVER - 258)) | (1L << (OVERRIDING - 258)) | (1L << (PACKAGE - 258)) | (1L << (PARALLEL_ENABLE - 258)) | (1L << (PARAMETERS - 258)) | (1L << (PARENT - 258)) | (1L << (PARTITION - 258)) | (1L << (PASSING - 258)) | (1L << (PATH - 258)) | (1L << (PIPELINED - 258)) | (1L << (PLAN - 258)) | (1L << (PLS_INTEGER - 258)) | (1L << (POSITIVE - 258)) | (1L << (POSITIVEN - 258)) | (1L << (PRAGMA - 258)) | (1L << (PRECEDING - 258)) | (1L << (PRECISION - 258)) | (1L << (PRESENT - 258)) | (1L << (RAISE - 258)) | (1L << (RANGE - 258)) | (1L << (RAW - 258)) | (1L << (READ - 258)) | (1L << (REAL - 258)) | (1L << (RECORD - 258)) | (1L << (REF - 258)) | (1L << (REFERENCE - 258)) | (1L << (REFERENCING - 258)) | (1L << (REJECT - 258)) | (1L << (RELIES_ON - 258)) | (1L << (RENAME - 258)) | (1L << (REPLACE - 258)) | (1L << (RESPECT - 258)) | (1L << (RESTRICT_REFERENCES - 258)) | (1L << (RESULT - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (RESULT_CACHE - 322)) | (1L << (RETURN - 322)) | (1L << (RETURNING - 322)) | (1L << (REUSE - 322)) | (1L << (REVERSE - 322)) | (1L << (RIGHT - 322)) | (1L << (ROLLBACK - 322)) | (1L << (ROLLUP - 322)) | (1L << (ROW - 322)) | (1L << (ROWID - 322)) | (1L << (ROWS - 322)) | (1L << (RULES - 322)) | (1L << (SAMPLE - 322)) | (1L << (SAVE - 322)) | (1L << (SAVEPOINT - 322)) | (1L << (SCHEMA - 322)) | (1L << (SCHEMACHECK - 322)) | (1L << (SCN - 322)) | (1L << (SECOND - 322)) | (1L << (SEED - 322)) | (1L << (SEGMENT - 322)) | (1L << (SELF - 322)) | (1L << (SEQUENTIAL - 322)) | (1L << (SERIALIZABLE - 322)) | (1L << (SERIALLY_REUSABLE - 322)) | (1L << (SERVERERROR - 322)) | (1L << (SESSIONTIMEZONE - 322)) | (1L << (SET - 322)) | (1L << (SETS - 322)) | (1L << (SETTINGS - 322)) | (1L << (SHOW - 322)) | (1L << (SHUTDOWN - 322)) | (1L << (SIBLINGS - 322)) | (1L << (SIGNTYPE - 322)) | (1L << (SIMPLE_INTEGER - 322)) | (1L << (SINGLE - 322)) | (1L << (SKIP_ - 322)) | (1L << (SMALLINT - 322)) | (1L << (SNAPSHOT - 322)) | (1L << (SOME - 322)) | (1L << (SPECIFICATION - 322)) | (1L << (SQLDATA - 322)) | (1L << (SQLERROR - 322)) | (1L << (STANDALONE - 322)) | (1L << (STARTUP - 322)) | (1L << (STATEMENT - 322)) | (1L << (STATEMENT_ID - 322)) | (1L << (STATIC - 322)) | (1L << (STATISTICS - 322)) | (1L << (STRING - 322)) | (1L << (SUBMULTISET - 322)) | (1L << (SUBPARTITION - 322)) | (1L << (SUBSTITUTABLE - 322)) | (1L << (SUBTYPE - 322)) | (1L << (SUCCESS - 322)) | (1L << (SUSPEND - 322)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (TIME - 389)) | (1L << (TIMESTAMP - 389)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 389)) | (1L << (TIMESTAMP_UNCONSTRAINED - 389)) | (1L << (TIMEZONE_ABBR - 389)) | (1L << (TIMEZONE_HOUR - 389)) | (1L << (TIMEZONE_MINUTE - 389)) | (1L << (TIMEZONE_REGION - 389)) | (1L << (TRAILING - 389)) | (1L << (TRANSACTION - 389)) | (1L << (TRANSLATE - 389)) | (1L << (TREAT - 389)) | (1L << (TRIGGER - 389)) | (1L << (TRUNCATE - 389)) | (1L << (TYPE - 389)) | (1L << (UNBOUNDED - 389)) | (1L << (UNDER - 389)) | (1L << (UNLIMITED - 389)) | (1L << (UNTIL - 389)) | (1L << (UPDATED - 389)) | (1L << (UPSERT - 389)) | (1L << (UROWID - 389)) | (1L << (USE - 389)) | (1L << (VALIDATE - 389)) | (1L << (VALUE - 389)) | (1L << (VARCHAR - 389)) | (1L << (VARCHAR2 - 389)) | (1L << (VARIABLE - 389)) | (1L << (VARRAY - 389)) | (1L << (VARYING - 389)) | (1L << (VERSION - 389)) | (1L << (VERSIONS - 389)) | (1L << (WAIT - 389)) | (1L << (WARNING - 389)) | (1L << (WELLFORMED - 389)) | (1L << (WHENEVER - 389)) | (1L << (WHILE - 389)) | (1L << (WITHIN - 389)) | (1L << (WORK - 389)) | (1L << (WRITE - 389)) | (1L << (XML - 389)) | (1L << (XMLAGG - 389)) | (1L << (XMLATTRIBUTES - 389)) | (1L << (XMLCAST - 389)) | (1L << (XMLCOLATTVAL - 389)) | (1L << (XMLELEMENT - 389)) | (1L << (XMLEXISTS - 389)) | (1L << (XMLFOREST - 389)) | (1L << (XMLNAMESPACES - 389)) | (1L << (XMLPARSE - 389)) | (1L << (XMLPI - 389)) | (1L << (XMLQUERY - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (XMLROOT - 453)) | (1L << (XMLSERIALIZE - 453)) | (1L << (XMLTABLE - 453)) | (1L << (YEAR - 453)) | (1L << (YES - 453)) | (1L << (YMINTERVAL_UNCONSTRAINED - 453)) | (1L << (ZONE - 453)) | (1L << (PREDICTION - 453)) | (1L << (PREDICTION_BOUNDS - 453)) | (1L << (PREDICTION_COST - 453)) | (1L << (PREDICTION_DETAILS - 453)) | (1L << (PREDICTION_PROBABILITY - 453)) | (1L << (PREDICTION_SET - 453)) | (1L << (CUME_DIST - 453)) | (1L << (DENSE_RANK - 453)) | (1L << (LISTAGG - 453)) | (1L << (PERCENT_RANK - 453)) | (1L << (PERCENTILE_CONT - 453)) | (1L << (PERCENTILE_DISC - 453)) | (1L << (RANK - 453)) | (1L << (AVG - 453)) | (1L << (CORR - 453)) | (1L << (COVAR_ - 453)) | (1L << (LAG - 453)) | (1L << (LEAD - 453)) | (1L << (MAX - 453)) | (1L << (MEDIAN - 453)) | (1L << (MIN - 453)) | (1L << (NTILE - 453)) | (1L << (RATIO_TO_REPORT - 453)) | (1L << (REGR_ - 453)) | (1L << (ROW_NUMBER - 453)) | (1L << (SUBSTR - 453)) | (1L << (TRIM - 453)) | (1L << (SUM - 453)) | (1L << (STDDEV - 453)) | (1L << (VAR_ - 453)) | (1L << (VARIANCE - 453)))) != 0) || _la==REGULAR_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_function_nameContext extends ParserRuleContext {
		public TerminalNode CHR() { return getToken(PlSqlParser.CHR, 0); }
		public TerminalNode DECODE() { return getToken(PlSqlParser.DECODE, 0); }
		public TerminalNode SUBSTR() { return getToken(PlSqlParser.SUBSTR, 0); }
		public TerminalNode TO_CHAR() { return getToken(PlSqlParser.TO_CHAR, 0); }
		public TerminalNode TRIM() { return getToken(PlSqlParser.TRIM, 0); }
		public String_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterString_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitString_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitString_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final String_function_nameContext string_function_name() throws RecognitionException {
		String_function_nameContext _localctx = new String_function_nameContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_string_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5774);
			_la = _input.LA(1);
			if ( !(_la==CHR || ((((_la - 476)) & ~0x3f) == 0 && ((1L << (_la - 476)) & ((1L << (DECODE - 476)) | (1L << (SUBSTR - 476)) | (1L << (TO_CHAR - 476)) | (1L << (TRIM - 476)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_function_nameContext extends ParserRuleContext {
		public TerminalNode AVG() { return getToken(PlSqlParser.AVG, 0); }
		public TerminalNode COUNT() { return getToken(PlSqlParser.COUNT, 0); }
		public TerminalNode NVL() { return getToken(PlSqlParser.NVL, 0); }
		public TerminalNode ROUND() { return getToken(PlSqlParser.ROUND, 0); }
		public TerminalNode SUM() { return getToken(PlSqlParser.SUM, 0); }
		public Numeric_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).enterNumeric_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof PlSqlParserListener ) ((PlSqlParserListener)listener).exitNumeric_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof PlSqlParserVisitor ) return ((PlSqlParserVisitor<? extends T>)visitor).visitNumeric_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numeric_function_nameContext numeric_function_name() throws RecognitionException {
		Numeric_function_nameContext _localctx = new Numeric_function_nameContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_numeric_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5776);
			_la = _input.LA(1);
			if ( !(_la==COUNT || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (AVG - 473)) | (1L << (NVL - 473)) | (1L << (ROUND - 473)) | (1L << (SUM - 473)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 262:
			return logical_or_expression_sempred((Logical_or_expressionContext)_localctx, predIndex);
		case 263:
			return logical_and_expression_sempred((Logical_and_expressionContext)_localctx, predIndex);
		case 268:
			return relational_expression_sempred((Relational_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean logical_or_expression_sempred(Logical_or_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean logical_and_expression_sempred(Logical_and_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean relational_expression_sempred(Relational_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 2);
		}
		return true;
	}

	private static final int _serializedATNSegments = 3;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0220\u1695\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\3\2\6"+
		"\2\u0326\n\2\r\2\16\2\u0327\3\3\7\3\u032b\n\3\f\3\16\3\u032e\13\3\3\3"+
		"\3\3\3\4\3\4\5\4\u0334\n\4\3\4\5\4\u0337\n\4\7\4\u0339\n\4\f\4\16\4\u033c"+
		"\13\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5"+
		"\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u035b\n\5\3\6"+
		"\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\5\7\u0367\n\7\3\7\7\7\u036a\n\7\f"+
		"\7\16\7\u036d\13\7\3\7\3\7\5\7\u0371\n\7\3\7\3\7\3\b\3\b\3\b\5\b\u0378"+
		"\n\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u0380\n\b\f\b\16\b\u0383\13\b\3\b\3\b"+
		"\5\b\u0387\n\b\3\b\3\b\3\b\3\b\3\b\3\b\7\b\u038f\n\b\f\b\16\b\u0392\13"+
		"\b\3\b\5\b\u0395\n\b\3\b\3\b\5\b\u0399\n\b\3\b\7\b\u039c\n\b\f\b\16\b"+
		"\u039f\13\b\3\b\3\b\5\b\u03a3\n\b\3\b\3\b\3\b\5\b\u03a8\n\b\3\b\3\b\3"+
		"\t\3\t\5\t\u03ae\n\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\7\n\u03ba"+
		"\n\n\f\n\16\n\u03bd\13\n\3\n\3\n\5\n\u03c1\n\n\3\n\5\n\u03c4\n\n\3\n\3"+
		"\n\3\13\3\13\5\13\u03ca\n\13\3\f\3\f\3\f\3\f\3\f\7\f\u03d1\n\f\f\f\16"+
		"\f\u03d4\13\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\7\r\u03df\n\r\f\r\16"+
		"\r\u03e2\13\r\3\r\3\r\3\16\3\16\3\16\5\16\u03e9\n\16\3\16\3\16\3\16\5"+
		"\16\u03ee\n\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\5\17\u03f8\n\17"+
		"\3\17\5\17\u03fb\n\17\3\17\7\17\u03fe\n\17\f\17\16\17\u0401\13\17\3\17"+
		"\3\17\5\17\u0405\n\17\3\17\3\17\3\20\3\20\3\20\5\20\u040c\n\20\3\20\3"+
		"\20\3\20\3\20\5\20\u0412\n\20\3\20\3\20\5\20\u0416\n\20\3\20\3\20\7\20"+
		"\u041a\n\20\f\20\16\20\u041d\13\20\3\20\3\20\5\20\u0421\n\20\3\20\3\20"+
		"\3\21\3\21\3\21\5\21\u0428\n\21\3\21\3\21\3\21\3\21\3\21\5\21\u042f\n"+
		"\21\3\21\3\21\3\21\7\21\u0434\n\21\f\21\16\21\u0437\13\21\3\21\3\21\3"+
		"\21\3\21\5\21\u043d\n\21\5\21\u043f\n\21\3\21\3\21\3\22\3\22\3\22\3\22"+
		"\3\22\3\22\3\22\3\22\5\22\u044b\n\22\3\23\3\23\3\23\3\23\3\23\3\23\7\23"+
		"\u0453\n\23\f\23\16\23\u0456\13\23\3\23\3\23\5\23\u045a\n\23\3\23\3\23"+
		"\3\24\3\24\3\24\3\24\3\24\3\24\7\24\u0464\n\24\f\24\16\24\u0467\13\24"+
		"\3\24\3\24\5\24\u046b\n\24\3\24\3\24\3\24\5\24\u0470\n\24\3\24\5\24\u0473"+
		"\n\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u0480"+
		"\n\25\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\5\27\u048c\n\27"+
		"\3\27\7\27\u048f\n\27\f\27\16\27\u0492\13\27\3\27\3\27\5\27\u0496\n\27"+
		"\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\7\30\u04a0\n\30\f\30\16\30\u04a3"+
		"\13\30\3\30\3\30\5\30\u04a7\n\30\3\30\3\30\3\30\3\30\3\30\3\30\7\30\u04af"+
		"\n\30\f\30\16\30\u04b2\13\30\3\30\5\30\u04b5\n\30\3\30\3\30\5\30\u04b9"+
		"\n\30\3\30\7\30\u04bc\n\30\f\30\16\30\u04bf\13\30\3\30\3\30\5\30\u04c3"+
		"\n\30\3\30\3\30\3\30\5\30\u04c8\n\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31"+
		"\3\31\7\31\u04d2\n\31\f\31\16\31\u04d5\13\31\3\31\3\31\5\31\u04d9\n\31"+
		"\3\31\3\31\5\31\u04dd\n\31\3\31\7\31\u04e0\n\31\f\31\16\31\u04e3\13\31"+
		"\3\31\3\31\3\31\5\31\u04e8\n\31\3\31\3\31\3\32\3\32\3\32\5\32\u04ef\n"+
		"\32\3\32\3\32\3\32\3\32\3\32\3\32\7\32\u04f7\n\32\f\32\16\32\u04fa\13"+
		"\32\3\32\3\32\5\32\u04fe\n\32\3\32\5\32\u0501\n\32\3\32\3\32\5\32\u0505"+
		"\n\32\3\32\7\32\u0508\n\32\f\32\16\32\u050b\13\32\3\32\3\32\3\32\5\32"+
		"\u0510\n\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\34"+
		"\3\34\3\34\3\34\3\34\5\34\u0522\n\34\3\34\7\34\u0525\n\34\f\34\16\34\u0528"+
		"\13\34\3\34\3\34\5\34\u052c\n\34\5\34\u052e\n\34\3\34\3\34\3\35\3\35\3"+
		"\35\5\35\u0535\n\35\3\35\3\35\3\35\3\35\3\35\5\35\u053c\n\35\3\35\5\35"+
		"\u053f\n\35\3\35\5\35\u0542\n\35\3\35\5\35\u0545\n\35\3\35\3\35\3\35\3"+
		"\36\3\36\3\36\3\36\7\36\u054e\n\36\f\36\16\36\u0551\13\36\3\37\3\37\3"+
		"\37\3\37\3\37\3 \3 \3 \3 \5 \u055c\n \3 \3 \5 \u0560\n \3 \5 \u0563\n"+
		" \3!\3!\3!\3!\3\"\3\"\3\"\5\"\u056c\n\"\3#\3#\3#\3#\7#\u0572\n#\f#\16"+
		"#\u0575\13#\3#\3#\3#\3#\3#\5#\u057c\n#\3#\5#\u057f\n#\3$\3$\3$\3$\3$\5"+
		"$\u0586\n$\3%\3%\5%\u058a\n%\3&\3&\3&\7&\u058f\n&\f&\16&\u0592\13&\3&"+
		"\6&\u0595\n&\r&\16&\u0596\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'"+
		"\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3"+
		"\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u05c0\n\'\3(\3(\3(\3(\3(\3"+
		"(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u05dc"+
		"\n(\3)\3)\3)\7)\u05e1\n)\f)\16)\u05e4\13)\3)\3)\5)\u05e8\n)\3)\3)\3*\3"+
		"*\3*\3*\3*\7*\u05f1\n*\f*\16*\u05f4\13*\5*\u05f6\n*\3+\3+\3+\3+\3+\3,"+
		"\3,\6,\u05ff\n,\r,\16,\u0600\3-\3-\3-\3.\3.\3.\5.\u0609\n.\3.\3.\5.\u060d"+
		"\n.\3.\3.\3/\3/\3/\3/\3/\3/\3/\3/\5/\u0619\n/\3/\5/\u061c\n/\3/\3/\3\60"+
		"\3\60\5\60\u0622\n\60\3\60\5\60\u0625\n\60\3\60\7\60\u0628\n\60\f\60\16"+
		"\60\u062b\13\60\3\60\3\60\5\60\u062f\n\60\3\61\3\61\5\61\u0633\n\61\3"+
		"\61\3\61\3\61\3\61\3\61\3\61\7\61\u063b\n\61\f\61\16\61\u063e\13\61\3"+
		"\61\3\61\3\62\3\62\3\62\7\62\u0645\n\62\f\62\16\62\u0648\13\62\3\63\3"+
		"\63\3\63\5\63\u064d\n\63\3\64\3\64\3\64\3\64\3\64\3\64\3\64\7\64\u0656"+
		"\n\64\f\64\16\64\u0659\13\64\3\64\3\64\5\64\u065d\n\64\3\65\3\65\5\65"+
		"\u0661\n\65\3\66\3\66\3\66\3\66\3\66\3\66\5\66\u0669\n\66\3\67\3\67\3"+
		"\67\3\67\3\67\3\67\5\67\u0671\n\67\3\67\3\67\3\67\5\67\u0676\n\67\3\67"+
		"\5\67\u0679\n\67\5\67\u067b\n\67\38\58\u067e\n8\38\38\38\38\39\39\39\5"+
		"9\u0687\n9\39\39\39\59\u068c\n9\39\39\3:\3:\3:\5:\u0693\n:\3:\5:\u0696"+
		"\n:\3;\5;\u0699\n;\3;\3;\5;\u069d\n;\3;\5;\u06a0\n;\3;\3;\3;\3;\7;\u06a6"+
		"\n;\f;\16;\u06a9\13;\3;\3;\5;\u06ad\n;\3;\7;\u06b0\n;\f;\16;\u06b3\13"+
		";\3<\3<\3<\3<\5<\u06b9\n<\3=\3=\3=\3>\3>\3>\3>\3>\5>\u06c3\n>\3?\3?\3"+
		"?\3?\3?\3?\3?\3?\3@\3@\3@\3@\6@\u06d1\n@\r@\16@\u06d2\3@\3@\3A\3A\5A\u06d9"+
		"\nA\3B\3B\3B\3B\3C\3C\3C\3C\5C\u06e3\nC\3D\3D\3D\3D\3D\3D\7D\u06eb\nD"+
		"\fD\16D\u06ee\13D\3D\3D\3D\3D\5D\u06f4\nD\3D\7D\u06f7\nD\fD\16D\u06fa"+
		"\13D\3D\3D\3D\5D\u06ff\nD\3E\3E\3E\3E\3E\3E\7E\u0707\nE\fE\16E\u070a\13"+
		"E\3E\3E\5E\u070e\nE\3E\3E\3E\3E\3E\5E\u0715\nE\3E\7E\u0718\nE\fE\16E\u071b"+
		"\13E\3E\3E\3E\5E\u0720\nE\3F\5F\u0723\nF\3F\5F\u0726\nF\3F\3F\3F\3F\3"+
		"F\3F\3F\3F\3F\3F\3F\3F\3F\7F\u0735\nF\fF\16F\u0738\13F\3F\3F\5F\u073c"+
		"\nF\3F\3F\3F\3F\3F\3F\3F\5F\u0745\nF\3F\7F\u0748\nF\fF\16F\u074b\13F\3"+
		"F\3F\3F\5F\u0750\nF\3G\5G\u0753\nG\3G\3G\3H\3H\3H\5H\u075a\nH\3H\5H\u075d"+
		"\nH\3I\3I\3I\3I\3J\5J\u0764\nJ\3J\6J\u0767\nJ\rJ\16J\u0768\3J\3J\5J\u076d"+
		"\nJ\3K\3K\3K\5K\u0772\nK\3L\3L\3L\5L\u0777\nL\3M\3M\3M\3M\3M\3M\7M\u077f"+
		"\nM\fM\16M\u0782\13M\3M\3M\3M\5M\u0787\nM\3N\3N\3N\3N\3N\3N\7N\u078f\n"+
		"N\fN\16N\u0792\13N\3N\3N\5N\u0796\nN\3N\3N\3N\3N\3N\5N\u079d\nN\3N\3N"+
		"\3N\3N\5N\u07a3\nN\3N\3N\5N\u07a7\nN\3O\5O\u07aa\nO\3O\5O\u07ad\nO\3O"+
		"\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\3O\7O\u07bc\nO\fO\16O\u07bf\13O\3O\3"+
		"O\5O\u07c3\nO\3O\3O\3O\3O\3O\3O\5O\u07cb\nO\3P\3P\3P\3P\3Q\3Q\3Q\3Q\3"+
		"Q\3Q\7Q\u07d7\nQ\fQ\16Q\u07da\13Q\3Q\3Q\3R\3R\5R\u07e0\nR\3S\3S\3S\3T"+
		"\3T\3T\3T\3T\3U\3U\3U\3U\6U\u07ee\nU\rU\16U\u07ef\3U\3U\3V\3V\3V\3V\3"+
		"V\7V\u07f9\nV\fV\16V\u07fc\13V\3V\3V\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W"+
		"\3W\3W\3W\3W\3W\5W\u0810\nW\3X\3X\3X\3X\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y"+
		"\7Y\u0820\nY\fY\16Y\u0823\13Y\3Y\3Y\3Z\3Z\3Z\3Z\3[\3[\3[\3[\3[\3[\3[\3"+
		"[\3[\3\\\3\\\3\\\5\\\u0837\n\\\3\\\3\\\3\\\3\\\3\\\3\\\3\\\5\\\u0840\n"+
		"\\\3\\\3\\\3\\\5\\\u0845\n\\\3\\\3\\\3\\\5\\\u084a\n\\\3\\\3\\\3\\\3\\"+
		"\5\\\u0850\n\\\3\\\3\\\3\\\3\\\3\\\5\\\u0857\n\\\3\\\3\\\3\\\5\\\u085c"+
		"\n\\\5\\\u085e\n\\\3]\3]\3]\3]\3]\3]\3]\3^\3^\3^\3^\3^\3_\3_\3_\5_\u086f"+
		"\n_\3_\3_\3_\5_\u0874\n_\3`\3`\3`\3`\3`\3`\7`\u087c\n`\f`\16`\u087f\13"+
		"`\3`\3`\3`\5`\u0884\n`\3a\3a\3a\3a\3a\3a\7a\u088c\na\fa\16a\u088f\13a"+
		"\3a\3a\3b\3b\3b\3b\3b\5b\u0898\nb\3c\3c\3c\3c\3c\7c\u089f\nc\fc\16c\u08a2"+
		"\13c\3c\3c\3d\3d\3d\3d\3d\3d\7d\u08ac\nd\fd\16d\u08af\13d\3d\3d\3e\3e"+
		"\3e\3e\3e\3f\3f\3f\3g\3g\3g\3g\3h\3h\3h\5h\u08c2\nh\3i\3i\3i\3i\3j\3j"+
		"\3j\5j\u08cb\nj\3j\3j\3j\5j\u08d0\nj\3j\3j\5j\u08d4\nj\3j\5j\u08d7\nj"+
		"\3k\3k\3k\3k\3k\3k\7k\u08df\nk\fk\16k\u08e2\13k\3k\3k\3l\3l\3l\3l\3l\7"+
		"l\u08eb\nl\fl\16l\u08ee\13l\3l\3l\3l\5l\u08f3\nl\3l\3l\3m\3m\7m\u08f9"+
		"\nm\fm\16m\u08fc\13m\3m\5m\u08ff\nm\3m\5m\u0902\nm\3n\3n\3n\3o\3o\3o\3"+
		"o\3o\3o\3o\3o\3o\3o\5o\u0911\no\3p\3p\5p\u0915\np\3p\3p\3p\5p\u091a\n"+
		"p\3p\5p\u091d\np\3p\3p\3q\3q\3q\3q\3q\3q\3q\3q\3q\5q\u092a\nq\3q\3q\5"+
		"q\u092e\nq\3q\3q\3r\3r\3r\3r\3r\3r\7r\u0938\nr\fr\16r\u093b\13r\3r\3r"+
		"\5r\u093f\nr\3r\3r\5r\u0943\nr\3r\3r\5r\u0947\nr\3r\3r\3s\3s\5s\u094d"+
		"\ns\3s\5s\u0950\ns\3s\5s\u0953\ns\3t\3t\3t\3t\3u\3u\3u\3u\3u\3u\3u\3u"+
		"\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\3u\5u\u096e\nu\3u\3u\6u\u0972\nu"+
		"\ru\16u\u0973\3u\3u\5u\u0978\nu\3u\3u\3v\3v\3v\3v\3v\7v\u0981\nv\fv\16"+
		"v\u0984\13v\3v\3v\3w\3w\5w\u098a\nw\3w\3w\5w\u098e\nw\3w\5w\u0991\nw\3"+
		"x\3x\3x\3x\5x\u0997\nx\3y\3y\3y\3y\3y\3y\3y\5y\u09a0\ny\3y\3y\3z\3z\3"+
		"z\3z\5z\u09a8\nz\3z\3z\5z\u09ac\nz\3{\3{\5{\u09b0\n{\3{\3{\3{\3|\3|\3"+
		"|\5|\u09b8\n|\3|\3|\3|\3|\3|\3|\3|\5|\u09c1\n|\3}\3}\3}\3}\6}\u09c7\n"+
		"}\r}\16}\u09c8\3~\3~\3~\3~\3~\3~\3\177\3\177\3\177\3\177\3\177\3\177\5"+
		"\177\u09d7\n\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177"+
		"\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\5\177\u09ec"+
		"\n\177\3\u0080\3\u0080\5\u0080\u09f0\n\u0080\3\u0080\3\u0080\3\u0080\3"+
		"\u0081\3\u0081\5\u0081\u09f7\n\u0081\3\u0081\3\u0081\5\u0081\u09fb\n\u0081"+
		"\3\u0082\3\u0082\5\u0082\u09ff\n\u0082\3\u0082\3\u0082\5\u0082\u0a03\n"+
		"\u0082\3\u0083\3\u0083\3\u0083\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084"+
		"\7\u0084\u0a0d\n\u0084\f\u0084\16\u0084\u0a10\13\u0084\3\u0084\5\u0084"+
		"\u0a13\n\u0084\3\u0084\3\u0084\3\u0084\3\u0085\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\3\u0086\3\u0086\3\u0086\3\u0087\5\u0087\u0a21\n\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\5\u0087\u0a27\n\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\5\u0087\u0a2e\n\u0087\3\u0088\3\u0088\3\u0088\5\u0088"+
		"\u0a33\n\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\5\u0088\u0a3d\n\u0088\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088"+
		"\u0a43\n\u0088\5\u0088\u0a45\n\u0088\3\u0089\3\u0089\3\u0089\3\u0089\3"+
		"\u0089\3\u0089\3\u0089\5\u0089\u0a4e\n\u0089\3\u008a\3\u008a\3\u008a\3"+
		"\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0a58\n\u008a\3\u008a\3"+
		"\u008a\3\u008a\5\u008a\u0a5d\n\u008a\3\u008b\3\u008b\3\u008b\3\u008b\3"+
		"\u008b\3\u008c\3\u008c\3\u008d\3\u008d\3\u008e\3\u008e\3\u008f\3\u008f"+
		"\5\u008f\u0a6c\n\u008f\3\u0090\3\u0090\5\u0090\u0a70\n\u0090\3\u0091\5"+
		"\u0091\u0a73\n\u0091\3\u0091\3\u0091\5\u0091\u0a77\n\u0091\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0093\3\u0093\3\u0093\3\u0093\6\u0093"+
		"\u0a83\n\u0093\r\u0093\16\u0093\u0a84\5\u0093\u0a87\n\u0093\3\u0093\3"+
		"\u0093\5\u0093\u0a8b\n\u0093\3\u0094\3\u0094\3\u0094\3\u0094\7\u0094\u0a91"+
		"\n\u0094\f\u0094\16\u0094\u0a94\13\u0094\3\u0094\3\u0094\3\u0094\3\u0095"+
		"\5\u0095\u0a9a\n\u0095\3\u0095\6\u0095\u0a9d\n\u0095\r\u0095\16\u0095"+
		"\u0a9e\5\u0095\u0aa1\n\u0095\3\u0095\3\u0095\3\u0096\5\u0096\u0aa6\n\u0096"+
		"\3\u0096\6\u0096\u0aa9\n\u0096\r\u0096\16\u0096\u0aaa\3\u0096\3\u0096"+
		"\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097\u0ab3\n\u0097\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\5\u0098\u0aba\n\u0098\3\u0098\3\u0098\5\u0098"+
		"\u0abe\n\u0098\3\u0098\5\u0098\u0ac1\n\u0098\3\u0099\3\u0099\3\u0099\3"+
		"\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u0acd\n"+
		"\u009a\3\u009b\3\u009b\3\u009b\3\u009b\5\u009b\u0ad3\n\u009b\3\u009c\3"+
		"\u009c\3\u009c\3\u009d\3\u009d\3\u009d\5\u009d\u0adb\n\u009d\3\u009e\3"+
		"\u009e\3\u009e\3\u009e\3\u009e\3\u009e\7\u009e\u0ae3\n\u009e\f\u009e\16"+
		"\u009e\u0ae6\13\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e"+
		"\7\u009e\u0aee\n\u009e\f\u009e\16\u009e\u0af1\13\u009e\5\u009e\u0af3\n"+
		"\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0afa\n\u009f\3"+
		"\u009f\5\u009f\u0afd\n\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5"+
		"\u00a0\u0b04\n\u00a0\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3"+
		"\u00a1\3\u00a1\3\u00a1\5\u00a1\u0b0f\n\u00a1\3\u00a1\3\u00a1\3\u00a1\3"+
		"\u00a1\5\u00a1\u0b15\n\u00a1\3\u00a1\3\u00a1\5\u00a1\u0b19\n\u00a1\3\u00a2"+
		"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\7\u00a2\u0b21\n\u00a2\f\u00a2"+
		"\16\u00a2\u0b24\13\u00a2\5\u00a2\u0b26\n\u00a2\3\u00a2\3\u00a2\3\u00a3"+
		"\3\u00a3\5\u00a3\u0b2c\n\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3"+
		"\3\u00a3\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0b37\n\u00a3\5\u00a3\u0b39\n"+
		"\u00a3\5\u00a3\u0b3b\n\u00a3\3\u00a3\5\u00a3\u0b3e\n\u00a3\3\u00a4\3\u00a4"+
		"\5\u00a4\u0b42\n\u00a4\3\u00a4\5\u00a4\u0b45\n\u00a4\3\u00a5\3\u00a5\5"+
		"\u00a5\u0b49\n\u00a5\3\u00a5\3\u00a5\5\u00a5\u0b4d\n\u00a5\3\u00a5\3\u00a5"+
		"\3\u00a5\5\u00a5\u0b52\n\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a7\3\u00a7"+
		"\3\u00a7\3\u00a7\3\u00a7\3\u00a7\5\u00a7\u0b5d\n\u00a7\3\u00a7\3\u00a7"+
		"\5\u00a7\u0b61\n\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7"+
		"\5\u00a7\u0b69\n\u00a7\3\u00a8\5\u00a8\u0b6c\n\u00a8\3\u00a8\3\u00a8\3"+
		"\u00a8\7\u00a8\u0b71\n\u00a8\f\u00a8\16\u00a8\u0b74\13\u00a8\3\u00a9\3"+
		"\u00a9\3\u00a9\3\u00a9\7\u00a9\u0b7a\n\u00a9\f\u00a9\16\u00a9\u0b7d\13"+
		"\u00a9\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\7\u00aa\u0b84\n\u00aa\f"+
		"\u00aa\16\u00aa\u0b87\13\u00aa\3\u00aa\3\u00aa\5\u00aa\u0b8b\n\u00aa\3"+
		"\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0b91\n\u00aa\3\u00aa\3\u00aa\5"+
		"\u00aa\u0b95\n\u00aa\3\u00aa\5\u00aa\u0b98\n\u00aa\3\u00ab\3\u00ab\3\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0ba0\n\u00ab\3\u00ab\5\u00ab\u0ba3\n"+
		"\u00ab\3\u00ab\3\u00ab\5\u00ab\u0ba7\n\u00ab\3\u00ab\3\u00ab\5\u00ab\u0bab"+
		"\n\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0bb0\n\u00ab\3\u00ab\5\u00ab"+
		"\u0bb3\n\u00ab\3\u00ab\3\u00ab\5\u00ab\u0bb7\n\u00ab\3\u00ab\3\u00ab\5"+
		"\u00ab\u0bbb\n\u00ab\7\u00ab\u0bbd\n\u00ab\f\u00ab\16\u00ab\u0bc0\13\u00ab"+
		"\3\u00ab\3\u00ab\3\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\7\u00ac\u0bc9"+
		"\n\u00ac\f\u00ac\16\u00ac\u0bcc\13\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac"+
		"\3\u00ac\3\u00ac\3\u00ac\3\u00ad\3\u00ad\7\u00ad\u0bd7\n\u00ad\f\u00ad"+
		"\16\u00ad\u0bda\13\u00ad\3\u00ae\3\u00ae\5\u00ae\u0bde\n\u00ae\3\u00ae"+
		"\3\u00ae\5\u00ae\u0be2\n\u00ae\3\u00ae\3\u00ae\3\u00af\3\u00af\3\u00af"+
		"\3\u00af\3\u00af\5\u00af\u0beb\n\u00af\3\u00b0\3\u00b0\5\u00b0\u0bef\n"+
		"\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\7\u00b0\u0bf5\n\u00b0\f\u00b0\16"+
		"\u00b0\u0bf8\13\u00b0\5\u00b0\u0bfa\n\u00b0\3\u00b0\5\u00b0\u0bfd\n\u00b0"+
		"\3\u00b0\3\u00b0\5\u00b0\u0c01\n\u00b0\3\u00b0\5\u00b0\u0c04\n\u00b0\3"+
		"\u00b0\5\u00b0\u0c07\n\u00b0\3\u00b0\5\u00b0\u0c0a\n\u00b0\3\u00b1\3\u00b1"+
		"\5\u00b1\u0c0e\n\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b3\3\u00b3\3\u00b3"+
		"\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u0c1a\n\u00b3\3\u00b3\5\u00b3"+
		"\u0c1d\n\u00b3\3\u00b4\3\u00b4\3\u00b4\7\u00b4\u0c22\n\u00b4\f\u00b4\16"+
		"\u00b4\u0c25\13\u00b4\3\u00b5\3\u00b5\7\u00b5\u0c29\n\u00b5\f\u00b5\16"+
		"\u00b5\u0c2c\13\u00b5\3\u00b5\3\u00b5\5\u00b5\u0c30\n\u00b5\3\u00b6\3"+
		"\u00b6\7\u00b6\u0c34\n\u00b6\f\u00b6\16\u00b6\u0c37\13\u00b6\3\u00b6\5"+
		"\u00b6\u0c3a\n\u00b6\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0c3f\n\u00b7\3\u00b7"+
		"\3\u00b7\3\u00b7\7\u00b7\u0c44\n\u00b7\f\u00b7\16\u00b7\u0c47\13\u00b7"+
		"\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0c4c\n\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\3\u00b7\5\u00b7\u0c53\n\u00b7\3\u00b8\5\u00b8\u0c56\n\u00b8\3"+
		"\u00b8\5\u00b8\u0c59\n\u00b8\3\u00b8\3\u00b8\5\u00b8\u0c5d\n\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\5\u00b8\u0c62\n\u00b8\3\u00b8\3\u00b8\7\u00b8\u0c66\n"+
		"\u00b8\f\u00b8\16\u00b8\u0c69\13\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00ba"+
		"\3\u00ba\3\u00ba\3\u00ba\3\u00ba\7\u00ba\u0c73\n\u00ba\f\u00ba\16\u00ba"+
		"\u0c76\13\u00ba\3\u00ba\3\u00ba\3\u00bb\3\u00bb\5\u00bb\u0c7c\n\u00bb"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\7\u00bc\u0c88\n\u00bc\f\u00bc\16\u00bc\u0c8b\13\u00bc\5\u00bc"+
		"\u0c8d\n\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\5\u00bd\u0c97\n\u00bd\3\u00be\3\u00be\5\u00be\u0c9b\n\u00be\3"+
		"\u00be\3\u00be\3\u00be\3\u00be\7\u00be\u0ca1\n\u00be\f\u00be\16\u00be"+
		"\u0ca4\13\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00bf\3\u00bf\3\u00bf"+
		"\3\u00bf\3\u00bf\5\u00bf\u0caf\n\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0"+
		"\3\u00c0\3\u00c0\7\u00c0\u0cb7\n\u00c0\f\u00c0\16\u00c0\u0cba\13\u00c0"+
		"\3\u00c0\3\u00c0\5\u00c0\u0cbe\n\u00c0\3\u00c1\3\u00c1\3\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\7\u00c1\u0cc6\n\u00c1\f\u00c1\16\u00c1\u0cc9\13\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u0cce\n\u00c1\f\u00c1\16\u00c1\u0cd1"+
		"\13\u00c1\5\u00c1\u0cd3\n\u00c1\3\u00c1\3\u00c1\3\u00c2\3\u00c2\5\u00c2"+
		"\u0cd9\n\u00c2\3\u00c3\3\u00c3\5\u00c3\u0cdd\n\u00c3\3\u00c4\3\u00c4\3"+
		"\u00c4\5\u00c4\u0ce2\n\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3"+
		"\u00c4\7\u00c4\u0cea\n\u00c4\f\u00c4\16\u00c4\u0ced\13\u00c4\3\u00c4\3"+
		"\u00c4\5\u00c4\u0cf1\n\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c5\3"+
		"\u00c5\3\u00c5\3\u00c5\3\u00c5\7\u00c5\u0cfc\n\u00c5\f\u00c5\16\u00c5"+
		"\u0cff\13\u00c5\3\u00c5\3\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\7\u00c6\u0d08\n\u00c6\f\u00c6\16\u00c6\u0d0b\13\u00c6\3\u00c6\3\u00c6"+
		"\5\u00c6\u0d0f\n\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6"+
		"\7\u00c6\u0d17\n\u00c6\f\u00c6\16\u00c6\u0d1a\13\u00c6\3\u00c6\3\u00c6"+
		"\5\u00c6\u0d1e\n\u00c6\5\u00c6\u0d20\n\u00c6\3\u00c7\3\u00c7\3\u00c7\5"+
		"\u00c7\u0d25\n\u00c7\3\u00c7\3\u00c7\5\u00c7\u0d29\n\u00c7\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\5\u00c7\u0d2f\n\u00c7\3\u00c7\3\u00c7\5\u00c7\u0d33\n"+
		"\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\3\u00c9\7\u00c9\u0d3e\n\u00c9\f\u00c9\16\u00c9\u0d41\13\u00c9\3\u00c9"+
		"\5\u00c9\u0d44\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9"+
		"\7\u00c9\u0d4c\n\u00c9\f\u00c9\16\u00c9\u0d4f\13\u00c9\5\u00c9\u0d51\n"+
		"\u00c9\5\u00c9\u0d53\n\u00c9\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u0d58\n\u00ca"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\7\u00cb\u0d5f\n\u00cb\f\u00cb"+
		"\16\u00cb\u0d62\13\u00cb\3\u00cb\3\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cc\3\u00cc\7\u00cc\u0d6c\n\u00cc\f\u00cc\16\u00cc\u0d6f\13\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u0d76\n\u00cd\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00cf\3\u00cf\7\u00cf\u0d7d\n\u00cf\f\u00cf\16\u00cf"+
		"\u0d80\13\u00cf\3\u00cf\5\u00cf\u0d83\n\u00cf\3\u00cf\7\u00cf\u0d86\n"+
		"\u00cf\f\u00cf\16\u00cf\u0d89\13\u00cf\3\u00cf\3\u00cf\3\u00d0\3\u00d0"+
		"\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0\u0d93\n\u00d0\5\u00d0\u0d95\n"+
		"\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d2\3\u00d2\3\u00d2\3\u00d2"+
		"\3\u00d2\3\u00d2\3\u00d2\3\u00d2\7\u00d2\u0da3\n\u00d2\f\u00d2\16\u00d2"+
		"\u0da6\13\u00d2\3\u00d3\3\u00d3\5\u00d3\u0daa\n\u00d3\3\u00d3\3\u00d3"+
		"\7\u00d3\u0dae\n\u00d3\f\u00d3\16\u00d3\u0db1\13\u00d3\3\u00d3\3\u00d3"+
		"\3\u00d4\5\u00d4\u0db6\n\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4"+
		"\3\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\7\u00d6\u0dc6\n\u00d6\f\u00d6\16\u00d6\u0dc9\13\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d7\3\u00d7\5\u00d7\u0dcf\n\u00d7\3\u00d7\5\u00d7\u0dd2\n\u00d7\3"+
		"\u00d8\5\u00d8\u0dd5\n\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\7\u00d8\u0ddb"+
		"\n\u00d8\f\u00d8\16\u00d8\u0dde\13\u00d8\5\u00d8\u0de0\n\u00d8\3\u00d8"+
		"\3\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u0de8\n\u00d9\5\u00d9"+
		"\u0dea\n\u00d9\3\u00d9\3\u00d9\5\u00d9\u0dee\n\u00d9\3\u00d9\5\u00d9\u0df1"+
		"\n\u00d9\3\u00da\3\u00da\3\u00da\5\u00da\u0df6\n\u00da\5\u00da\u0df8\n"+
		"\u00da\3\u00da\3\u00da\5\u00da\u0dfc\n\u00da\3\u00da\3\u00da\3\u00da\3"+
		"\u00db\3\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u0e08\n"+
		"\u00dc\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00de\3\u00de\5\u00de"+
		"\u0e11\n\u00de\3\u00de\3\u00de\3\u00de\3\u00de\7\u00de\u0e17\n\u00de\f"+
		"\u00de\16\u00de\u0e1a\13\u00de\3\u00df\3\u00df\5\u00df\u0e1e\n\u00df\3"+
		"\u00df\3\u00df\5\u00df\u0e22\n\u00df\3\u00e0\3\u00e0\3\u00e0\5\u00e0\u0e27"+
		"\n\u00e0\3\u00e0\5\u00e0\u0e2a\n\u00e0\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\7\u00e1\u0e30\n\u00e1\f\u00e1\16\u00e1\u0e33\13\u00e1\3\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\3\u00e2\5\u00e2\u0e3a\n\u00e2\3\u00e3\3\u00e3\3\u00e3"+
		"\3\u00e3\5\u00e3\u0e40\n\u00e3\3\u00e3\5\u00e3\u0e43\n\u00e3\3\u00e3\5"+
		"\u00e3\u0e46\n\u00e3\3\u00e4\3\u00e4\3\u00e4\3\u00e4\7\u00e4\u0e4c\n\u00e4"+
		"\f\u00e4\16\u00e4\u0e4f\13\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\5\u00e4\u0e58\n\u00e4\3\u00e5\3\u00e5\3\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\7\u00e5\u0e62\n\u00e5\f\u00e5\16\u00e5"+
		"\u0e65\13\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u0e6b\n\u00e5"+
		"\3\u00e6\3\u00e6\5\u00e6\u0e6f\n\u00e6\3\u00e6\3\u00e6\5\u00e6\u0e73\n"+
		"\u00e6\3\u00e6\5\u00e6\u0e76\n\u00e6\3\u00e6\5\u00e6\u0e79\n\u00e6\3\u00e7"+
		"\3\u00e7\3\u00e7\5\u00e7\u0e7e\n\u00e7\3\u00e8\3\u00e8\3\u00e8\5\u00e8"+
		"\u0e83\n\u00e8\3\u00e8\5\u00e8\u0e86\n\u00e8\3\u00e8\5\u00e8\u0e89\n\u00e8"+
		"\3\u00e9\3\u00e9\6\u00e9\u0e8d\n\u00e9\r\u00e9\16\u00e9\u0e8e\3\u00e9"+
		"\5\u00e9\u0e92\n\u00e9\3\u00e9\3\u00e9\3\u00ea\3\u00ea\5\u00ea\u0e98\n"+
		"\u00ea\3\u00ea\5\u00ea\u0e9b\n\u00ea\3\u00eb\5\u00eb\u0e9e\n\u00eb\3\u00eb"+
		"\6\u00eb\u0ea1\n\u00eb\r\u00eb\16\u00eb\u0ea2\3\u00eb\5\u00eb\u0ea6\n"+
		"\u00eb\3\u00ec\3\u00ec\3\u00ec\3\u00ec\6\u00ec\u0eac\n\u00ec\r\u00ec\16"+
		"\u00ec\u0ead\3\u00ed\3\u00ed\6\u00ed\u0eb2\n\u00ed\r\u00ed\16\u00ed\u0eb3"+
		"\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\3\u00ee\7\u00ee\u0ebc\n\u00ee"+
		"\f\u00ee\16\u00ee\u0ebf\13\u00ee\3\u00ee\3\u00ee\5\u00ee\u0ec3\n\u00ee"+
		"\3\u00ef\3\u00ef\3\u00ef\3\u00f0\3\u00f0\3\u00f0\3\u00f0\5\u00f0\u0ecc"+
		"\n\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0\3\u00f0"+
		"\5\u00f0\u0ed6\n\u00f0\3\u00f0\3\u00f0\5\u00f0\u0eda\n\u00f0\5\u00f0\u0edc"+
		"\n\u00f0\3\u00f0\5\u00f0\u0edf\n\u00f0\3\u00f1\3\u00f1\3\u00f1\3\u00f1"+
		"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\7\u00f1\u0ee9\n\u00f1\f\u00f1\16\u00f1"+
		"\u0eec\13\u00f1\3\u00f1\5\u00f1\u0eef\n\u00f1\3\u00f1\5\u00f1\u0ef2\n"+
		"\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f4"+
		"\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\7\u00f4"+
		"\u0f04\n\u00f4\f\u00f4\16\u00f4\u0f07\13\u00f4\3\u00f4\3\u00f4\5\u00f4"+
		"\u0f0b\n\u00f4\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u0f10\n\u00f4\3\u00f5\3"+
		"\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u0f17\n\u00f5\3\u00f5\5\u00f5\u0f1a"+
		"\n\u00f5\3\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\7\u00f6\u0f21\n\u00f6"+
		"\f\u00f6\16\u00f6\u0f24\13\u00f6\3\u00f6\3\u00f6\3\u00f6\3\u00f6\5\u00f6"+
		"\u0f2a\n\u00f6\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u0f2f\n\u00f7\3\u00f8\3"+
		"\u00f8\5\u00f8\u0f33\n\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3"+
		"\u00f9\5\u00f9\u0f3b\n\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9\5\u00f9\u0f41"+
		"\n\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u0f49"+
		"\n\u00fa\3\u00fa\5\u00fa\u0f4c\n\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\7\u00fb\u0f52\n\u00fb\f\u00fb\16\u00fb\u0f55\13\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fc\3\u00fc\3\u00fc\5\u00fc\u0f5c\n\u00fc\3\u00fc\5\u00fc\u0f5f\n"+
		"\u00fc\3\u00fc\5\u00fc\u0f62\n\u00fc\3\u00fd\3\u00fd\3\u00fd\3\u00fe\3"+
		"\u00fe\3\u00fe\3\u00fe\5\u00fe\u0f6b\n\u00fe\3\u00ff\3\u00ff\3\u00ff\3"+
		"\u00ff\5\u00ff\u0f71\n\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u00ff\5\u00ff\u0f77"+
		"\n\u00ff\5\u00ff\u0f79\n\u00ff\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100"+
		"\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0100\5\u0100\u0f86\n\u0100"+
		"\5\u0100\u0f88\n\u0100\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101\3\u0101"+
		"\3\u0101\5\u0101\u0f91\n\u0101\5\u0101\u0f93\n\u0101\3\u0102\3\u0102\5"+
		"\u0102\u0f97\n\u0102\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u0f9d\n\u0102"+
		"\3\u0102\3\u0102\5\u0102\u0fa1\n\u0102\3\u0103\3\u0103\3\u0103\3\u0103"+
		"\3\u0103\3\u0104\3\u0104\3\u0104\3\u0104\3\u0104\3\u0105\3\u0105\5\u0105"+
		"\u0faf\n\u0105\3\u0105\3\u0105\7\u0105\u0fb3\n\u0105\f\u0105\16\u0105"+
		"\u0fb6\13\u0105\3\u0105\3\u0105\3\u0106\3\u0106\3\u0107\3\u0107\5\u0107"+
		"\u0fbe\n\u0107\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\7\u0108"+
		"\u0fc6\n\u0108\f\u0108\16\u0108\u0fc9\13\u0108\3\u0109\3\u0109\3\u0109"+
		"\3\u0109\3\u0109\3\u0109\7\u0109\u0fd1\n\u0109\f\u0109\16\u0109\u0fd4"+
		"\13\u0109\3\u010a\3\u010a\3\u010a\5\u010a\u0fd9\n\u010a\3\u010b\3\u010b"+
		"\3\u010b\5\u010b\u0fde\n\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u0fe9\n\u010b\3\u010b\3\u010b"+
		"\5\u010b\u0fed\n\u010b\3\u010b\3\u010b\3\u010b\7\u010b\u0ff2\n\u010b\f"+
		"\u010b\16\u010b\u0ff5\13\u010b\3\u010b\3\u010b\5\u010b\u0ff9\n\u010b\7"+
		"\u010b\u0ffb\n\u010b\f\u010b\16\u010b\u0ffe\13\u010b\3\u010c\3\u010c\3"+
		"\u010c\5\u010c\u1003\n\u010c\3\u010c\3\u010c\5\u010c\u1007\n\u010c\3\u010d"+
		"\3\u010d\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\7\u010e"+
		"\u1012\n\u010e\f\u010e\16\u010e\u1015\13\u010e\3\u010f\3\u010f\5\u010f"+
		"\u1019\n\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\5\u010f\u1022\n\u010f\5\u010f\u1024\n\u010f\5\u010f\u1026\n\u010f\3\u0110"+
		"\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110\5\u0110\u102e\n\u0110\3\u0111"+
		"\3\u0111\3\u0112\3\u0112\3\u0112\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113"+
		"\3\u0113\3\u0113\3\u0113\7\u0113\u103d\n\u0113\f\u0113\16\u0113\u1040"+
		"\13\u0113\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\5\u0113\u1047\n\u0113"+
		"\3\u0114\3\u0114\3\u0114\3\u0114\3\u0115\3\u0115\3\u0115\3\u0115\7\u0115"+
		"\u1051\n\u0115\f\u0115\16\u0115\u1054\13\u0115\3\u0116\3\u0116\3\u0116"+
		"\7\u0116\u1059\n\u0116\f\u0116\16\u0116\u105c\13\u0116\3\u0117\3\u0117"+
		"\3\u0117\7\u0117\u1061\n\u0117\f\u0117\16\u0117\u1064\13\u0117\3\u0118"+
		"\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\5\u0118\u106c\n\u0118\3\u0118"+
		"\5\u0118\u106f\n\u0118\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119"+
		"\u1076\n\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119"+
		"\u107e\n\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u1085\n"+
		"\u0119\3\u0119\3\u0119\5\u0119\u1089\n\u0119\3\u011a\3\u011a\3\u011a\3"+
		"\u011a\3\u011a\5\u011a\u1090\n\u011a\3\u011b\3\u011b\5\u011b\u1094\n\u011b"+
		"\3\u011b\3\u011b\3\u011b\5\u011b\u1099\n\u011b\7\u011b\u109b\n\u011b\f"+
		"\u011b\16\u011b\u109e\13\u011b\3\u011b\3\u011b\3\u011b\7\u011b\u10a3\n"+
		"\u011b\f\u011b\16\u011b\u10a6\13\u011b\3\u011b\5\u011b\u10a9\n\u011b\3"+
		"\u011c\3\u011c\3\u011c\3\u011c\3\u011c\5\u011c\u10b0\n\u011c\3\u011c\3"+
		"\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\5\u011c\u10b9\n\u011c\3"+
		"\u011d\3\u011d\3\u011d\3\u011e\3\u011e\3\u011f\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\7\u011f\u10c5\n\u011f\f\u011f\16\u011f\u10c8\13\u011f\3\u011f"+
		"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\7\u011f\u10d2"+
		"\n\u011f\f\u011f\16\u011f\u10d5\13\u011f\3\u011f\3\u011f\5\u011f\u10d9"+
		"\n\u011f\3\u011f\3\u011f\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120"+
		"\3\u0120\5\u0120\u10ed\n\u0120\3\u0121\3\u0121\5\u0121\u10f1\n\u0121\3"+
		"\u0122\5\u0122\u10f4\n\u0122\3\u0122\3\u0122\3\u0122\6\u0122\u10f9\n\u0122"+
		"\r\u0122\16\u0122\u10fa\3\u0122\5\u0122\u10fe\n\u0122\3\u0122\3\u0122"+
		"\5\u0122\u1102\n\u0122\3\u0122\5\u0122\u1105\n\u0122\3\u0123\3\u0123\3"+
		"\u0123\3\u0123\3\u0123\5\u0123\u110c\n\u0123\3\u0124\5\u0124\u110f\n\u0124"+
		"\3\u0124\3\u0124\6\u0124\u1113\n\u0124\r\u0124\16\u0124\u1114\3\u0124"+
		"\5\u0124\u1118\n\u0124\3\u0124\3\u0124\5\u0124\u111c\n\u0124\3\u0124\5"+
		"\u0124\u111f\n\u0124\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u1126"+
		"\n\u0125\3\u0126\3\u0126\3\u0126\5\u0126\u112b\n\u0126\3\u0127\3\u0127"+
		"\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\7\u0127"+
		"\u1137\n\u0127\f\u0127\16\u0127\u113a\13\u0127\3\u0127\3\u0127\3\u0127"+
		"\5\u0127\u113f\n\u0127\5\u0127\u1141\n\u0127\3\u0128\3\u0128\5\u0128\u1145"+
		"\n\u0128\3\u0129\3\u0129\3\u0129\3\u0129\7\u0129\u114b\n\u0129\f\u0129"+
		"\16\u0129\u114e\13\u0129\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a"+
		"\3\u012a\3\u012a\3\u012a\5\u012a\u1159\n\u012a\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u1162\n\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u116b\n\u012b\3\u012b"+
		"\3\u012b\5\u012b\u116f\n\u012b\3\u012b\3\u012b\5\u012b\u1173\n\u012b\3"+
		"\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\7\u012b\u117c\n"+
		"\u012b\f\u012b\16\u012b\u117f\13\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u1194\n\u012b"+
		"\3\u012b\5\u012b\u1197\n\u012b\3\u012b\5\u012b\u119a\n\u012b\3\u012b\3"+
		"\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u11a4\n"+
		"\u012b\3\u012b\3\u012b\5\u012b\u11a8\n\u012b\3\u012c\3\u012c\3\u012c\5"+
		"\u012c\u11ad\n\u012c\3\u012d\3\u012d\3\u012d\5\u012d\u11b2\n\u012d\3\u012e"+
		"\3\u012e\3\u012e\5\u012e\u11b7\n\u012e\3\u012e\3\u012e\3\u012e\3\u012e"+
		"\3\u012e\3\u012e\3\u012e\5\u012e\u11c0\n\u012e\3\u012e\5\u012e\u11c3\n"+
		"\u012e\5\u012e\u11c5\n\u012e\3\u012e\3\u012e\5\u012e\u11c9\n\u012e\3\u012e"+
		"\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u11d0\n\u012e\3\u012e\3\u012e"+
		"\3\u012e\3\u012e\3\u012e\5\u012e\u11d7\n\u012e\3\u012e\3\u012e\3\u012e"+
		"\3\u012e\3\u012e\3\u012e\5\u012e\u11df\n\u012e\3\u012e\3\u012e\3\u012e"+
		"\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\7\u012e\u11e9\n\u012e\f\u012e"+
		"\16\u012e\u11ec\13\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e"+
		"\3\u012e\7\u012e\u11f5\n\u012e\f\u012e\16\u012e\u11f8\13\u012e\3\u012e"+
		"\3\u012e\5\u012e\u11fc\n\u012e\3\u012f\3\u012f\3\u012f\5\u012f\u1201\n"+
		"\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u1206\n\u012f\3\u012f\3\u012f\3"+
		"\u012f\3\u012f\5\u012f\u120c\n\u012f\3\u012f\5\u012f\u120f\n\u012f\3\u012f"+
		"\3\u012f\5\u012f\u1213\n\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\5\u012f\u121d\n\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u1229"+
		"\n\u012f\5\u012f\u122b\n\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\5\u012f\u1232\n\u012f\3\u012f\3\u012f\5\u012f\u1236\n\u012f\3\u012f\3"+
		"\u012f\3\u012f\3\u012f\3\u012f\6\u012f\u123d\n\u012f\r\u012f\16\u012f"+
		"\u123e\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f"+
		"\u1248\n\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u1256\n\u012f\3\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\7\u012f\u125f\n\u012f"+
		"\f\u012f\16\u012f\u1262\13\u012f\3\u012f\5\u012f\u1265\n\u012f\3\u012f"+
		"\5\u012f\u1268\n\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\5\u012f\u1271\n\u012f\3\u012f\3\u012f\7\u012f\u1275\n\u012f\f"+
		"\u012f\16\u012f\u1278\13\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\5\u012f\u1281\n\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\3\u012f\5\u012f\u1289\n\u012f\3\u012f\5\u012f\u128c\n\u012f\3"+
		"\u012f\5\u012f\u128f\n\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3"+
		"\u012f\3\u012f\5\u012f\u1298\n\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u129d"+
		"\n\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\7\u012f\u12a4\n\u012f"+
		"\f\u012f\16\u012f\u12a7\13\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u12ac"+
		"\n\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u12b1\n\u012f\3\u012f\5\u012f"+
		"\u12b4\n\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u12b9\n\u012f\3\u012f\3"+
		"\u012f\3\u012f\5\u012f\u12be\n\u012f\7\u012f\u12c0\n\u012f\f\u012f\16"+
		"\u012f\u12c3\13\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u12c8\n\u012f\3"+
		"\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u12ce\n\u012f\3\u012f\3\u012f\3"+
		"\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u12d7\n\u012f\3\u012f\3"+
		"\u012f\3\u012f\5\u012f\u12dc\n\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3"+
		"\u012f\3\u012f\5\u012f\u12e4\n\u012f\3\u012f\3\u012f\5\u012f\u12e8\n\u012f"+
		"\3\u012f\3\u012f\3\u012f\5\u012f\u12ed\n\u012f\3\u012f\3\u012f\3\u012f"+
		"\3\u012f\5\u012f\u12f3\n\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f"+
		"\5\u012f\u12fa\n\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u12ff\n\u012f\3"+
		"\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u1306\n\u012f\3\u012f\3"+
		"\u012f\5\u012f\u130a\n\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u130f\n\u012f"+
		"\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u1317\n\u012f"+
		"\3\u012f\5\u012f\u131a\n\u012f\3\u012f\5\u012f\u131d\n\u012f\3\u012f\5"+
		"\u012f\u1320\n\u012f\3\u012f\3\u012f\5\u012f\u1324\n\u012f\3\u012f\3\u012f"+
		"\3\u012f\5\u012f\u1329\n\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u132e\n"+
		"\u012f\3\u012f\3\u012f\5\u012f\u1332\n\u012f\3\u012f\3\u012f\3\u012f\3"+
		"\u012f\3\u012f\5\u012f\u1339\n\u012f\3\u012f\3\u012f\3\u012f\5\u012f\u133e"+
		"\n\u012f\5\u012f\u1340\n\u012f\3\u0130\3\u0130\3\u0131\3\u0131\3\u0132"+
		"\3\u0132\3\u0133\3\u0133\3\u0133\5\u0133\u134b\n\u0133\3\u0133\3\u0133"+
		"\5\u0133\u134f\n\u0133\5\u0133\u1351\n\u0133\3\u0133\3\u0133\3\u0134\3"+
		"\u0134\3\u0134\3\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u135c\n\u0134\3"+
		"\u0135\3\u0135\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136\3\u0136"+
		"\5\u0136\u1367\n\u0136\3\u0137\3\u0137\3\u0137\3\u0137\3\u0137\7\u0137"+
		"\u136e\n\u0137\f\u0137\16\u0137\u1371\13\u0137\5\u0137\u1373\n\u0137\3"+
		"\u0138\3\u0138\5\u0138\u1377\n\u0138\3\u0138\5\u0138\u137a\n\u0138\3\u0138"+
		"\3\u0138\5\u0138\u137e\n\u0138\3\u0139\3\u0139\3\u0139\3\u0139\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3\u013a\5\u013a\u138b\n\u013a"+
		"\3\u013b\3\u013b\3\u013b\5\u013b\u1390\n\u013b\3\u013b\3\u013b\3\u013b"+
		"\3\u013b\7\u013b\u1396\n\u013b\f\u013b\16\u013b\u1399\13\u013b\3\u013b"+
		"\3\u013b\3\u013b\3\u013b\5\u013b\u139f\n\u013b\3\u013c\3\u013c\3\u013c"+
		"\5\u013c\u13a4\n\u013c\3\u013c\3\u013c\5\u013c\u13a8\n\u013c\3\u013c\3"+
		"\u013c\3\u013c\5\u013c\u13ad\n\u013c\3\u013d\3\u013d\3\u013d\5\u013d\u13b2"+
		"\n\u013d\3\u013d\5\u013d\u13b5\n\u013d\3\u013d\3\u013d\3\u013d\7\u013d"+
		"\u13ba\n\u013d\f\u013d\16\u013d\u13bd\13\u013d\3\u013d\3\u013d\3\u013e"+
		"\3\u013e\3\u013e\3\u013e\3\u013e\5\u013e\u13c6\n\u013e\3\u013e\3\u013e"+
		"\3\u013e\3\u013e\7\u013e\u13cc\n\u013e\f\u013e\16\u013e\u13cf\13\u013e"+
		"\3\u013e\5\u013e\u13d2\n\u013e\3\u013e\3\u013e\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\5\u013f\u13dc\n\u013f\3\u013f\5\u013f\u13df\n"+
		"\u013f\5\u013f\u13e1\n\u013f\3\u0140\3\u0140\3\u0140\3\u0141\3\u0141\3"+
		"\u0141\3\u0141\3\u0141\5\u0141\u13eb\n\u0141\5\u0141\u13ed\n\u0141\3\u0142"+
		"\3\u0142\3\u0142\3\u0142\5\u0142\u13f3\n\u0142\3\u0143\3\u0143\3\u0143"+
		"\3\u0143\5\u0143\u13f9\n\u0143\5\u0143\u13fb\n\u0143\3\u0144\3\u0144\3"+
		"\u0144\3\u0145\3\u0145\3\u0145\3\u0146\3\u0146\3\u0146\3\u0146\3\u0146"+
		"\3\u0146\5\u0146\u1409\n\u0146\5\u0146\u140b\n\u0146\3\u0147\3\u0147\3"+
		"\u0147\3\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u1414\n\u0147\3\u0147\5"+
		"\u0147\u1417\n\u0147\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3\u0148\3"+
		"\u0148\5\u0148\u1420\n\u0148\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3"+
		"\u0149\3\u0149\5\u0149\u1429\n\u0149\3\u014a\3\u014a\3\u014b\3\u014b\3"+
		"\u014c\3\u014c\3\u014c\3\u014c\5\u014c\u1433\n\u014c\3\u014d\3\u014d\3"+
		"\u014e\3\u014e\5\u014e\u1439\n\u014e\3\u014e\3\u014e\3\u014f\5\u014f\u143e"+
		"\n\u014f\3\u014f\3\u014f\5\u014f\u1442\n\u014f\3\u014f\5\u014f\u1445\n"+
		"\u014f\3\u0150\3\u0150\5\u0150\u1449\n\u0150\3\u0151\3\u0151\3\u0152\3"+
		"\u0152\3\u0152\5\u0152\u1450\n\u0152\3\u0153\3\u0153\3\u0153\3\u0153\3"+
		"\u0154\3\u0154\3\u0154\3\u0154\7\u0154\u145a\n\u0154\f\u0154\16\u0154"+
		"\u145d\13\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\3\u0154\7\u0154"+
		"\u1465\n\u0154\f\u0154\16\u0154\u1468\13\u0154\5\u0154\u146a\n\u0154\3"+
		"\u0155\3\u0155\5\u0155\u146e\n\u0155\3\u0156\3\u0156\3\u0157\3\u0157\3"+
		"\u0158\3\u0158\3\u0159\3\u0159\3\u015a\3\u015a\3\u015b\3\u015b\3\u015c"+
		"\3\u015c\3\u015c\7\u015c\u147f\n\u015c\f\u015c\16\u015c\u1482\13\u015c"+
		"\3\u015c\3\u015c\5\u015c\u1486\n\u015c\3\u015d\3\u015d\3\u015e\3\u015e"+
		"\3\u015e\5\u015e\u148d\n\u015e\3\u015f\3\u015f\3\u0160\3\u0160\3\u0161"+
		"\3\u0161\3\u0162\3\u0162\3\u0162\7\u0162\u1498\n\u0162\f\u0162\16\u0162"+
		"\u149b\13\u0162\3\u0163\3\u0163\3\u0164\3\u0164\3\u0164\7\u0164\u14a2"+
		"\n\u0164\f\u0164\16\u0164\u14a5\13\u0164\3\u0164\3\u0164\5\u0164\u14a9"+
		"\n\u0164\3\u0165\3\u0165\3\u0166\3\u0166\3\u0166\7\u0166\u14b0\n\u0166"+
		"\f\u0166\16\u0166\u14b3\13\u0166\3\u0167\3\u0167\3\u0167\7\u0167\u14b8"+
		"\n\u0167\f\u0167\16\u0167\u14bb\13\u0167\3\u0168\3\u0168\3\u0168\7\u0168"+
		"\u14c0\n\u0168\f\u0168\16\u0168\u14c3\13\u0168\3\u0169\3\u0169\3\u0169"+
		"\5\u0169\u14c8\n\u0169\3\u016a\3\u016a\3\u016a\5\u016a\u14cd\n\u016a\3"+
		"\u016b\3\u016b\3\u016b\5\u016b\u14d2\n\u016b\3\u016c\3\u016c\5\u016c\u14d6"+
		"\n\u016c\3\u016c\3\u016c\3\u016c\5\u016c\u14db\n\u016c\3\u016c\5\u016c"+
		"\u14de\n\u016c\3\u016d\3\u016d\3\u016e\3\u016e\5\u016e\u14e4\n\u016e\3"+
		"\u016f\3\u016f\5\u016f\u14e8\n\u016f\3\u0170\3\u0170\3\u0170\5\u0170\u14ed"+
		"\n\u0170\3\u0171\3\u0171\3\u0172\3\u0172\3\u0172\7\u0172\u14f4\n\u0172"+
		"\f\u0172\16\u0172\u14f7\13\u0172\3\u0173\3\u0173\3\u0173\5\u0173\u14fc"+
		"\n\u0173\3\u0173\3\u0173\3\u0173\5\u0173\u1501\n\u0173\3\u0174\3\u0174"+
		"\3\u0174\7\u0174\u1506\n\u0174\f\u0174\16\u0174\u1509\13\u0174\3\u0175"+
		"\3\u0175\3\u0176\3\u0176\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177\3\u0177"+
		"\3\u0177\5\u0177\u1516\n\u0177\3\u0178\3\u0178\5\u0178\u151a\n\u0178\3"+
		"\u0178\3\u0178\7\u0178\u151e\n\u0178\f\u0178\16\u0178\u1521\13\u0178\3"+
		"\u0178\3\u0178\5\u0178\u1525\n\u0178\3\u0179\3\u0179\3\u0179\5\u0179\u152a"+
		"\n\u0179\5\u0179\u152c\n\u0179\3\u0179\3\u0179\3\u0179\5\u0179\u1531\n"+
		"\u0179\7\u0179\u1533\n\u0179\f\u0179\16\u0179\u1536\13\u0179\3\u0179\3"+
		"\u0179\5\u0179\u153a\n\u0179\3\u017a\3\u017a\3\u017a\3\u017a\3\u017a\5"+
		"\u017a\u1541\n\u017a\3\u017a\3\u017a\3\u017a\5\u017a\u1546\n\u017a\5\u017a"+
		"\u1548\n\u017a\5\u017a\u154a\n\u017a\3\u017a\3\u017a\3\u017a\3\u017a\3"+
		"\u017a\3\u017a\3\u017a\3\u017a\5\u017a\u1554\n\u017a\3\u017a\3\u017a\3"+
		"\u017a\5\u017a\u1559\n\u017a\7\u017a\u155b\n\u017a\f\u017a\16\u017a\u155e"+
		"\13\u017a\5\u017a\u1560\n\u017a\3\u017a\3\u017a\5\u017a\u1564\n\u017a"+
		"\3\u017b\3\u017b\3\u017b\3\u017c\3\u017c\3\u017c\3\u017c\5\u017c\u156d"+
		"\n\u017c\3\u017c\3\u017c\3\u017d\3\u017d\5\u017d\u1573\n\u017d\3\u017d"+
		"\3\u017d\5\u017d\u1577\n\u017d\5\u017d\u1579\n\u017d\3\u017e\3\u017e\5"+
		"\u017e\u157d\n\u017e\3\u017e\3\u017e\5\u017e\u1581\n\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\5\u017e\u1588\n\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\5\u017e\u1590\n\u017e\3\u017e\3\u017e\3\u017e"+
		"\3\u017e\3\u017e\3\u017e\5\u017e\u1598\n\u017e\5\u017e\u159a\n\u017e\3"+
		"\u017f\3\u017f\3\u017f\3\u017f\5\u017f\u15a0\n\u017f\3\u017f\5\u017f\u15a3"+
		"\n\u017f\3\u017f\3\u017f\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\5\u0180\u15bb\n\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\5\u0180\u15c2\n\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180\3\u0180"+
		"\3\u0180\3\u0180\5\u0180\u15e3\n\u0180\3\u0181\3\u0181\3\u0181\5\u0181"+
		"\u15e8\n\u0181\3\u0181\5\u0181\u15eb\n\u0181\3\u0181\3\u0181\3\u0181\5"+
		"\u0181\u15f0\n\u0181\5\u0181\u15f2\n\u0181\3\u0181\3\u0181\7\u0181\u15f6"+
		"\n\u0181\f\u0181\16\u0181\u15f9\13\u0181\3\u0182\3\u0182\3\u0182\7\u0182"+
		"\u15fe\n\u0182\f\u0182\16\u0182\u1601\13\u0182\3\u0183\3\u0183\5\u0183"+
		"\u1605\n\u0183\3\u0183\3\u0183\3\u0183\7\u0183\u160a\n\u0183\f\u0183\16"+
		"\u0183\u160d\13\u0183\3\u0183\3\u0183\5\u0183\u1611\n\u0183\3\u0183\5"+
		"\u0183\u1614\n\u0183\3\u0184\3\u0184\5\u0184\u1618\n\u0184\3\u0184\3\u0184"+
		"\3\u0184\7\u0184\u161d\n\u0184\f\u0184\16\u0184\u1620\13\u0184\3\u0185"+
		"\3\u0185\3\u0185\5\u0185\u1625\n\u0185\3\u0185\3\u0185\3\u0185\3\u0185"+
		"\5\u0185\u162b\n\u0185\3\u0185\3\u0185\3\u0185\3\u0185\5\u0185\u1631\n"+
		"\u0185\3\u0185\3\u0185\3\u0185\3\u0185\5\u0185\u1637\n\u0185\3\u0185\3"+
		"\u0185\3\u0185\5\u0185\u163c\n\u0185\5\u0185\u163e\n\u0185\3\u0185\5\u0185"+
		"\u1641\n\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185"+
		"\3\u0185\5\u0185\u164b\n\u0185\3\u0185\5\u0185\u164e\n\u0185\5\u0185\u1650"+
		"\n\u0185\5\u0185\u1652\n\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185"+
		"\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\5\u0185\u1660"+
		"\n\u0185\3\u0186\3\u0186\3\u0187\3\u0187\3\u0187\3\u0188\3\u0188\3\u0189"+
		"\3\u0189\5\u0189\u166b\n\u0189\3\u0189\3\u0189\3\u018a\3\u018a\5\u018a"+
		"\u1671\n\u018a\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b\3\u018b"+
		"\5\u018b\u167a\n\u018b\3\u018c\3\u018c\3\u018c\5\u018c\u167f\n\u018c\3"+
		"\u018d\3\u018d\3\u018d\5\u018d\u1684\n\u018d\3\u018e\3\u018e\3\u018e\5"+
		"\u018e\u1689\n\u018e\3\u018f\3\u018f\3\u018f\3\u018f\3\u0190\3\u0190\3"+
		"\u0191\3\u0191\3\u0192\3\u0192\3\u0192\2\5\u020e\u0210\u021a\u0193\2\4"+
		"\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNP"+
		"RTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e"+
		"\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6"+
		"\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be"+
		"\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6"+
		"\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee"+
		"\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106"+
		"\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e"+
		"\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136"+
		"\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e"+
		"\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166"+
		"\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e"+
		"\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196"+
		"\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae"+
		"\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6"+
		"\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de"+
		"\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6"+
		"\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e"+
		"\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226"+
		"\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e"+
		"\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256"+
		"\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e"+
		"\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286"+
		"\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e"+
		"\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6"+
		"\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce"+
		"\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6"+
		"\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe"+
		"\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314\u0316"+
		"\u0318\u031a\u031c\u031e\u0320\u0322\2V\3\2\u020b\u020b\4\2\16\16\u00be"+
		"\u00be\4\2\7\7\u0125\u0125\4\2\u00a1\u00a1\u0134\u0134\4\2\67\67\u0110"+
		"\u0110\5\2\"\"\u0117\u0117\u0172\u0172\4\2nnzz\4\2\5\5\31\31\5\2ii\u00b5"+
		"\u00b5\u01a0\u01a0\5\2\u00f2\u00f2\u0109\u0109\u011a\u011a\4\2\u0098\u0098"+
		"\u01a6\u01a6\4\2\"\"\u0172\u0172\4\2\4\4ss\5\2\4\4ss\u00e6\u00e6\5\2V"+
		"V\u010f\u010f\u0173\u0173\4\2\u00da\u00da\u0110\u0110\4\2\u00de\u00de"+
		"\u017a\u017a\5\2\u0090\u0090\u00b6\u00b6\u0116\u0116\4\2TThh\6\2\u00a8"+
		"\u00a8\u00b4\u00b4\u00f6\u00f6\u0113\u0113\4\2ee\u0208\u0208\3\3\u020b"+
		"\u020b\3\2\u0145\u0146\4\2\u010b\u010b\u01ba\u01ba\3\2EF\4\2gg\u00a7\u00a7"+
		"\4\2\u00ff\u00ff\u01b0\u01b0\4\2\30\30\u00a7\u00a7\4\2%%jj\5\2\b\bpp\u019c"+
		"\u019c\4\2QQ\u00eb\u00eb\5\2\u009b\u009b\u00c9\u00c9\u014a\u014a\4\2\u0156"+
		"\u0156\u0188\u0188\5\2\u0156\u0156\u0170\u0170\u0188\u0188\4\2\u0085\u0085"+
		"\u00a9\u00a9\4\2RR\u014c\u014c\4\2\u00a6\u00a6\u00c3\u00c3\4\2\b\b\u01a1"+
		"\u01a1\4\2\26\26\u015e\u015e\4\2\17\17kk\4\2\u0091\u0091\u00c6\u00c6\4"+
		"\2\b\b\u0091\u0091\3\2\u0184\u0185\4\2\u00de\u00de\u017d\u017d\3\2\u00cc"+
		"\u00cf\3\2\u0203\u0204\4\2\u0202\u0202\u0206\u0206\4\2dd\u00ab\u00ab\6"+
		"\2\b\b\f\f\u0088\u0088\u0171\u0171\5\2$$\u00c8\u00c8\u0191\u0191\4\2\b"+
		"\bpp\4\2//\u01be\u01be\4\2pp\u019c\u019c\3\2\u011e\u0121\4\2,,??\4\2\u0092"+
		"\u0092\u00c7\u00c7\4\2\61\61\u00ef\u00ef\4\2\u01bf\u01bf\u01c2\u01c2\4"+
		"\2}}\u00f8\u00f8\4\2\u0081\u0081\u00e9\u00e9\4\2HHqq\4\2\u00a3\u00a3\u0167"+
		"\u0167\7\2\u01db\u01dd\u01df\u01e4\u01e6\u01e7\u01e9\u01e9\u01ed\u01f0"+
		"\3\2\u01d4\u01da\3\2\u01ce\u01d3\4\2\u0134\u0134\u014f\u014f\4\2\u0094"+
		"\u0094\u012d\u012d\4\2\u00fd\u00fd\u0155\u0155\4\2\u0112\u0112\u0174\u0174"+
		"\5\2\u008d\u008d\u0181\u0181\u01b1\u01b1\4\2==\u014b\u014b\5\2==\u00fb"+
		"\u00fb\u014b\u014b\4\2\u011b\u011b\u017e\u017e\4\2\u00a6\u00a6\u0141\u0141"+
		"\3\2\u0122\u0123\4\2[[\u01ca\u01ca\4\2\u00e7\u00e7\u0158\u0158\4\2((\60"+
		"\60\b\2[[\u00a4\u00a4\u00e1\u00e1\u00e7\u00e7\u0158\u0158\u01ca\u01ca"+
		"\3\2\u01f9\u01fa\4\2\u01f4\u01f4\u01fb\u01fbO\2\3\7\n\n\r\r\20\31\34$"+
		"&&()+-/\62\64\6799;ADOQRTY[acdfhloqrtvy{}\u0085\u0087\u0087\u0089\u008d"+
		"\u0090\u0095\u0097\u0098\u009b\u009c\u00a0\u00a1\u00a3\u00a4\u00a6\u00a7"+
		"\u00a9\u00ac\u00ae\u00b4\u00b6\u00b9\u00bb\u00bb\u00bd\u00bd\u00bf\u00cb"+
		"\u00cd\u00d1\u00d3\u00df\u00e1\u00e3\u00e5\u00f4\u00f6\u00f8\u00fb\u00fb"+
		"\u00fd\u00fd\u0101\u0105\u0107\u0109\u010b\u010c\u010f\u010f\u0111\u011d"+
		"\u0125\u0125\u0127\u0127\u0129\u012f\u0133\u013a\u013c\u0148\u014a\u0156"+
		"\u0158\u015a\u015c\u015c\u015e\u0165\u0167\u016c\u016e\u0175\u0177\u0182"+
		"\u0187\u018f\u0191\u0195\u0197\u019a\u019d\u019d\u019f\u019f\u01a1\u01a4"+
		"\u01a6\u01a7\u01a9\u01b2\u01b4\u01b4\u01b6\u01b6\u01b8\u01dd\u01df\u01e4"+
		"\u01e6\u01e7\u01e9\u01ea\u01ec\u01f0\u021f\u021f\5\2\64\64\u01de\u01de"+
		"\u01ea\u01ec\7\2OO\u01db\u01db\u01e5\u01e5\u01e8\u01e8\u01ed\u01ed\2\u1926"+
		"\2\u0325\3\2\2\2\4\u032c\3\2\2\2\6\u033a\3\2\2\2\b\u035a\3\2\2\2\n\u035c"+
		"\3\2\2\2\f\u0361\3\2\2\2\16\u0374\3\2\2\2\20\u03ab\3\2\2\2\22\u03af\3"+
		"\2\2\2\24\u03c7\3\2\2\2\26\u03cb\3\2\2\2\30\u03d7\3\2\2\2\32\u03e5\3\2"+
		"\2\2\34\u03f2\3\2\2\2\36\u0408\3\2\2\2 \u0424\3\2\2\2\"\u044a\3\2\2\2"+
		"$\u044c\3\2\2\2&\u045d\3\2\2\2(\u047f\3\2\2\2*\u0481\3\2\2\2,\u0486\3"+
		"\2\2\2.\u0499\3\2\2\2\60\u04cb\3\2\2\2\62\u04eb\3\2\2\2\64\u0513\3\2\2"+
		"\2\66\u0518\3\2\2\28\u0531\3\2\2\2:\u0549\3\2\2\2<\u0552\3\2\2\2>\u055b"+
		"\3\2\2\2@\u0564\3\2\2\2B\u0568\3\2\2\2D\u056d\3\2\2\2F\u0585\3\2\2\2H"+
		"\u0587\3\2\2\2J\u058b\3\2\2\2L\u05bf\3\2\2\2N\u05db\3\2\2\2P\u05dd\3\2"+
		"\2\2R\u05eb\3\2\2\2T\u05f7\3\2\2\2V\u05fc\3\2\2\2X\u0602\3\2\2\2Z\u0605"+
		"\3\2\2\2\\\u0610\3\2\2\2^\u061f\3\2\2\2`\u0630\3\2\2\2b\u0641\3\2\2\2"+
		"d\u0649\3\2\2\2f\u064e\3\2\2\2h\u065e\3\2\2\2j\u0662\3\2\2\2l\u067a\3"+
		"\2\2\2n\u067d\3\2\2\2p\u0683\3\2\2\2r\u068f\3\2\2\2t\u0698\3\2\2\2v\u06b4"+
		"\3\2\2\2x\u06ba\3\2\2\2z\u06bd\3\2\2\2|\u06c4\3\2\2\2~\u06cc\3\2\2\2\u0080"+
		"\u06d8\3\2\2\2\u0082\u06da\3\2\2\2\u0084\u06de\3\2\2\2\u0086\u06e4\3\2"+
		"\2\2\u0088\u0700\3\2\2\2\u008a\u0722\3\2\2\2\u008c\u0752\3\2\2\2\u008e"+
		"\u075c\3\2\2\2\u0090\u075e\3\2\2\2\u0092\u0763\3\2\2\2\u0094\u0771\3\2"+
		"\2\2\u0096\u0773\3\2\2\2\u0098\u0778\3\2\2\2\u009a\u0788\3\2\2\2\u009c"+
		"\u07a9\3\2\2\2\u009e\u07cc\3\2\2\2\u00a0\u07d0\3\2\2\2\u00a2\u07df\3\2"+
		"\2\2\u00a4\u07e1\3\2\2\2\u00a6\u07e4\3\2\2\2\u00a8\u07e9\3\2\2\2\u00aa"+
		"\u07f3\3\2\2\2\u00ac\u080f\3\2\2\2\u00ae\u0811\3\2\2\2\u00b0\u0815\3\2"+
		"\2\2\u00b2\u0826\3\2\2\2\u00b4\u082a\3\2\2\2\u00b6\u085d\3\2\2\2\u00b8"+
		"\u085f\3\2\2\2\u00ba\u0866\3\2\2\2\u00bc\u086b\3\2\2\2\u00be\u0875\3\2"+
		"\2\2\u00c0\u0885\3\2\2\2\u00c2\u0892\3\2\2\2\u00c4\u0899\3\2\2\2\u00c6"+
		"\u08a5\3\2\2\2\u00c8\u08b2\3\2\2\2\u00ca\u08b7\3\2\2\2\u00cc\u08ba\3\2"+
		"\2\2\u00ce\u08be\3\2\2\2\u00d0\u08c3\3\2\2\2\u00d2\u08c7\3\2\2\2\u00d4"+
		"\u08d8\3\2\2\2\u00d6\u08e5\3\2\2\2\u00d8\u08f6\3\2\2\2\u00da\u0903\3\2"+
		"\2\2\u00dc\u0910\3\2\2\2\u00de\u0912\3\2\2\2\u00e0\u0920\3\2\2\2\u00e2"+
		"\u0931\3\2\2\2\u00e4\u094a\3\2\2\2\u00e6\u0954\3\2\2\2\u00e8\u0958\3\2"+
		"\2\2\u00ea\u097b\3\2\2\2\u00ec\u0987\3\2\2\2\u00ee\u0992\3\2\2\2\u00f0"+
		"\u0998\3\2\2\2\u00f2\u09a3\3\2\2\2\u00f4\u09af\3\2\2\2\u00f6\u09b7\3\2"+
		"\2\2\u00f8\u09c6\3\2\2\2\u00fa\u09ca\3\2\2\2\u00fc\u09eb\3\2\2\2\u00fe"+
		"\u09ef\3\2\2\2\u0100\u09f4\3\2\2\2\u0102\u09fc\3\2\2\2\u0104\u0a04\3\2"+
		"\2\2\u0106\u0a07\3\2\2\2\u0108\u0a17\3\2\2\2\u010a\u0a1c\3\2\2\2\u010c"+
		"\u0a20\3\2\2\2\u010e\u0a44\3\2\2\2\u0110\u0a46\3\2\2\2\u0112\u0a5c\3\2"+
		"\2\2\u0114\u0a5e\3\2\2\2\u0116\u0a63\3\2\2\2\u0118\u0a65\3\2\2\2\u011a"+
		"\u0a67\3\2\2\2\u011c\u0a69\3\2\2\2\u011e\u0a6d\3\2\2\2\u0120\u0a72\3\2"+
		"\2\2\u0122\u0a78\3\2\2\2\u0124\u0a7e\3\2\2\2\u0126\u0a8c\3\2\2\2\u0128"+
		"\u0aa0\3\2\2\2\u012a\u0aa5\3\2\2\2\u012c\u0ab2\3\2\2\2\u012e\u0ab4\3\2"+
		"\2\2\u0130\u0ac2\3\2\2\2\u0132\u0acc\3\2\2\2\u0134\u0ad2\3\2\2\2\u0136"+
		"\u0ad4\3\2\2\2\u0138\u0ad7\3\2\2\2\u013a\u0adc\3\2\2\2\u013c\u0af4\3\2"+
		"\2\2\u013e\u0b03\3\2\2\2\u0140\u0b05\3\2\2\2\u0142\u0b1a\3\2\2\2\u0144"+
		"\u0b29\3\2\2\2\u0146\u0b3f\3\2\2\2\u0148\u0b46\3\2\2\2\u014a\u0b53\3\2"+
		"\2\2\u014c\u0b56\3\2\2\2\u014e\u0b6b\3\2\2\2\u0150\u0b75\3\2\2\2\u0152"+
		"\u0b7e\3\2\2\2\u0154\u0b99\3\2\2\2\u0156\u0bc4\3\2\2\2\u0158\u0bd4\3\2"+
		"\2\2\u015a\u0be1\3\2\2\2\u015c\u0bea\3\2\2\2\u015e\u0bec\3\2\2\2\u0160"+
		"\u0c0b\3\2\2\2\u0162\u0c0f\3\2\2\2\u0164\u0c1c\3\2\2\2\u0166\u0c1e\3\2"+
		"\2\2\u0168\u0c26\3\2\2\2\u016a\u0c31\3\2\2\2\u016c\u0c52\3\2\2\2\u016e"+
		"\u0c55\3\2\2\2\u0170\u0c6a\3\2\2\2\u0172\u0c6d\3\2\2\2\u0174\u0c79\3\2"+
		"\2\2\u0176\u0c7d\3\2\2\2\u0178\u0c96\3\2\2\2\u017a\u0c98\3\2\2\2\u017c"+
		"\u0ca9\3\2\2\2\u017e\u0cb0\3\2\2\2\u0180\u0cbf\3\2\2\2\u0182\u0cd6\3\2"+
		"\2\2\u0184\u0cdc\3\2\2\2\u0186\u0cde\3\2\2\2\u0188\u0cf6\3\2\2\2\u018a"+
		"\u0d0e\3\2\2\2\u018c\u0d32\3\2\2\2\u018e\u0d34\3\2\2\2\u0190\u0d52\3\2"+
		"\2\2\u0192\u0d57\3\2\2\2\u0194\u0d59\3\2\2\2\u0196\u0d65\3\2\2\2\u0198"+
		"\u0d75\3\2\2\2\u019a\u0d77\3\2\2\2\u019c\u0d7a\3\2\2\2\u019e\u0d94\3\2"+
		"\2\2\u01a0\u0d96\3\2\2\2\u01a2\u0d9a\3\2\2\2\u01a4\u0da9\3\2\2\2\u01a6"+
		"\u0db5\3\2\2\2\u01a8\u0dbd\3\2\2\2\u01aa\u0dc1\3\2\2\2\u01ac\u0dce\3\2"+
		"\2\2\u01ae\u0dd4\3\2\2\2\u01b0\u0de3\3\2\2\2\u01b2\u0df7\3\2\2\2\u01b4"+
		"\u0e00\3\2\2\2\u01b6\u0e02\3\2\2\2\u01b8\u0e09\3\2\2\2\u01ba\u0e0e\3\2"+
		"\2\2\u01bc\u0e1b\3\2\2\2\u01be\u0e23\3\2\2\2\u01c0\u0e2b\3\2\2\2\u01c2"+
		"\u0e39\3\2\2\2\u01c4\u0e3b\3\2\2\2\u01c6\u0e47\3\2\2\2\u01c8\u0e6a\3\2"+
		"\2\2\u01ca\u0e6c\3\2\2\2\u01cc\u0e7a\3\2\2\2\u01ce\u0e7f\3\2\2\2\u01d0"+
		"\u0e91\3\2\2\2\u01d2\u0e95\3\2\2\2\u01d4\u0e9d\3\2\2\2\u01d6\u0ea7\3\2"+
		"\2\2\u01d8\u0eaf\3\2\2\2\u01da\u0eb5\3\2\2\2\u01dc\u0ec4\3\2\2\2\u01de"+
		"\u0ec7\3\2\2\2\u01e0\u0ee0\3\2\2\2\u01e2\u0ef3\3\2\2\2\u01e4\u0ef7\3\2"+
		"\2\2\u01e6\u0efa\3\2\2\2\u01e8\u0f16\3\2\2\2\u01ea\u0f1b\3\2\2\2\u01ec"+
		"\u0f2e\3\2\2\2\u01ee\u0f30\3\2\2\2\u01f0\u0f40\3\2\2\2\u01f2\u0f48\3\2"+
		"\2\2\u01f4\u0f4d\3\2\2\2\u01f6\u0f58\3\2\2\2\u01f8\u0f63\3\2\2\2\u01fa"+
		"\u0f66\3\2\2\2\u01fc\u0f78\3\2\2\2\u01fe\u0f7a\3\2\2\2\u0200\u0f89\3\2"+
		"\2\2\u0202\u0f94\3\2\2\2\u0204\u0fa2\3\2\2\2\u0206\u0fa7\3\2\2\2\u0208"+
		"\u0fac\3\2\2\2\u020a\u0fb9\3\2\2\2\u020c\u0fbd\3\2\2\2\u020e\u0fbf\3\2"+
		"\2\2\u0210\u0fca\3\2\2\2\u0212\u0fd8\3\2\2\2\u0214\u0fda\3\2\2\2\u0216"+
		"\u0fff\3\2\2\2\u0218\u1008\3\2\2\2\u021a\u100a\3\2\2\2\u021c\u1016\3\2"+
		"\2\2\u021e\u102d\3\2\2\2\u0220\u102f\3\2\2\2\u0222\u1031\3\2\2\2\u0224"+
		"\u1046\3\2\2\2\u0226\u1048\3\2\2\2\u0228\u104c\3\2\2\2\u022a\u1055\3\2"+
		"\2\2\u022c\u105d\3\2\2\2\u022e\u1065\3\2\2\2\u0230\u1088\3\2\2\2\u0232"+
		"\u108a\3\2\2\2\u0234\u10a8\3\2\2\2\u0236\u10aa\3\2\2\2\u0238\u10ba\3\2"+
		"\2\2\u023a\u10bd\3\2\2\2\u023c\u10bf\3\2\2\2\u023e\u10ec\3\2\2\2\u0240"+
		"\u10f0\3\2\2\2\u0242\u10f3\3\2\2\2\u0244\u1106\3\2\2\2\u0246\u110e\3\2"+
		"\2\2\u0248\u1120\3\2\2\2\u024a\u1127\3\2\2\2\u024c\u1140\3\2\2\2\u024e"+
		"\u1142\3\2\2\2\u0250\u1146\3\2\2\2\u0252\u114f\3\2\2\2\u0254\u11a7\3\2"+
		"\2\2\u0256\u11ac\3\2\2\2\u0258\u11ae\3\2\2\2\u025a\u11fb\3\2\2\2\u025c"+
		"\u133f\3\2\2\2\u025e\u1341\3\2\2\2\u0260\u1343\3\2\2\2\u0262\u1345\3\2"+
		"\2\2\u0264\u1347\3\2\2\2\u0266\u1354\3\2\2\2\u0268\u135d\3\2\2\2\u026a"+
		"\u1366\3\2\2\2\u026c\u1368\3\2\2\2\u026e\u1379\3\2\2\2\u0270\u137f\3\2"+
		"\2\2\u0272\u138a\3\2\2\2\u0274\u138c\3\2\2\2\u0276\u13a0\3\2\2\2\u0278"+
		"\u13ae\3\2\2\2\u027a\u13c0\3\2\2\2\u027c\u13d5\3\2\2\2\u027e\u13e2\3\2"+
		"\2\2\u0280\u13e5\3\2\2\2\u0282\u13ee\3\2\2\2\u0284\u13f4\3\2\2\2\u0286"+
		"\u13fc\3\2\2\2\u0288\u13ff\3\2\2\2\u028a\u140a\3\2\2\2\u028c\u1413\3\2"+
		"\2\2\u028e\u1418\3\2\2\2\u0290\u1421\3\2\2\2\u0292\u142a\3\2\2\2\u0294"+
		"\u142c\3\2\2\2\u0296\u1432\3\2\2\2\u0298\u1434\3\2\2\2\u029a\u1436\3\2"+
		"\2\2\u029c\u1444\3\2\2\2\u029e\u1448\3\2\2\2\u02a0\u144a\3\2\2\2\u02a2"+
		"\u144c\3\2\2\2\u02a4\u1451\3\2\2\2\u02a6\u1469\3\2\2\2\u02a8\u146d\3\2"+
		"\2\2\u02aa\u146f\3\2\2\2\u02ac\u1471\3\2\2\2\u02ae\u1473\3\2\2\2\u02b0"+
		"\u1475\3\2\2\2\u02b2\u1477\3\2\2\2\u02b4\u1479\3\2\2\2\u02b6\u147b\3\2"+
		"\2\2\u02b8\u1487\3\2\2\2\u02ba\u1489\3\2\2\2\u02bc\u148e\3\2\2\2\u02be"+
		"\u1490\3\2\2\2\u02c0\u1492\3\2\2\2\u02c2\u1494\3\2\2\2\u02c4\u149c\3\2"+
		"\2\2\u02c6\u149e\3\2\2\2\u02c8\u14aa\3\2\2\2\u02ca\u14ac\3\2\2\2\u02cc"+
		"\u14b4\3\2\2\2\u02ce\u14bc\3\2\2\2\u02d0\u14c4\3\2\2\2\u02d2\u14c9\3\2"+
		"\2\2\u02d4\u14ce\3\2\2\2\u02d6\u14dd\3\2\2\2\u02d8\u14df\3\2\2\2\u02da"+
		"\u14e3\3\2\2\2\u02dc\u14e7\3\2\2\2\u02de\u14e9\3\2\2\2\u02e0\u14ee\3\2"+
		"\2\2\u02e2\u14f0\3\2\2\2\u02e4\u14f8\3\2\2\2\u02e6\u1502\3\2\2\2\u02e8"+
		"\u150a\3\2\2\2\u02ea\u150c\3\2\2\2\u02ec\u150e\3\2\2\2\u02ee\u1517\3\2"+
		"\2\2\u02f0\u1526\3\2\2\2\u02f2\u153b\3\2\2\2\u02f4\u1565\3\2\2\2\u02f6"+
		"\u156c\3\2\2\2\u02f8\u1578\3\2\2\2\u02fa\u1599\3\2\2\2\u02fc\u159b\3\2"+
		"\2\2\u02fe\u15e2\3\2\2\2\u0300\u15e7\3\2\2\2\u0302\u15fa\3\2\2\2\u0304"+
		"\u1604\3\2\2\2\u0306\u1617\3\2\2\2\u0308\u165f\3\2\2\2\u030a\u1661\3\2"+
		"\2\2\u030c\u1663\3\2\2\2\u030e\u1666\3\2\2\2\u0310\u166a\3\2\2\2\u0312"+
		"\u1670\3\2\2\2\u0314\u1679\3\2\2\2\u0316\u167e\3\2\2\2\u0318\u1683\3\2"+
		"\2\2\u031a\u1688\3\2\2\2\u031c\u168a\3\2\2\2\u031e\u168e\3\2\2\2\u0320"+
		"\u1690\3\2\2\2\u0322\u1692\3\2\2\2\u0324\u0326\n\2\2\2\u0325\u0324\3\2"+
		"\2\2\u0326\u0327\3\2\2\2\u0327\u0325\3\2\2\2\u0327\u0328\3\2\2\2\u0328"+
		"\3\3\2\2\2\u0329\u032b\5\b\5\2\u032a\u0329\3\2\2\2\u032b\u032e\3\2\2\2"+
		"\u032c\u032a\3\2\2\2\u032c\u032d\3\2\2\2\u032d\u032f\3\2\2\2\u032e\u032c"+
		"\3\2\2\2\u032f\u0330\7\2\2\3\u0330\5\3\2\2\2\u0331\u0334\5\b\5\2\u0332"+
		"\u0334\5\u028c\u0147\2\u0333\u0331\3\2\2\2\u0333\u0332\3\2\2\2\u0334\u0336"+
		"\3\2\2\2\u0335\u0337\7\u020b\2\2\u0336\u0335\3\2\2\2\u0336\u0337\3\2\2"+
		"\2\u0337\u0339\3\2\2\2\u0338\u0333\3\2\2\2\u0339\u033c\3\2\2\2\u033a\u0338"+
		"\3\2\2\2\u033a\u033b\3\2\2\2\u033b\u033d\3\2\2\2\u033c\u033a\3\2\2\2\u033d"+
		"\u033e\7\2\2\3\u033e\7\3\2\2\2\u033f\u035b\5\f\7\2\u0340\u035b\5\34\17"+
		"\2\u0341\u035b\5,\27\2\u0342\u035b\5\u00a8U\2\u0343\u035b\5\66\34\2\u0344"+
		"\u035b\5\\/\2\u0345\u035b\5\u00ba^\2\u0346\u035b\5\16\b\2\u0347\u035b"+
		"\5\62\32\2\u0348\u035b\5\36\20\2\u0349\u035b\5 \21\2\u034a\u035b\5\u00b0"+
		"Y\2\u034b\u035b\5\u00aaV\2\u034c\u035b\58\35\2\u034d\u035b\5p9\2\u034e"+
		"\u035b\5\u00b6\\\2\u034f\u035b\5\n\6\2\u0350\u035b\5\32\16\2\u0351\u035b"+
		"\5*\26\2\u0352\u035b\5\u00a6T\2\u0353\u035b\5\64\33\2\u0354\u035b\5Z."+
		"\2\u0355\u035b\5\u0132\u009a\2\u0356\u035b\5\u00b2Z\2\u0357\u035b\5\u00b4"+
		"[\2\u0358\u035b\5\u00b8]\2\u0359\u035b\5\u00c8e\2\u035a\u033f\3\2\2\2"+
		"\u035a\u0340\3\2\2\2\u035a\u0341\3\2\2\2\u035a\u0342\3\2\2\2\u035a\u0343"+
		"\3\2\2\2\u035a\u0344\3\2\2\2\u035a\u0345\3\2\2\2\u035a\u0346\3\2\2\2\u035a"+
		"\u0347\3\2\2\2\u035a\u0348\3\2\2\2\u035a\u0349\3\2\2\2\u035a\u034a\3\2"+
		"\2\2\u035a\u034b\3\2\2\2\u035a\u034c\3\2\2\2\u035a\u034d\3\2\2\2\u035a"+
		"\u034e\3\2\2\2\u035a\u034f\3\2\2\2\u035a\u0350\3\2\2\2\u035a\u0351\3\2"+
		"\2\2\u035a\u0352\3\2\2\2\u035a\u0353\3\2\2\2\u035a\u0354\3\2\2\2\u035a"+
		"\u0355\3\2\2\2\u035a\u0356\3\2\2\2\u035a\u0357\3\2\2\2\u035a\u0358\3\2"+
		"\2\2\u035a\u0359\3\2\2\2\u035b\t\3\2\2\2\u035c\u035d\7s\2\2\u035d\u035e"+
		"\7\u009c\2\2\u035e\u035f\5\u02d0\u0169\2\u035f\u0360\7\u020b\2\2\u0360"+
		"\13\3\2\2\2\u0361\u0362\7\t\2\2\u0362\u0363\7\u009c\2\2\u0363\u0364\5"+
		"\u02d0\u0169\2\u0364\u0366\7@\2\2\u0365\u0367\7_\2\2\u0366\u0365\3\2\2"+
		"\2\u0366\u0367\3\2\2\2\u0367\u036b\3\2\2\2\u0368\u036a\5\u00ccg\2\u0369"+
		"\u0368\3\2\2\2\u036a\u036d\3\2\2\2\u036b\u0369\3\2\2\2\u036b\u036c\3\2"+
		"\2\2\u036c\u0370\3\2\2\2\u036d\u036b\3\2\2\2\u036e\u036f\7\u0147\2\2\u036f"+
		"\u0371\7\u0165\2\2\u0370\u036e\3\2\2\2\u0370\u0371\3\2\2\2\u0371\u0372"+
		"\3\2\2\2\u0372\u0373\7\u020b\2\2\u0373\r\3\2\2\2\u0374\u0377\7P\2\2\u0375"+
		"\u0376\7\u010e\2\2\u0376\u0378\7\u0140\2\2\u0377\u0375\3\2\2\2\u0377\u0378"+
		"\3\2\2\2\u0378\u0379\3\2\2\2\u0379\u037a\7\u009c\2\2\u037a\u0386\5\u02d0"+
		"\u0169\2\u037b\u037c\7\u01ff\2\2\u037c\u0381\5\u00d8m\2\u037d\u037e\7"+
		"\u0205\2\2\u037e\u0380\5\u00d8m\2\u037f\u037d\3\2\2\2\u0380\u0383\3\2"+
		"\2\2\u0381\u037f\3\2\2\2\u0381\u0382\3\2\2\2\u0382\u0384\3\2\2\2\u0383"+
		"\u0381\3\2\2\2\u0384\u0385\7\u0200\2\2\u0385\u0387\3\2\2\2\u0386\u037b"+
		"\3\2\2\2\u0386\u0387\3\2\2\2\u0387\u0388\3\2\2\2\u0388\u0389\7\u0145\2"+
		"\2\u0389\u0390\5\u02f8\u017d\2\u038a\u038f\5\u00caf\2\u038b\u038f\5\20"+
		"\t\2\u038c\u038f\5\24\13\2\u038d\u038f\7l\2\2\u038e\u038a\3\2\2\2\u038e"+
		"\u038b\3\2\2\2\u038e\u038c\3\2\2\2\u038e\u038d\3\2\2\2\u038f\u0392\3\2"+
		"\2\2\u0390\u038e\3\2\2\2\u0390\u0391\3\2\2\2\u0391\u03a7\3\2\2\2\u0392"+
		"\u0390\3\2\2\2\u0393\u0395\7\u0125\2\2\u0394\u0393\3\2\2\2\u0394\u0395"+
		"\3\2\2\2\u0395\u0396\3\2\2\2\u0396\u03a2\t\3\2\2\u0397\u0399\7b\2\2\u0398"+
		"\u0397\3\2\2\2\u0398\u0399\3\2\2\2\u0399\u039d\3\2\2\2\u039a\u039c\5\u00dc"+
		"o\2\u039b\u039a\3\2\2\2\u039c\u039f\3\2\2\2\u039d\u039b\3\2\2\2\u039d"+
		"\u039e\3\2\2\2\u039e\u03a0\3\2\2\2\u039f\u039d\3\2\2\2\u03a0\u03a3\5\u0124"+
		"\u0093\2\u03a1\u03a3\5\u00ceh\2\u03a2\u0398\3\2\2\2\u03a2\u03a1\3\2\2"+
		"\2\u03a3\u03a8\3\2\2\2\u03a4\u03a5\t\4\2\2\u03a5\u03a6\7\u01a5\2\2\u03a6"+
		"\u03a8\5\u02ba\u015e\2\u03a7\u0394\3\2\2\2\u03a7\u03a4\3\2\2\2\u03a8\u03a9"+
		"\3\2\2\2\u03a9\u03aa\7\u020b\2\2\u03aa\17\3\2\2\2\u03ab\u03ad\7\u0118"+
		"\2\2\u03ac\u03ae\5\22\n\2\u03ad\u03ac\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae"+
		"\21\3\2\2\2\u03af\u03b0\7\u01ff\2\2\u03b0\u03b1\7\u011b\2\2\u03b1\u03b2"+
		"\5\u020c\u0107\2\u03b2\u03c0\7\'\2\2\u03b3\u03c1\7\f\2\2\u03b4\u03b5\t"+
		"\5\2\2\u03b5\u03b6\7\u01ff\2\2\u03b6\u03bb\5\u02e2\u0172\2\u03b7\u03b8"+
		"\7\u0205\2\2\u03b8\u03ba\5\u02e2\u0172\2\u03b9\u03b7\3\2\2\2\u03ba\u03bd"+
		"\3\2\2\2\u03bb\u03b9\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03be\3\2\2\2\u03bd"+
		"\u03bb\3\2\2\2\u03be\u03bf\7\u0200\2\2\u03bf\u03c1\3\2\2\2\u03c0\u03b3"+
		"\3\2\2\2\u03c0\u03b4\3\2\2\2\u03c1\u03c3\3\2\2\2\u03c2\u03c4\5\30\r\2"+
		"\u03c3\u03c2\3\2\2\2\u03c3\u03c4\3\2\2\2\u03c4\u03c5\3\2\2\2\u03c5\u03c6"+
		"\7\u0200\2\2\u03c6\23\3\2\2\2\u03c7\u03c9\7\u0144\2\2\u03c8\u03ca\5\26"+
		"\f\2\u03c9\u03c8\3\2\2\2\u03c9\u03ca\3\2\2\2\u03ca\25\3\2\2\2\u03cb\u03cc"+
		"\7\u013e\2\2\u03cc\u03cd\7\u01ff\2\2\u03cd\u03d2\5\u02e4\u0173\2\u03ce"+
		"\u03cf\7\u0205\2\2\u03cf\u03d1\5\u02e4\u0173\2\u03d0\u03ce\3\2\2\2\u03d1"+
		"\u03d4\3\2\2\2\u03d2\u03d0\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d5\3\2"+
		"\2\2\u03d4\u03d2\3\2\2\2\u03d5\u03d6\7\u0200\2\2\u03d6\27\3\2\2\2\u03d7"+
		"\u03d8\t\6\2\2\u03d8\u03d9\5\u020c\u0107\2\u03d9\u03da\7\'\2\2\u03da\u03db"+
		"\7\u01ff\2\2\u03db\u03e0\5\u02e2\u0172\2\u03dc\u03dd\7\u0205\2\2\u03dd"+
		"\u03df\5\u02e2\u0172\2\u03de\u03dc\3\2\2\2\u03df\u03e2\3\2\2\2\u03e0\u03de"+
		"\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03e3\3\2\2\2\u03e2\u03e0\3\2\2\2\u03e3"+
		"\u03e4\7\u0200\2\2\u03e4\31\3\2\2\2\u03e5\u03e6\7s\2\2\u03e6\u03e8\7\u0117"+
		"\2\2\u03e7\u03e9\7\"\2\2\u03e8\u03e7\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9"+
		"\u03ed\3\2\2\2\u03ea\u03eb\5\u02ea\u0176\2\u03eb\u03ec\7\u01f8\2\2\u03ec"+
		"\u03ee\3\2\2\2\u03ed\u03ea\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee\u03ef\3\2"+
		"\2\2\u03ef\u03f0\5\u02b8\u015d\2\u03f0\u03f1\7\u020b\2\2\u03f1\33\3\2"+
		"\2\2\u03f2\u03f3\7\t\2\2\u03f3\u03f4\7\u0117\2\2\u03f4\u03f5\5\u02b8\u015d"+
		"\2\u03f5\u03f7\7@\2\2\u03f6\u03f8\7_\2\2\u03f7\u03f6\3\2\2\2\u03f7\u03f8"+
		"\3\2\2\2\u03f8\u03fa\3\2\2\2\u03f9\u03fb\t\7\2\2\u03fa\u03f9\3\2\2\2\u03fa"+
		"\u03fb\3\2\2\2\u03fb\u03ff\3\2\2\2\u03fc\u03fe\5\u00ccg\2\u03fd\u03fc"+
		"\3\2\2\2\u03fe\u0401\3\2\2\2\u03ff\u03fd\3\2\2\2\u03ff\u0400\3\2\2\2\u0400"+
		"\u0404\3\2\2\2\u0401\u03ff\3\2\2\2\u0402\u0403\7\u0147\2\2\u0403\u0405"+
		"\7\u0165\2\2\u0404\u0402\3\2\2\2\u0404\u0405\3\2\2\2\u0405\u0406\3\2\2"+
		"\2\u0406\u0407\7\u020b\2\2\u0407\35\3\2\2\2\u0408\u040b\7P\2\2\u0409\u040a"+
		"\7\u010e\2\2\u040a\u040c\7\u0140\2\2\u040b\u0409\3\2\2\2\u040b\u040c\3"+
		"\2\2\2\u040c\u040d\3\2\2\2\u040d\u0411\7\u0117\2\2\u040e\u040f\5\u02ea"+
		"\u0176\2\u040f\u0410\7\u01f8\2\2\u0410\u0412\3\2\2\2\u0411\u040e\3\2\2"+
		"\2\u0411\u0412\3\2\2\2\u0412\u0413\3\2\2\2\u0413\u0415\5\u02b8\u015d\2"+
		"\u0414\u0416\5\u00caf\2\u0415\u0414\3\2\2\2\u0415\u0416\3\2\2\2\u0416"+
		"\u0417\3\2\2\2\u0417\u041b\t\3\2\2\u0418\u041a\5\"\22\2\u0419\u0418\3"+
		"\2\2\2\u041a\u041d\3\2\2\2\u041b\u0419\3\2\2\2\u041b\u041c\3\2\2\2\u041c"+
		"\u041e\3\2\2\2\u041d\u041b\3\2\2\2\u041e\u0420\7|\2\2\u041f\u0421\5\u02b8"+
		"\u015d\2\u0420\u041f\3\2\2\2\u0420\u0421\3\2\2\2\u0421\u0422\3\2\2\2\u0422"+
		"\u0423\7\u020b\2\2\u0423\37\3\2\2\2\u0424\u0427\7P\2\2\u0425\u0426\7\u010e"+
		"\2\2\u0426\u0428\7\u0140\2\2\u0427\u0425\3\2\2\2\u0427\u0428\3\2\2\2\u0428"+
		"\u0429\3\2\2\2\u0429\u042a\7\u0117\2\2\u042a\u042e\7\"\2\2\u042b\u042c"+
		"\5\u02ea\u0176\2\u042c\u042d\7\u01f8\2\2\u042d\u042f\3\2\2\2\u042e\u042b"+
		"\3\2\2\2\u042e\u042f\3\2\2\2\u042f\u0430\3\2\2\2\u0430\u0431\5\u02b8\u015d"+
		"\2\u0431\u0435\t\3\2\2\u0432\u0434\5(\25\2\u0433\u0432\3\2\2\2\u0434\u0437"+
		"\3\2\2\2\u0435\u0433\3\2\2\2\u0435\u0436\3\2\2\2\u0436\u043e\3\2\2\2\u0437"+
		"\u0435\3\2\2\2\u0438\u0439\7\32\2\2\u0439\u043f\5\u00f8}\2\u043a\u043c"+
		"\7|\2\2\u043b\u043d\5\u02b8\u015d\2\u043c\u043b\3\2\2\2\u043c\u043d\3"+
		"\2\2\2\u043d\u043f\3\2\2\2\u043e\u0438\3\2\2\2\u043e\u043a\3\2\2\2\u043f"+
		"\u0440\3\2\2\2\u0440\u0441\7\u020b\2\2\u0441!\3\2\2\2\u0442\u044b\5\u00de"+
		"p\2\u0443\u044b\5\u00e0q\2\u0444\u044b\5\u00e2r\2\u0445\u044b\5\u00e6"+
		"t\2\u0446\u044b\5\u00e8u\2\u0447\u044b\5\u00f0y\2\u0448\u044b\5$\23\2"+
		"\u0449\u044b\5&\24\2\u044a\u0442\3\2\2\2\u044a\u0443\3\2\2\2\u044a\u0444"+
		"\3\2\2\2\u044a\u0445\3\2\2\2\u044a\u0446\3\2\2\2\u044a\u0447\3\2\2\2\u044a"+
		"\u0448\3\2\2\2\u044a\u0449\3\2\2\2\u044b#\3\2\2\2\u044c\u044d\7\u0132"+
		"\2\2\u044d\u0459\5\u0310\u0189\2\u044e\u044f\7\u01ff\2\2\u044f\u0454\5"+
		"\u00d8m\2\u0450\u0451\7\u0205\2\2\u0451\u0453\5\u00d8m\2\u0452\u0450\3"+
		"\2\2\2\u0453\u0456\3\2\2\2\u0454\u0452\3\2\2\2\u0454\u0455\3\2\2\2\u0455"+
		"\u0457\3\2\2\2\u0456\u0454\3\2\2\2\u0457\u0458\7\u0200\2\2\u0458\u045a"+
		"\3\2\2\2\u0459\u044e\3\2\2\2\u0459\u045a\3\2\2\2\u045a\u045b\3\2\2\2\u045b"+
		"\u045c\7\u020b\2\2\u045c%\3\2\2\2\u045d\u045e\7\u009c\2\2\u045e\u046a"+
		"\5\u0310\u0189\2\u045f\u0460\7\u01ff\2\2\u0460\u0465\5\u00d8m\2\u0461"+
		"\u0462\7\u0205\2\2\u0462\u0464\5\u00d8m\2\u0463\u0461\3\2\2\2\u0464\u0467"+
		"\3\2\2\2\u0465\u0463\3\2\2\2\u0465\u0466\3\2\2\2\u0466\u0468\3\2\2\2\u0467"+
		"\u0465\3\2\2\2\u0468\u0469\7\u0200\2\2\u0469\u046b\3\2\2\2\u046a\u045f"+
		"\3\2\2\2\u046a\u046b\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u046d\7\u0145\2"+
		"\2\u046d\u046f\5\u02f8\u017d\2\u046e\u0470\7l\2\2\u046f\u046e\3\2\2\2"+
		"\u046f\u0470\3\2\2\2\u0470\u0472\3\2\2\2\u0471\u0473\7\u0144\2\2\u0472"+
		"\u0471\3\2\2\2\u0472\u0473\3\2\2\2\u0473\u0474\3\2\2\2\u0474\u0475\7\u020b"+
		"\2\2\u0475\'\3\2\2\2\u0476\u0480\5\u00dep\2\u0477\u0480\5\u00e0q\2\u0478"+
		"\u0480\5\u00e2r\2\u0479\u0480\5\u00e6t\2\u047a\u0480\5\u00f0y\2\u047b"+
		"\u0480\5\60\31\2\u047c\u0480\5.\30\2\u047d\u0480\5$\23\2\u047e\u0480\5"+
		"&\24\2\u047f\u0476\3\2\2\2\u047f\u0477\3\2\2\2\u047f\u0478\3\2\2\2\u047f"+
		"\u0479\3\2\2\2\u047f\u047a\3\2\2\2\u047f\u047b\3\2\2\2\u047f\u047c\3\2"+
		"\2\2\u047f\u047d\3\2\2\2\u047f\u047e\3\2\2\2\u0480)\3\2\2\2\u0481\u0482"+
		"\7s\2\2\u0482\u0483\7\u0132\2\2\u0483\u0484\5\u02d2\u016a\2\u0484\u0485"+
		"\7\u020b\2\2\u0485+\3\2\2\2\u0486\u0487\7\t\2\2\u0487\u0488\7\u0132\2"+
		"\2\u0488\u0489\5\u02d2\u016a\2\u0489\u048b\7@\2\2\u048a\u048c\7_\2\2\u048b"+
		"\u048a\3\2\2\2\u048b\u048c\3\2\2\2\u048c\u0490\3\2\2\2\u048d\u048f\5\u00cc"+
		"g\2\u048e\u048d\3\2\2\2\u048f\u0492\3\2\2\2\u0490\u048e\3\2\2\2\u0490"+
		"\u0491\3\2\2\2\u0491\u0495\3\2\2\2\u0492\u0490\3\2\2\2\u0493\u0494\7\u0147"+
		"\2\2\u0494\u0496\7\u0165\2\2\u0495\u0493\3\2\2\2\u0495\u0496\3\2\2\2\u0496"+
		"\u0497\3\2\2\2\u0497\u0498\7\u020b\2\2\u0498-\3\2\2\2\u0499\u049a\7\u009c"+
		"\2\2\u049a\u04a6\5\u0310\u0189\2\u049b\u049c\7\u01ff\2\2\u049c\u04a1\5"+
		"\u00d8m\2\u049d\u049e\7\u0205\2\2\u049e\u04a0\5\u00d8m\2\u049f\u049d\3"+
		"\2\2\2\u04a0\u04a3\3\2\2\2\u04a1\u049f\3\2\2\2\u04a1\u04a2\3\2\2\2\u04a2"+
		"\u04a4\3\2\2\2\u04a3\u04a1\3\2\2\2\u04a4\u04a5\7\u0200\2\2\u04a5\u04a7"+
		"\3\2\2\2\u04a6\u049b\3\2\2\2\u04a6\u04a7\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8"+
		"\u04a9\7\u0145\2\2\u04a9\u04b0\5\u02f8\u017d\2\u04aa\u04af\5\u00caf\2"+
		"\u04ab\u04af\5\20\t\2\u04ac\u04af\5\24\13\2\u04ad\u04af\7l\2\2\u04ae\u04aa"+
		"\3\2\2\2\u04ae\u04ab\3\2\2\2\u04ae\u04ac\3\2\2\2\u04ae\u04ad\3\2\2\2\u04af"+
		"\u04b2\3\2\2\2\u04b0\u04ae\3\2\2\2\u04b0\u04b1\3\2\2\2\u04b1\u04c7\3\2"+
		"\2\2\u04b2\u04b0\3\2\2\2\u04b3\u04b5\7\u0125\2\2\u04b4\u04b3\3\2\2\2\u04b4"+
		"\u04b5\3\2\2\2\u04b5\u04b6\3\2\2\2\u04b6\u04c2\t\3\2\2\u04b7\u04b9\7b"+
		"\2\2\u04b8\u04b7\3\2\2\2\u04b8\u04b9\3\2\2\2\u04b9\u04bd\3\2\2\2\u04ba"+
		"\u04bc\5\u00dco\2\u04bb\u04ba\3\2\2\2\u04bc\u04bf\3\2\2\2\u04bd\u04bb"+
		"\3\2\2\2\u04bd\u04be\3\2\2\2\u04be\u04c0\3\2\2\2\u04bf\u04bd\3\2\2\2\u04c0"+
		"\u04c3\5\u0124\u0093\2\u04c1\u04c3\5\u00ceh\2\u04c2\u04b8\3\2\2\2\u04c2"+
		"\u04c1\3\2\2\2\u04c3\u04c8\3\2\2\2\u04c4\u04c5\t\4\2\2\u04c5\u04c6\7\u01a5"+
		"\2\2\u04c6\u04c8\5\u02ba\u015e\2\u04c7\u04b4\3\2\2\2\u04c7\u04c4\3\2\2"+
		"\2\u04c8\u04c9\3\2\2\2\u04c9\u04ca\7\u020b\2\2\u04ca/\3\2\2\2\u04cb\u04cc"+
		"\7\u0132\2\2\u04cc\u04d8\5\u0310\u0189\2\u04cd\u04ce\7\u01ff\2\2\u04ce"+
		"\u04d3\5\u00d8m\2\u04cf\u04d0\7\u0205\2\2\u04d0\u04d2\5\u00d8m\2\u04d1"+
		"\u04cf\3\2\2\2\u04d2\u04d5\3\2\2\2\u04d3\u04d1\3\2\2\2\u04d3\u04d4\3\2"+
		"\2\2\u04d4\u04d6\3\2\2\2\u04d5\u04d3\3\2\2\2\u04d6\u04d7\7\u0200\2\2\u04d7"+
		"\u04d9\3\2\2\2\u04d8\u04cd\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9\u04da\3\2"+
		"\2\2\u04da\u04e7\t\3\2\2\u04db\u04dd\7b\2\2\u04dc\u04db\3\2\2\2\u04dc"+
		"\u04dd\3\2\2\2\u04dd\u04e1\3\2\2\2\u04de\u04e0\5\u00dco\2\u04df\u04de"+
		"\3\2\2\2\u04e0\u04e3\3\2\2\2\u04e1\u04df\3\2\2\2\u04e1\u04e2\3\2\2\2\u04e2"+
		"\u04e4\3\2\2\2\u04e3\u04e1\3\2\2\2\u04e4\u04e8\5\u0124\u0093\2\u04e5\u04e8"+
		"\5\u00ceh\2\u04e6\u04e8\7\u008b\2\2\u04e7\u04dc\3\2\2\2\u04e7\u04e5\3"+
		"\2\2\2\u04e7\u04e6\3\2\2\2\u04e8\u04e9\3\2\2\2\u04e9\u04ea\7\u020b\2\2"+
		"\u04ea\61\3\2\2\2\u04eb\u04ee\7P\2\2\u04ec\u04ed\7\u010e\2\2\u04ed\u04ef"+
		"\7\u0140\2\2\u04ee\u04ec\3\2\2\2\u04ee\u04ef\3\2\2\2\u04ef\u04f0\3\2\2"+
		"\2\u04f0\u04f1\7\u0132\2\2\u04f1\u04fd\5\u02d2\u016a\2\u04f2\u04f3\7\u01ff"+
		"\2\2\u04f3\u04f8\5\u00d8m\2\u04f4\u04f5\7\u0205\2\2\u04f5\u04f7\5\u00d8"+
		"m\2\u04f6\u04f4\3\2\2\2\u04f7\u04fa\3\2\2\2\u04f8\u04f6\3\2\2\2\u04f8"+
		"\u04f9\3\2\2\2\u04f9\u04fb\3\2\2\2\u04fa\u04f8\3\2\2\2\u04fb\u04fc\7\u0200"+
		"\2\2\u04fc\u04fe\3\2\2\2\u04fd\u04f2\3\2\2\2\u04fd\u04fe\3\2\2\2\u04fe"+
		"\u0500\3\2\2\2\u04ff\u0501\5\u00caf\2\u0500\u04ff\3\2\2\2\u0500\u0501"+
		"\3\2\2\2\u0501\u0502\3\2\2\2\u0502\u050f\t\3\2\2\u0503\u0505\7b\2\2\u0504"+
		"\u0503\3\2\2\2\u0504\u0505\3\2\2\2\u0505\u0509\3\2\2\2\u0506\u0508\5\u00dc"+
		"o\2\u0507\u0506\3\2\2\2\u0508\u050b\3\2\2\2\u0509\u0507\3\2\2\2\u0509"+
		"\u050a\3\2\2\2\u050a\u050c\3\2\2\2\u050b\u0509\3\2\2\2\u050c\u0510\5\u0124"+
		"\u0093\2\u050d\u0510\5\u00ceh\2\u050e\u0510\7\u008b\2\2\u050f\u0504\3"+
		"\2\2\2\u050f\u050d\3\2\2\2\u050f\u050e\3\2\2\2\u0510\u0511\3\2\2\2\u0511"+
		"\u0512\7\u020b\2\2\u0512\63\3\2\2\2\u0513\u0514\7s\2\2\u0514\u0515\7\u0195"+
		"\2\2\u0515\u0516\5\u02d4\u016b\2\u0516\u0517\7\u020b\2\2\u0517\65\3\2"+
		"\2\2\u0518\u0519\7\t\2\2\u0519\u051a\7\u0195\2\2\u051a\u052d\5\u02d4\u016b"+
		"\2\u051b\u052e\t\b\2\2\u051c\u051d\7\u013f\2\2\u051d\u051e\7\u0190\2\2"+
		"\u051e\u052e\5\u02d4\u016b\2\u051f\u0521\7@\2\2\u0520\u0522\7_\2\2\u0521"+
		"\u0520\3\2\2\2\u0521\u0522\3\2\2\2\u0522\u0526\3\2\2\2\u0523\u0525\5\u00cc"+
		"g\2\u0524\u0523\3\2\2\2\u0525\u0528\3\2\2\2\u0526\u0524\3\2\2\2\u0526"+
		"\u0527\3\2\2\2\u0527\u052b\3\2\2\2\u0528\u0526\3\2\2\2\u0529\u052a\7\u0147"+
		"\2\2\u052a\u052c\7\u0165\2\2\u052b\u0529\3\2\2\2\u052b\u052c\3\2\2\2\u052c"+
		"\u052e\3\2\2\2\u052d\u051b\3\2\2\2\u052d\u051c\3\2\2\2\u052d\u051f\3\2"+
		"\2\2\u052e\u052f\3\2\2\2\u052f\u0530\7\u020b\2\2\u0530\67\3\2\2\2\u0531"+
		"\u0534\7P\2\2\u0532\u0533\7\u010e\2\2\u0533\u0535\7\u0140\2\2\u0534\u0532"+
		"\3\2\2\2\u0534\u0535\3\2\2\2\u0535\u0536\3\2\2\2\u0536\u0537\7\u0195\2"+
		"\2\u0537\u053b\5\u02d4\u016b\2\u0538\u053c\5> \2\u0539\u053c\5B\"\2\u053a"+
		"\u053c\5D#\2\u053b\u0538\3\2\2\2\u053b\u0539\3\2\2\2\u053b\u053a\3\2\2"+
		"\2\u053c\u053e\3\2\2\2\u053d\u053f\5:\36\2\u053e\u053d\3\2\2\2\u053e\u053f"+
		"\3\2\2\2\u053f\u0541\3\2\2\2\u0540\u0542\t\b\2\2\u0541\u0540\3\2\2\2\u0541"+
		"\u0542\3\2\2\2\u0542\u0544\3\2\2\2\u0543\u0545\5<\37\2\u0544\u0543\3\2"+
		"\2\2\u0544\u0545\3\2\2\2\u0545\u0546\3\2\2\2\u0546\u0547\5F$\2\u0547\u0548"+
		"\7\u020b\2\2\u05489\3\2\2\2\u0549\u054a\7\u0095\2\2\u054a\u054f\5\u02d4"+
		"\u016b\2\u054b\u054c\7\u0205\2\2\u054c\u054e\5\u02d4\u016b\2\u054d\u054b"+
		"\3\2\2\2\u054e\u0551\3\2\2\2\u054f\u054d\3\2\2\2\u054f\u0550\3\2\2\2\u0550"+
		";\3\2\2\2\u0551\u054f\3\2\2\2\u0552\u0553\7\u01b3\2\2\u0553\u0554\7\u01ff"+
		"\2\2\u0554\u0555\5\u020a\u0106\2\u0555\u0556\7\u0200\2\2\u0556=\3\2\2"+
		"\2\u0557\u055c\7\31\2\2\u0558\u055c\7\5\2\2\u0559\u055a\7\u00b7\2\2\u055a"+
		"\u055c\7\u0106\2\2\u055b\u0557\3\2\2\2\u055b\u0558\3\2\2\2\u055b\u0559"+
		"\3\2\2\2\u055c\u055d\3\2\2\2\u055d\u055f\5P)\2\u055e\u0560\5V,\2\u055f"+
		"\u055e\3\2\2\2\u055f\u0560\3\2\2\2\u0560\u0562\3\2\2\2\u0561\u0563\5@"+
		"!\2\u0562\u0561\3\2\2\2\u0562\u0563\3\2\2\2\u0563?\3\2\2\2\u0564\u0565"+
		"\7\u0096\2\2\u0565\u0566\7u\2\2\u0566\u0567\7\u014d\2\2\u0567A\3\2\2\2"+
		"\u0568\u0569\7\u0096\2\2\u0569\u056b\5P)\2\u056a\u056c\5V,\2\u056b\u056a"+
		"\3\2\2\2\u056b\u056c\3\2\2\2\u056cC\3\2\2\2\u056d\u056e\t\t\2\2\u056e"+
		"\u0573\5N(\2\u056f\u0570\7\u010e\2\2\u0570\u0572\5N(\2\u0571\u056f\3\2"+
		"\2\2\u0572\u0575\3\2\2\2\u0573\u0571\3\2\2\2\u0573\u0574\3\2\2\2\u0574"+
		"\u0576\3\2\2\2\u0575\u0573\3\2\2\2\u0576\u057e\7\u010a\2\2\u0577\u057f"+
		"\7Y\2\2\u0578\u0579\5\u02b4\u015b\2\u0579\u057a\7\u01f8\2\2\u057a\u057c"+
		"\3\2\2\2\u057b\u0578\3\2\2\2\u057b\u057c\3\2\2\2\u057c\u057d\3\2\2\2\u057d"+
		"\u057f\7\u0154\2\2\u057e\u0577\3\2\2\2\u057e\u057b\3\2\2\2\u057fE\3\2"+
		"\2\2\u0580\u0581\7A\2\2\u0581\u0586\7\u0195\2\2\u0582\u0583\7+\2\2\u0583"+
		"\u0586\5\u0310\u0189\2\u0584\u0586\5\u0128\u0095\2\u0585\u0580\3\2\2\2"+
		"\u0585\u0582\3\2\2\2\u0585\u0584\3\2\2\2\u0586G\3\2\2\2\u0587\u0589\5"+
		"\u02b6\u015c\2\u0588\u058a\5\u02ee\u0178\2\u0589\u0588\3\2\2\2\u0589\u058a"+
		"\3\2\2\2\u058aI\3\2\2\2\u058b\u058c\7A\2\2\u058c\u0590\7\u0195\2\2\u058d"+
		"\u058f\5\u00dco\2\u058e\u058d\3\2\2\2\u058f\u0592\3\2\2\2\u0590\u058e"+
		"\3\2\2\2\u0590\u0591\3\2\2\2\u0591\u0594\3\2\2\2\u0592\u0590\3\2\2\2\u0593"+
		"\u0595\5L\'\2\u0594\u0593\3\2\2\2\u0595\u0596\3\2\2\2\u0596\u0594\3\2"+
		"\2\2\u0596\u0597\3\2\2\2\u0597\u0598\3\2\2\2\u0598\u0599\7|\2\2\u0599"+
		"\u059a\5\u02d4\u016b\2\u059aK\3\2\2\2\u059b\u059c\7\31\2\2\u059c\u059d"+
		"\7\u0178\2\2\u059d\u059e\7\u00be\2\2\u059e\u059f\5\u0128\u0095\2\u059f"+
		"\u05a0\7\31\2\2\u05a0\u05a1\7\u0178\2\2\u05a1\u05a2\7\u020b\2\2\u05a2"+
		"\u05c0\3\2\2\2\u05a3\u05a4\7\31\2\2\u05a4\u05a5\7u\2\2\u05a5\u05a6\7\u014d"+
		"\2\2\u05a6\u05a7\7\u00be\2\2\u05a7\u05a8\5\u0128\u0095\2\u05a8\u05a9\7"+
		"\31\2\2\u05a9\u05aa\7u\2\2\u05aa\u05ab\7\u014d\2\2\u05ab\u05ac\7\u020b"+
		"\2\2\u05ac\u05c0\3\2\2\2\u05ad\u05ae\7\5\2\2\u05ae\u05af\7\u0178\2\2\u05af"+
		"\u05b0\7\u00be\2\2\u05b0\u05b1\5\u0128\u0095\2\u05b1\u05b2\7\5\2\2\u05b2"+
		"\u05b3\7\u0178\2\2\u05b3\u05b4\7\u020b\2\2\u05b4\u05c0\3\2\2\2\u05b5\u05b6"+
		"\7\5\2\2\u05b6\u05b7\7u\2\2\u05b7\u05b8\7\u014d\2\2\u05b8\u05b9\7\u00be"+
		"\2\2\u05b9\u05ba\5\u0128\u0095\2\u05ba\u05bb\7\5\2\2\u05bb\u05bc\7u\2"+
		"\2\u05bc\u05bd\7\u014d\2\2\u05bd\u05be\7\u020b\2\2\u05be\u05c0\3\2\2\2"+
		"\u05bf\u059b\3\2\2\2\u05bf\u05a3\3\2\2\2\u05bf\u05ad\3\2\2\2\u05bf\u05b5"+
		"\3\2\2\2\u05c0M\3\2\2\2\u05c1\u05dc\7\t\2\2\u05c2\u05dc\7\n\2\2\u05c3"+
		"\u05c4\7\20\2\2\u05c4\u05dc\7\u017b\2\2\u05c5\u05dc\7\23\2\2\u05c6\u05dc"+
		"\7<\2\2\u05c7\u05dc\7P\2\2\u05c8\u05c9\7o\2\2\u05c9\u05dc\7\u017b\2\2"+
		"\u05ca\u05dc\7s\2\2\u05cb\u05dc\7\u009e\2\2\u05cc\u05dc\7\u00f4\2\2\u05cd"+
		"\u05dc\7\u013f\2\2\u05ce\u05dc\7\u0149\2\2\u05cf\u05dc\7\u0197\2\2\u05d0"+
		"\u05dc\7^\2\2\u05d1\u05dc\7\u0177\2\2\u05d2\u05dc\7\u0168\2\2\u05d3\u05dc"+
		"\7\\\2\2\u05d4\u05dc\7\u00d6\2\2\u05d5\u05dc\7\u00d5\2\2\u05d6\u05dc\7"+
		"\u0161\2\2\u05d7\u05dc\7\u0182\2\2\u05d8\u05dc\7Y\2\2\u05d9\u05dc\7\u0154"+
		"\2\2\u05da\u05dc\7\u0095\2\2\u05db\u05c1\3\2\2\2\u05db\u05c2\3\2\2\2\u05db"+
		"\u05c3\3\2\2\2\u05db\u05c5\3\2\2\2\u05db\u05c6\3\2\2\2\u05db\u05c7\3\2"+
		"\2\2\u05db\u05c8\3\2\2\2\u05db\u05ca\3\2\2\2\u05db\u05cb\3\2\2\2\u05db"+
		"\u05cc\3\2\2\2\u05db\u05cd\3\2\2\2\u05db\u05ce\3\2\2\2\u05db\u05cf\3\2"+
		"\2\2\u05db\u05d0\3\2\2\2\u05db\u05d1\3\2\2\2\u05db\u05d2\3\2\2\2\u05db"+
		"\u05d3\3\2\2\2\u05db\u05d4\3\2\2\2\u05db\u05d5\3\2\2\2\u05db\u05d6\3\2"+
		"\2\2\u05db\u05d7\3\2\2\2\u05db\u05d8\3\2\2\2\u05db\u05d9\3\2\2\2\u05db"+
		"\u05da\3\2\2\2\u05dcO\3\2\2\2\u05dd\u05e2\5R*\2\u05de\u05df\7\u010e\2"+
		"\2\u05df\u05e1\5R*\2\u05e0\u05de\3\2\2\2\u05e1\u05e4\3\2\2\2\u05e2\u05e0"+
		"\3\2\2\2\u05e2\u05e3\3\2\2\2\u05e3\u05e5\3\2\2\2\u05e4\u05e2\3\2\2\2\u05e5"+
		"\u05e7\7\u010a\2\2\u05e6\u05e8\5T+\2\u05e7\u05e6\3\2\2\2\u05e7\u05e8\3"+
		"\2\2\2\u05e8\u05e9\3\2\2\2\u05e9\u05ea\5\u02e4\u0173\2\u05eaQ\3\2\2\2"+
		"\u05eb\u05f5\t\n\2\2\u05ec\u05ed\7\u0106\2\2\u05ed\u05f2\5\u02e2\u0172"+
		"\2\u05ee\u05ef\7\u0205\2\2\u05ef\u05f1\5\u02e2\u0172\2\u05f0\u05ee\3\2"+
		"\2\2\u05f1\u05f4\3\2\2\2\u05f2\u05f0\3\2\2\2\u05f2\u05f3\3\2\2\2\u05f3"+
		"\u05f6\3\2\2\2\u05f4\u05f2\3\2\2\2\u05f5\u05ec\3\2\2\2\u05f5\u05f6\3\2"+
		"\2\2\u05f6S\3\2\2\2\u05f7\u05f8\7\u00f1\2\2\u05f8\u05f9\7\u0184\2\2\u05f9"+
		"\u05fa\5\u02e4\u0173\2\u05fa\u05fb\7\u0106\2\2\u05fbU\3\2\2\2\u05fc\u05fe"+
		"\7\u013c\2\2\u05fd\u05ff\5X-\2\u05fe\u05fd\3\2\2\2\u05ff\u0600\3\2\2\2"+
		"\u0600\u05fe\3\2\2\2\u0600\u0601\3\2\2\2\u0601W\3\2\2\2\u0602\u0603\t"+
		"\13\2\2\u0603\u0604\5\u029c\u014f\2\u0604Y\3\2\2\2\u0605\u0606\7s\2\2"+
		"\u0606\u0608\7\u0198\2\2\u0607\u0609\7\"\2\2\u0608\u0607\3\2\2\2\u0608"+
		"\u0609\3\2\2\2\u0609\u060a\3\2\2\2\u060a\u060c\5\u02ca\u0166\2\u060b\u060d"+
		"\t\f\2\2\u060c\u060b\3\2\2\2\u060c\u060d\3\2\2\2\u060d\u060e\3\2\2\2\u060e"+
		"\u060f\7\u020b\2\2\u060f[\3\2\2\2\u0610\u0611\7\t\2\2\u0611\u0612\7\u0198"+
		"\2\2\u0612\u0618\5\u02ca\u0166\2\u0613\u0619\5^\60\2\u0614\u0619\5`\61"+
		"\2\u0615\u0619\5b\62\2\u0616\u0619\5j\66\2\u0617\u0619\5\u008cG\2\u0618"+
		"\u0613\3\2\2\2\u0618\u0614\3\2\2\2\u0618\u0615\3\2\2\2\u0618\u0616\3\2"+
		"\2\2\u0618\u0617\3\2\2\2\u0619\u061b\3\2\2\2\u061a\u061c\5l\67\2\u061b"+
		"\u061a\3\2\2\2\u061b\u061c\3\2\2\2\u061c\u061d\3\2\2\2\u061d\u061e\7\u020b"+
		"\2\2\u061e]\3\2\2\2\u061f\u0621\7@\2\2\u0620\u0622\7_\2\2\u0621\u0620"+
		"\3\2\2\2\u0621\u0622\3\2\2\2\u0622\u0624\3\2\2\2\u0623\u0625\t\r\2\2\u0624"+
		"\u0623\3\2\2\2\u0624\u0625\3\2\2\2\u0625\u0629\3\2\2\2\u0626\u0628\5\u00cc"+
		"g\2\u0627\u0626\3\2\2\2\u0628\u062b\3\2\2\2\u0629\u0627\3\2\2\2\u0629"+
		"\u062a\3\2\2\2\u062a\u062e\3\2\2\2\u062b\u0629\3\2\2\2\u062c\u062d\7\u0147"+
		"\2\2\u062d\u062f\7\u0165\2\2\u062e\u062c\3\2\2\2\u062e\u062f\3\2\2\2\u062f"+
		"_\3\2\2\2\u0630\u0632\7\u0140\2\2\u0631\u0633\5\u00caf\2\u0632\u0631\3"+
		"\2\2\2\u0632\u0633\3\2\2\2\u0633\u0634\3\2\2\2\u0634\u0635\7\16\2\2\u0635"+
		"\u0636\7\u0105\2\2\u0636\u0637\7\u01ff\2\2\u0637\u063c\5\u008eH\2\u0638"+
		"\u0639\7\u0205\2\2\u0639\u063b\5\u008eH\2\u063a\u0638\3\2\2\2\u063b\u063e";
	private static final String _serializedATNSegment1 =
		"\3\2\2\2\u063c\u063a\3\2\2\2\u063c\u063d\3\2\2\2\u063d\u063f\3\2\2\2\u063e"+
		"\u063c\3\2\2\2\u063f\u0640\7\u0200\2\2\u0640a\3\2\2\2\u0641\u0646\5d\63"+
		"\2\u0642\u0643\7\u0205\2\2\u0643\u0645\5d\63\2\u0644\u0642\3\2\2\2\u0645"+
		"\u0648\3\2\2\2\u0646\u0644\3\2\2\2\u0646\u0647\3\2\2\2\u0647c\3\2\2\2"+
		"\u0648\u0646\3\2\2\2\u0649\u064c\t\16\2\2\u064a\u064d\5\u009eP\2\u064b"+
		"\u064d\5\u0096L\2\u064c\u064a\3\2\2\2\u064c\u064b\3\2\2\2\u064de\3\2\2"+
		"\2\u064e\u064f\t\17\2\2\u064f\u065c\7\22\2\2\u0650\u065d\5h\65\2\u0651"+
		"\u0652\7\u01ff\2\2\u0652\u0657\5h\65\2\u0653\u0654\7\u0205\2\2\u0654\u0656"+
		"\5h\65\2\u0655\u0653\3\2\2\2\u0656\u0659\3\2\2\2\u0657\u0655\3\2\2\2\u0657"+
		"\u0658\3\2\2\2\u0658\u065a\3\2\2\2\u0659\u0657\3\2\2\2\u065a\u065b\7\u0200"+
		"\2\2\u065b\u065d\3\2\2\2\u065c\u0650\3\2\2\2\u065c\u0651\3\2\2\2\u065d"+
		"g\3\2\2\2\u065e\u0660\5\u02ac\u0157\2\u065f\u0661\5\u02f8\u017d\2\u0660"+
		"\u065f\3\2\2\2\u0660\u0661\3\2\2\2\u0661i\3\2\2\2\u0662\u0668\7\u00e6"+
		"\2\2\u0663\u0664\7\u00d0\2\2\u0664\u0669\5\u020c\u0107\2\u0665\u0666\7"+
		"v\2\2\u0666\u0667\7\u0198\2\2\u0667\u0669\5\u02f8\u017d\2\u0668\u0663"+
		"\3\2\2\2\u0668\u0665\3\2\2\2\u0669k\3\2\2\2\u066a\u067b\7\u00bd\2\2\u066b"+
		"\u0675\7-\2\2\u066c\u066d\7K\2\2\u066d\u066e\7\u0190\2\2\u066e\u0676\7"+
		"\u017f\2\2\u066f\u0671\7\u00fe\2\2\u0670\u066f\3\2\2\2\u0670\u0671\3\2"+
		"\2\2\u0671\u0672\3\2\2\2\u0672\u0673\7\u00aa\2\2\u0673\u0674\7\u0184\2"+
		"\2\u0674\u0676\7X\2\2\u0675\u066c\3\2\2\2\u0675\u0670\3\2\2\2\u0675\u0676"+
		"\3\2\2\2\u0676\u0678\3\2\2\2\u0677\u0679\5n8\2\u0678\u0677\3\2\2\2\u0678"+
		"\u0679\3\2\2\2\u0679\u067b\3\2\2\2\u067a\u066a\3\2\2\2\u067a\u066b\3\2"+
		"\2\2\u067bm\3\2\2\2\u067c\u067e\7\u0098\2\2\u067d\u067c\3\2\2\2\u067d"+
		"\u067e\3\2\2\2\u067e\u067f\3\2\2\2\u067f\u0680\7\u0084\2\2\u0680\u0681"+
		"\7\u00bc\2\2\u0681\u0682\5\u02e4\u0173\2\u0682o\3\2\2\2\u0683\u0686\7"+
		"P\2\2\u0684\u0685\7\u010e\2\2\u0685\u0687\7\u0140\2\2\u0686\u0684\3\2"+
		"\2\2\u0686\u0687\3\2\2\2\u0687\u0688\3\2\2\2\u0688\u068b\7\u0198\2\2\u0689"+
		"\u068c\5r:\2\u068a\u068c\5~@\2\u068b\u0689\3\2\2\2\u068b\u068a\3\2\2\2"+
		"\u068c\u068d\3\2\2\2\u068d\u068e\7\u020b\2\2\u068eq\3\2\2\2\u068f\u0692"+
		"\5\u02ca\u0166\2\u0690\u0691\7\u0108\2\2\u0691\u0693\7\u01fb\2\2\u0692"+
		"\u0690\3\2\2\2\u0692\u0693\3\2\2\2\u0693\u0695\3\2\2\2\u0694\u0696\5t"+
		";\2\u0695\u0694\3\2\2\2\u0695\u0696\3\2\2\2\u0696s\3\2\2\2\u0697\u0699"+
		"\5\u00caf\2\u0698\u0697\3\2\2\2\u0698\u0699\3\2\2\2\u0699\u069c\3\2\2"+
		"\2\u069a\u069d\5v<\2\u069b\u069d\5x=\2\u069c\u069a\3\2\2\2\u069c\u069b"+
		"\3\2\2\2\u069d\u069f\3\2\2\2\u069e\u06a0\5|?\2\u069f\u069e\3\2\2\2\u069f"+
		"\u06a0\3\2\2\2\u06a0\u06ac\3\2\2\2\u06a1\u06a2\7\u01ff\2\2\u06a2\u06a7"+
		"\5\u008eH\2\u06a3\u06a4\7\u0205\2\2\u06a4\u06a6\5\u008eH\2\u06a5\u06a3"+
		"\3\2\2\2\u06a6\u06a9\3\2\2\2\u06a7\u06a5\3\2\2\2\u06a7\u06a8\3\2\2\2\u06a8"+
		"\u06aa\3\2\2\2\u06a9\u06a7\3\2\2\2\u06aa\u06ab\7\u0200\2\2\u06ab\u06ad"+
		"\3\2\2\2\u06ac\u06a1\3\2\2\2\u06ac\u06ad\3\2\2\2\u06ad\u06b1\3\2\2\2\u06ae"+
		"\u06b0\5\u008cG\2\u06af\u06ae\3\2\2\2\u06b0\u06b3\3\2\2\2\u06b1\u06af"+
		"\3\2\2\2\u06b1\u06b2\3\2\2\2\u06b2u\3\2\2\2\u06b3\u06b1\3\2\2\2\u06b4"+
		"\u06b8\t\3\2\2\u06b5\u06b9\7\u0105\2\2\u06b6\u06b9\5\u00f6|\2\u06b7\u06b9"+
		"\5z>\2\u06b8\u06b5\3\2\2\2\u06b8\u06b6\3\2\2\2\u06b8\u06b7\3\2\2\2\u06b9"+
		"w\3\2\2\2\u06ba\u06bb\7\u019a\2\2\u06bb\u06bc\5\u02f8\u017d\2\u06bcy\3"+
		"\2\2\2\u06bd\u06be\7\u0184\2\2\u06be\u06bf\7\u0106\2\2\u06bf\u06c2\5\u02f8"+
		"\u017d\2\u06c0\u06c1\7\u00fe\2\2\u06c1\u06c3\7\u0100\2\2\u06c2\u06c0\3"+
		"\2\2\2\u06c2\u06c3\3\2\2\2\u06c3{\3\2\2\2\u06c4\u06c5\7\u008b\2\2\u06c5"+
		"\u06c6\7\u00e9\2\2\u06c6\u06c7\5\u020c\u0107\2\u06c7\u06c8\7\u00c5\2\2"+
		"\u06c8\u06c9\7\u00c1\2\2\u06c9\u06ca\7\u01a5\2\2\u06ca\u06cb\t\20\2\2"+
		"\u06cb}\3\2\2\2\u06cc\u06cd\7\"\2\2\u06cd\u06ce\5\u02ca\u0166\2\u06ce"+
		"\u06d0\t\3\2\2\u06cf\u06d1\5\u0080A\2\u06d0\u06cf\3\2\2\2\u06d1\u06d2"+
		"\3\2\2\2\u06d2\u06d0\3\2\2\2\u06d2\u06d3\3\2\2\2\u06d3\u06d4\3\2\2\2\u06d4"+
		"\u06d5\7|\2\2\u06d5\177\3\2\2\2\u06d6\u06d9\5\u0082B\2\u06d7\u06d9\5\u0084"+
		"C\2\u06d8\u06d6\3\2\2\2\u06d8\u06d7\3\2\2\2\u06d9\u0081\3\2\2\2\u06da"+
		"\u06db\t\21\2\2\u06db\u06dc\7\u00de\2\2\u06dc\u06dd\5\u0088E\2\u06dd\u0083"+
		"\3\2\2\2\u06de\u06e2\t\22\2\2\u06df\u06e3\5\u0086D\2\u06e0\u06e3\5\u0088"+
		"E\2\u06e1\u06e3\5\u008aF\2\u06e2\u06df\3\2\2\2\u06e2\u06e0\3\2\2\2\u06e2"+
		"\u06e1\3\2\2\2\u06e3\u0085\3\2\2\2\u06e4\u06e5\7\u0132\2\2\u06e5\u06e6"+
		"\5\u02d2\u016a\2\u06e6\u06e7\7\u01ff\2\2\u06e7\u06ec\5\u00a4S\2\u06e8"+
		"\u06e9\7\u0205\2\2\u06e9\u06eb\5\u00a4S\2\u06ea\u06e8\3\2\2\2\u06eb\u06ee"+
		"\3\2\2\2\u06ec\u06ea\3\2\2\2\u06ec\u06ed\3\2\2\2\u06ed\u06ef\3\2\2\2\u06ee"+
		"\u06ec\3\2\2\2\u06ef\u06f0\7\u0200\2\2\u06f0\u06fe\t\3\2\2\u06f1\u06ff"+
		"\5\u00ceh\2\u06f2\u06f4\7b\2\2\u06f3\u06f2\3\2\2\2\u06f3\u06f4\3\2\2\2"+
		"\u06f4\u06f8\3\2\2\2\u06f5\u06f7\5\u00dco\2\u06f6\u06f5\3\2\2\2\u06f7"+
		"\u06fa\3\2\2\2\u06f8\u06f6\3\2\2\2\u06f8\u06f9\3\2\2\2\u06f9\u06fb\3\2"+
		"\2\2\u06fa\u06f8\3\2\2\2\u06fb\u06fc\5\u0124\u0093\2\u06fc\u06fd\7\u020b"+
		"\2\2\u06fd\u06ff\3\2\2\2\u06fe\u06f1\3\2\2\2\u06fe\u06f3\3\2\2\2\u06ff"+
		"\u0087\3\2\2\2\u0700\u0701\7\u009c\2\2\u0701\u070d\5\u02d0\u0169\2\u0702"+
		"\u0703\7\u01ff\2\2\u0703\u0708\5\u00a4S\2\u0704\u0705\7\u0205\2\2\u0705"+
		"\u0707\5\u00a4S\2\u0706\u0704\3\2\2\2\u0707\u070a\3\2\2\2\u0708\u0706"+
		"\3\2\2\2\u0708\u0709\3\2\2\2\u0709\u070b\3\2\2\2\u070a\u0708\3\2\2\2\u070b"+
		"\u070c\7\u0200\2\2\u070c\u070e\3\2\2\2\u070d\u0702\3\2\2\2\u070d\u070e"+
		"\3\2\2\2\u070e\u070f\3\2\2\2\u070f\u0710\7\u0145\2\2\u0710\u0711\5\u02f8"+
		"\u017d\2\u0711\u071f\t\3\2\2\u0712\u0720\5\u00ceh\2\u0713\u0715\7b\2\2"+
		"\u0714\u0713\3\2\2\2\u0714\u0715\3\2\2\2\u0715\u0719\3\2\2\2\u0716\u0718"+
		"\5\u00dco\2\u0717\u0716\3\2\2\2\u0718\u071b\3\2\2\2\u0719\u0717\3\2\2"+
		"\2\u0719\u071a\3\2\2\2\u071a\u071c\3\2\2\2\u071b\u0719\3\2\2\2\u071c\u071d"+
		"\5\u0124\u0093\2\u071d\u071e\7\u020b\2\2\u071e\u0720\3\2\2\2\u071f\u0712"+
		"\3\2\2\2\u071f\u0714\3\2\2\2\u0720\u0089\3\2\2\2\u0721\u0723\7\u0090\2"+
		"\2\u0722\u0721\3\2\2\2\u0722\u0723\3\2\2\2\u0723\u0725\3\2\2\2\u0724\u0726"+
		"\7\u00b6\2\2\u0725\u0724\3\2\2\2\u0725\u0726\3\2\2\2\u0726\u0727\3\2\2"+
		"\2\u0727\u0728\7G\2\2\u0728\u0729\7\u009c\2\2\u0729\u073b\5\u02f8\u017d"+
		"\2\u072a\u072b\7\u01ff\2\2\u072b\u072c\7\u015c\2\2\u072c\u072d\7\u00a8"+
		"\2\2\u072d\u072e\7\u0113\2\2\u072e\u072f\5\u02f8\u017d\2\u072f\u0730\7"+
		"\u0205\2\2\u0730\u0731\3\2\2\2\u0731\u0736\5\u00a4S\2\u0732\u0733\7\u0205"+
		"\2\2\u0733\u0735\5\u00a4S\2\u0734\u0732\3\2\2\2\u0735\u0738\3\2\2\2\u0736"+
		"\u0734\3\2\2\2\u0736\u0737\3\2\2\2\u0737\u0739\3\2\2\2\u0738\u0736\3\2"+
		"\2\2\u0739\u073a\7\u0200\2\2\u073a\u073c\3\2\2\2\u073b\u072a\3\2\2\2\u073b"+
		"\u073c\3\2\2\2\u073c\u073d\3\2\2\2\u073d\u073e\7\u0145\2\2\u073e\u073f"+
		"\7\u015c\2\2\u073f\u0740\7\16\2\2\u0740\u0741\7\u0143\2\2\u0741\u074f"+
		"\t\3\2\2\u0742\u0750\5\u00ceh\2\u0743\u0745\7b\2\2\u0744\u0743\3\2\2\2"+
		"\u0744\u0745\3\2\2\2\u0745\u0749\3\2\2\2\u0746\u0748\5\u00dco\2\u0747"+
		"\u0746\3\2\2\2\u0748\u074b\3\2\2\2\u0749\u0747\3\2\2\2\u0749\u074a\3\2"+
		"\2\2\u074a\u074c\3\2\2\2\u074b\u0749\3\2\2\2\u074c\u074d\5\u0124\u0093"+
		"\2\u074d\u074e\7\u020b\2\2\u074e\u0750\3\2\2\2\u074f\u0742\3\2\2\2\u074f"+
		"\u0744\3\2\2\2\u0750\u008b\3\2\2\2\u0751\u0753\7\u00fe\2\2\u0752\u0751"+
		"\3\2\2\2\u0752\u0753\3\2\2\2\u0753\u0754\3\2\2\2\u0754\u0755\t\23\2\2"+
		"\u0755\u008d\3\2\2\2\u0756\u0757\5\u0310\u0189\2\u0757\u0759\5\u02f8\u017d"+
		"\2\u0758\u075a\5\u0090I\2\u0759\u0758\3\2\2\2\u0759\u075a\3\2\2\2\u075a"+
		"\u075d\3\2\2\2\u075b\u075d\5\u0092J\2\u075c\u0756\3\2\2\2\u075c\u075b"+
		"\3\2\2\2\u075d\u008f\3\2\2\2\u075e\u075f\7\u008b\2\2\u075f\u0760\7\u00e9"+
		"\2\2\u0760\u0761\5\u020c\u0107\2\u0761\u0091\3\2\2\2\u0762\u0764\5\u008c"+
		"G\2\u0763\u0762\3\2\2\2\u0763\u0764\3\2\2\2\u0764\u0766\3\2\2\2\u0765"+
		"\u0767\5\u0094K\2\u0766\u0765\3\2\2\2\u0767\u0768\3\2\2\2\u0768\u0766"+
		"\3\2\2\2\u0768\u0769\3\2\2\2\u0769\u076c\3\2\2\2\u076a\u076b\7\u0205\2"+
		"\2\u076b\u076d\5\u00a0Q\2\u076c\u076a\3\2\2\2\u076c\u076d\3\2\2\2\u076d"+
		"\u0093\3\2\2\2\u076e\u0772\5\u0096L\2\u076f\u0772\5\u009cO\2\u0770\u0772"+
		"\5\u009eP\2\u0771\u076e\3\2\2\2\u0771\u076f\3\2\2\2\u0771\u0770\3\2\2"+
		"\2\u0772\u0095\3\2\2\2\u0773\u0776\t\22\2\2\u0774\u0777\5\u0098M\2\u0775"+
		"\u0777\5\u009aN\2\u0776\u0774\3\2\2\2\u0776\u0775\3\2\2\2\u0777\u0097"+
		"\3\2\2\2\u0778\u0779\7\u0132\2\2\u0779\u077a\5\u02d2\u016a\2\u077a\u077b"+
		"\7\u01ff\2\2\u077b\u0780\5\u00a4S\2\u077c\u077d\7\u0205\2\2\u077d\u077f"+
		"\5\u00a4S\2\u077e\u077c\3\2\2\2\u077f\u0782\3\2\2\2\u0780\u077e\3\2\2"+
		"\2\u0780\u0781\3\2\2\2\u0781\u0783\3\2\2\2\u0782\u0780\3\2\2\2\u0783\u0786"+
		"\7\u0200\2\2\u0784\u0785\t\3\2\2\u0785\u0787\5\u00ceh\2\u0786\u0784\3"+
		"\2\2\2\u0786\u0787\3\2\2\2\u0787\u0099\3\2\2\2\u0788\u0789\7\u009c\2\2"+
		"\u0789\u0795\5\u02d0\u0169\2\u078a\u078b\7\u01ff\2\2\u078b\u0790\5\u00a4"+
		"S\2\u078c\u078d\7\u0205\2\2\u078d\u078f\5\u00a4S\2\u078e\u078c\3\2\2\2"+
		"\u078f\u0792\3\2\2\2\u0790\u078e\3\2\2\2\u0790\u0791\3\2\2\2\u0791\u0793"+
		"\3\2\2\2\u0792\u0790\3\2\2\2\u0793\u0794\7\u0200\2\2\u0794\u0796\3\2\2"+
		"\2\u0795\u078a\3\2\2\2\u0795\u0796\3\2\2\2\u0796\u0797\3\2\2\2\u0797\u079c"+
		"\7\u0145\2\2\u0798\u079d\5\u02f8\u017d\2\u0799\u079a\7\u015c\2\2\u079a"+
		"\u079b\7\16\2\2\u079b\u079d\7\u0143\2\2\u079c\u0798\3\2\2\2\u079c\u0799"+
		"\3\2\2\2\u079d\u07a6\3\2\2\2\u079e\u079f\t\3\2\2\u079f\u07a7\5\u00ceh"+
		"\2\u07a0\u07a2\7\u008b\2\2\u07a1\u07a3\7\u01ab\2\2\u07a2\u07a1\3\2\2\2"+
		"\u07a2\u07a3\3\2\2\2\u07a3\u07a4\3\2\2\2\u07a4\u07a5\7\u00e9\2\2\u07a5"+
		"\u07a7\5\u020c\u0107\2\u07a6\u079e\3\2\2\2\u07a6\u07a0\3\2\2\2\u07a6\u07a7"+
		"\3\2\2\2\u07a7\u009b\3\2\2\2\u07a8\u07aa\7\u0090\2\2\u07a9\u07a8\3\2\2"+
		"\2\u07a9\u07aa\3\2\2\2\u07aa\u07ac\3\2\2\2\u07ab\u07ad\7\u00b6\2\2\u07ac"+
		"\u07ab\3\2\2\2\u07ac\u07ad\3\2\2\2\u07ad\u07ae\3\2\2\2\u07ae\u07af\7G"+
		"\2\2\u07af\u07b0\7\u009c\2\2\u07b0\u07c2\5\u02f8\u017d\2\u07b1\u07b2\7"+
		"\u01ff\2\2\u07b2\u07b3\7\u015c\2\2\u07b3\u07b4\7\u00a8\2\2\u07b4\u07b5"+
		"\7\u0113\2\2\u07b5\u07b6\5\u02f8\u017d\2\u07b6\u07b7\7\u0205\2\2\u07b7"+
		"\u07b8\3\2\2\2\u07b8\u07bd\5\u00a4S\2\u07b9\u07ba\7\u0205\2\2\u07ba\u07bc"+
		"\5\u00a4S\2\u07bb\u07b9\3\2\2\2\u07bc\u07bf\3\2\2\2\u07bd\u07bb\3\2\2"+
		"\2\u07bd\u07be\3\2\2\2\u07be\u07c0\3\2\2\2\u07bf\u07bd\3\2\2\2\u07c0\u07c1"+
		"\7\u0200\2\2\u07c1\u07c3\3\2\2\2\u07c2\u07b1\3\2\2\2\u07c2\u07c3\3\2\2"+
		"\2\u07c3\u07c4\3\2\2\2\u07c4\u07c5\7\u0145\2\2\u07c5\u07c6\7\u015c\2\2"+
		"\u07c6\u07c7\7\16\2\2\u07c7\u07ca\7\u0143\2\2\u07c8\u07c9\t\3\2\2\u07c9"+
		"\u07cb\5\u00ceh\2\u07ca\u07c8\3\2\2\2\u07ca\u07cb\3\2\2\2\u07cb\u009d"+
		"\3\2\2\2\u07cc\u07cd\t\21\2\2\u07cd\u07ce\7\u00de\2\2\u07ce\u07cf\5\u009a"+
		"N\2\u07cf\u009f\3\2\2\2\u07d0\u07d1\7\u012c\2\2\u07d1\u07d2\7\u0142\2"+
		"\2\u07d2\u07d3\7\u01ff\2\2\u07d3\u07d8\5\u00a2R\2\u07d4\u07d5\7\u0205"+
		"\2\2\u07d5\u07d7\5\u00a2R\2\u07d6\u07d4\3\2\2\2\u07d7\u07da\3\2\2\2\u07d8"+
		"\u07d6\3\2\2\2\u07d8\u07d9\3\2\2\2\u07d9\u07db\3\2\2\2\u07da\u07d8\3\2"+
		"\2\2\u07db\u07dc\7\u0200\2\2\u07dc\u00a1\3\2\2\2\u07dd\u07e0\5\u0310\u0189"+
		"\2\u07de\u07e0\7e\2\2\u07df\u07dd\3\2\2\2\u07df\u07de\3\2\2\2\u07e0\u00a3"+
		"\3\2\2\2\u07e1\u07e2\5\u02bc\u015f\2\u07e2\u07e3\5\u02f8\u017d\2\u07e3"+
		"\u00a5\3\2\2\2\u07e4\u07e5\7s\2\2\u07e5\u07e6\7\u015d\2\2\u07e6\u07e7"+
		"\5\u02cc\u0167\2\u07e7\u07e8\7\u020b\2\2\u07e8\u00a7\3\2\2\2\u07e9\u07ea"+
		"\7\t\2\2\u07ea\u07eb\7\u015d\2\2\u07eb\u07ed\5\u02cc\u0167\2\u07ec\u07ee"+
		"\5\u00acW\2\u07ed\u07ec\3\2\2\2\u07ee\u07ef\3\2\2\2\u07ef\u07ed\3\2\2"+
		"\2\u07ef\u07f0\3\2\2\2\u07f0\u07f1\3\2\2\2\u07f1\u07f2\7\u020b\2\2\u07f2"+
		"\u00a9\3\2\2\2\u07f3\u07f4\7P\2\2\u07f4\u07f5\7\u015d\2\2\u07f5\u07fa"+
		"\5\u02cc\u0167\2\u07f6\u07f9\5\u00aeX\2\u07f7\u07f9\5\u00acW\2\u07f8\u07f6"+
		"\3\2\2\2\u07f8\u07f7\3\2\2\2\u07f9\u07fc\3\2\2\2\u07fa\u07f8\3\2\2\2\u07fa"+
		"\u07fb\3\2\2\2\u07fb\u07fd\3\2\2\2\u07fc\u07fa\3\2\2\2\u07fd\u07fe\7\u020b"+
		"\2\2\u07fe\u00ab\3\2\2\2\u07ff\u0800\7\u00ab\2\2\u0800\u0801\7\'\2\2\u0801"+
		"\u0810\7\u01f9\2\2\u0802\u0803\7\u00dc\2\2\u0803\u0810\7\u01f9\2\2\u0804"+
		"\u0810\7\u00f9\2\2\u0805\u0806\7\u00e2\2\2\u0806\u0810\7\u01f9\2\2\u0807"+
		"\u0810\7\u00fa\2\2\u0808\u0810\7W\2\2\u0809\u0810\7\u00f7\2\2\u080a\u080b"+
		"\7*\2\2\u080b\u0810\7\u01f9\2\2\u080c\u0810\7\u00f5\2\2\u080d\u0810\7"+
		"\u0110\2\2\u080e\u0810\7\u00fc\2\2\u080f\u07ff\3\2\2\2\u080f\u0802\3\2"+
		"\2\2\u080f\u0804\3\2\2\2\u080f\u0805\3\2\2\2\u080f\u0807\3\2\2\2\u080f"+
		"\u0808\3\2\2\2\u080f\u0809\3\2\2\2\u080f\u080a\3\2\2\2\u080f\u080c\3\2"+
		"\2\2\u080f\u080d\3\2\2\2\u080f\u080e\3\2\2\2\u0810\u00ad\3\2\2\2\u0811"+
		"\u0812\7\u0176\2\2\u0812\u0813\7\u01b7\2\2\u0813\u0814\7\u01f9\2\2\u0814"+
		"\u00af\3\2\2\2\u0815\u0816\7P\2\2\u0816\u0817\7\u0184\2\2\u0817\u0818"+
		"\5\u02e4\u0173\2\u0818\u0819\7\u01ff\2\2\u0819\u081a\5\u02e2\u0172\2\u081a"+
		"\u0821\5\u02fa\u017e\2\u081b\u081c\7\u0205\2\2\u081c\u081d\5\u02e2\u0172"+
		"\2\u081d\u081e\5\u02fa\u017e\2\u081e\u0820\3\2\2\2\u081f\u081b\3\2\2\2"+
		"\u0820\u0823\3\2\2\2\u0821\u081f\3\2\2\2\u0821\u0822\3\2\2\2\u0822\u0824"+
		"\3\2\2\2\u0823\u0821\3\2\2\2\u0824\u0825\7\u0200\2\2\u0825\u00b1\3\2\2"+
		"\2\u0826\u0827\7s\2\2\u0827\u0828\7\u0184\2\2\u0828\u0829\5\u02e4\u0173"+
		"\2\u0829\u00b3\3\2\2\2\u082a\u082b\7<\2\2\u082b\u082c\7\u010a\2\2\u082c"+
		"\u082d\7:\2\2\u082d\u082e\5\u02e4\u0173\2\u082e\u082f\7\u01f8\2\2\u082f"+
		"\u0830\5\u02e2\u0172\2\u0830\u0831\7\u00be\2\2\u0831\u0832\5\u030e\u0188"+
		"\2\u0832\u00b5\3\2\2\2\u0833\u0836\7P\2\2\u0834\u0835\7\u010e\2\2\u0835"+
		"\u0837\7\u0140\2\2\u0836\u0834\3\2\2\2\u0836\u0837\3\2\2\2\u0837\u0838"+
		"\3\2\2\2\u0838\u0839\7\u0128\2\2\u0839\u083a\7\u0183\2\2\u083a\u083b\5"+
		"\u02e8\u0175\2\u083b\u083f\7\u0096\2\2\u083c\u083d\5\u02b4\u015b\2\u083d"+
		"\u083e\7\u01f8\2\2\u083e\u0840\3\2\2\2\u083f\u083c\3\2\2\2\u083f\u0840"+
		"\3\2\2\2\u0840\u0841\3\2\2\2\u0841\u0844\5\u02ea\u0176\2\u0842\u0843\7"+
		"\u0207\2\2\u0843\u0845\5\u02e0\u0171\2\u0844\u0842\3\2\2\2\u0844\u0845"+
		"\3\2\2\2\u0845\u085e\3\2\2\2\u0846\u0849\7P\2\2\u0847\u0848\7\u010e\2"+
		"\2\u0848\u084a\7\u0140\2\2\u0849\u0847\3\2\2\2\u0849\u084a\3\2\2\2\u084a"+
		"\u084b\3\2\2\2\u084b\u084f\7\u0183\2\2\u084c\u084d\5\u02b4\u015b\2\u084d"+
		"\u084e\7\u01f8\2\2\u084e\u0850\3\2\2\2\u084f\u084c\3\2\2\2\u084f\u0850"+
		"\3\2\2\2\u0850\u0851\3\2\2\2\u0851\u0852\5\u02e8\u0175\2\u0852\u0856\7"+
		"\u0096\2\2\u0853\u0854\5\u02b4\u015b\2\u0854\u0855\7\u01f8\2\2\u0855\u0857"+
		"\3\2\2\2\u0856\u0853\3\2\2\2\u0856\u0857\3\2\2\2\u0857\u0858\3\2\2\2\u0858"+
		"\u085b\5\u02ea\u0176\2\u0859\u085a\7\u0207\2\2\u085a\u085c\5\u02e0\u0171"+
		"\2\u085b\u0859\3\2\2\2\u085b\u085c\3\2\2\2\u085c\u085e\3\2\2\2\u085d\u0833"+
		"\3\2\2\2\u085d\u0846\3\2\2\2\u085e\u00b7\3\2\2\2\u085f\u0860\7<\2\2\u0860"+
		"\u0861\7\u010a\2\2\u0861\u0862\7\u0184\2\2\u0862\u0863\5\u02e4\u0173\2"+
		"\u0863\u0864\7\u00be\2\2\u0864\u0865\5\u030e\u0188\2\u0865\u00b9\3\2\2"+
		"\2\u0866\u0867\7\t\2\2\u0867\u0868\7\u0184\2\2\u0868\u0869\5\u02e4\u0173"+
		"\2\u0869\u086a\5\u00bc_\2\u086a\u00bb\3\2\2\2\u086b\u086e\7\4\2\2\u086c"+
		"\u086d\7E\2\2\u086d\u086f\5\u02c6\u0164\2\u086e\u086c\3\2\2\2\u086e\u086f"+
		"\3\2\2\2\u086f\u0873\3\2\2\2\u0870\u0874\5\u00c6d\2\u0871\u0874\5\u00be"+
		"`\2\u0872\u0874\5\u00c4c\2\u0873\u0870\3\2\2\2\u0873\u0871\3\2\2\2\u0873"+
		"\u0872\3\2\2\2\u0874\u00bd\3\2\2\2\u0875\u0876\7\u0099\2\2\u0876\u0877"+
		"\7\u00c4\2\2\u0877\u0878\7\u01ff\2\2\u0878\u087d\5\u02e2\u0172\2\u0879"+
		"\u087a\7\u0205\2\2\u087a\u087c\5\u02e2\u0172\2\u087b\u0879\3\2\2\2\u087c"+
		"\u087f\3\2\2\2\u087d\u087b\3\2\2\2\u087d\u087e\3\2\2\2\u087e\u0880\3\2"+
		"\2\2\u087f\u087d\3\2\2\2\u0880\u0881\7\u0200\2\2\u0881\u0883\5\u00c0a"+
		"\2\u0882\u0884\5\u00c2b\2\u0883\u0882\3\2\2\2\u0883\u0884\3\2\2\2\u0884"+
		"\u00bf\3\2\2\2\u0885\u0886\7\u013b\2\2\u0886\u0887\5\u02e4\u0173\2\u0887"+
		"\u0888\7\u01ff\2\2\u0888\u088d\5\u02e2\u0172\2\u0889\u088a\7\u0205\2\2"+
		"\u088a\u088c\5\u02e2\u0172\2\u088b\u0889\3\2\2\2\u088c\u088f\3\2\2\2\u088d"+
		"\u088b\3\2\2\2\u088d\u088e\3\2\2\2\u088e\u0890\3\2\2\2\u088f\u088d\3\2"+
		"\2\2\u0890\u0891\7\u0200\2\2\u0891\u00c1\3\2\2\2\u0892\u0893\7\u010a\2"+
		"\2\u0893\u0897\7i\2\2\u0894\u0898\7-\2\2\u0895\u0896\7\u0163\2\2\u0896"+
		"\u0898\7\u0100\2\2\u0897\u0894\3\2\2\2\u0897\u0895\3\2\2\2\u0898\u00c3"+
		"\3\2\2\2\u0899\u089a\7\u019c\2\2\u089a\u089b\7\u01ff\2\2\u089b\u08a0\5"+
		"\u02e2\u0172\2\u089c\u089d\7\u0205\2\2\u089d\u089f\5\u02e2\u0172\2\u089e"+
		"\u089c\3\2\2\2\u089f\u08a2\3\2\2\2\u08a0\u089e\3\2\2\2\u08a0\u08a1\3\2"+
		"\2\2\u08a1\u08a3\3\2\2\2\u08a2\u08a0\3\2\2\2\u08a3\u08a4\7\u0200\2\2\u08a4"+
		"\u00c5\3\2\2\2\u08a5\u08a6\7\u0130\2\2\u08a6\u08a7\7\u00c4\2\2\u08a7\u08a8"+
		"\7\u01ff\2\2\u08a8\u08ad\5\u02e2\u0172\2\u08a9\u08aa\7\u0205\2\2\u08aa"+
		"\u08ac\5\u02e2\u0172\2\u08ab\u08a9\3\2\2\2\u08ac\u08af\3\2\2\2\u08ad\u08ab"+
		"\3\2\2\2\u08ad\u08ae\3\2\2\2\u08ae\u08b0\3\2\2\2\u08af\u08ad\3\2\2\2\u08b0"+
		"\u08b1\7\u0200\2\2\u08b1\u00c7\3\2\2\2\u08b2\u08b3\7\32\2\2\u08b3\u08b4"+
		"\5\u00f8}\2\u08b4\u08b5\7|\2\2\u08b5\u08b6\7\u020b\2\2\u08b6\u00c9\3\2"+
		"\2\2\u08b7\u08b8\7\24\2\2\u08b8\u08b9\t\24\2\2\u08b9\u00cb\3\2\2\2\u08ba"+
		"\u08bb\5\u0310\u0189\2\u08bb\u08bc\7\u0216\2\2\u08bc\u08bd\5\u020c\u0107"+
		"\2\u08bd\u00cd\3\2\2\2\u08be\u08c1\7\u00c5\2\2\u08bf\u08c2\5\u00d0i\2"+
		"\u08c0\u08c2\5\u00d2j\2\u08c1\u08bf\3\2\2\2\u08c1\u08c0\3\2\2\2\u08c2"+
		"\u00cf\3\2\2\2\u08c3\u08c4\7\u00c1\2\2\u08c4\u08c5\7\u00e9\2\2\u08c5\u08c6"+
		"\7\u01fb\2\2\u08c6\u00d1\3\2\2\2\u08c7\u08ca\7)\2\2\u08c8\u08c9\7\u00e9"+
		"\2\2\u08c9\u08cb\7\u01fb\2\2\u08ca\u08c8\3\2\2\2\u08ca\u08cb\3\2\2\2\u08cb"+
		"\u08cc\3\2\2\2\u08cc\u08cd\7\u00cb\2\2\u08cd\u08cf\5\u0310\u0189\2\u08ce"+
		"\u08d0\5\u00d4k\2\u08cf\u08ce\3\2\2\2\u08cf\u08d0\3\2\2\2\u08d0\u08d3"+
		"\3\2\2\2\u08d1\u08d2\7\u01b7\2\2\u08d2\u08d4\7I\2\2\u08d3\u08d1\3\2\2"+
		"\2\u08d3\u08d4\3\2\2\2\u08d4\u08d6\3\2\2\2\u08d5\u08d7\5\u00d6l\2\u08d6"+
		"\u08d5\3\2\2\2\u08d6\u08d7\3\2\2\2\u08d7\u00d3\3\2\2\2\u08d8\u08d9\7\6"+
		"\2\2\u08d9\u08da\7\u00a8\2\2\u08da\u08db\7\u01ff\2\2\u08db\u08e0\5\u020c"+
		"\u0107\2\u08dc\u08dd\7\u0205\2\2\u08dd\u08df\5\u020c\u0107\2\u08de\u08dc"+
		"\3\2\2\2\u08df\u08e2\3\2\2\2\u08e0\u08de\3\2\2\2\u08e0\u08e1\3\2\2\2\u08e1"+
		"\u08e3\3\2\2\2\u08e2\u08e0\3\2\2\2\u08e3\u08e4\7\u0200\2\2\u08e4\u00d5"+
		"\3\2\2\2\u08e5\u08e6\7\u0119\2\2\u08e6\u08f2\7\u01ff\2\2\u08e7\u08ec\5"+
		"\u020c\u0107\2\u08e8\u08e9\7\u0205\2\2\u08e9\u08eb\5\u020c\u0107\2\u08ea"+
		"\u08e8\3\2\2\2\u08eb\u08ee\3\2\2\2\u08ec\u08ea\3\2\2\2\u08ec\u08ed\3\2"+
		"\2\2\u08ed\u08f3\3\2\2\2\u08ee\u08ec\3\2\2\2\u08ef\u08f0\7\u01f8\2\2\u08f0"+
		"\u08f1\7\u01f8\2\2\u08f1\u08f3\7\u01f8\2\2\u08f2\u08e7\3\2\2\2\u08f2\u08ef"+
		"\3\2\2\2\u08f3\u08f4\3\2\2\2\u08f4\u08f5\7\u0200\2\2\u08f5\u00d7\3\2\2"+
		"\2\u08f6\u08fa\5\u02bc\u015f\2\u08f7\u08f9\t\25\2\2\u08f8\u08f7\3\2\2"+
		"\2\u08f9\u08fc\3\2\2\2\u08fa\u08f8\3\2\2\2\u08fa\u08fb\3\2\2\2\u08fb\u08fe"+
		"\3\2\2\2\u08fc\u08fa\3\2\2\2\u08fd\u08ff\5\u02f8\u017d\2\u08fe\u08fd\3"+
		"\2\2\2\u08fe\u08ff\3\2\2\2\u08ff\u0901\3\2\2\2\u0900\u0902\5\u00dan\2"+
		"\u0901\u0900\3\2\2\2\u0901\u0902\3\2\2\2\u0902\u00d9\3\2\2\2\u0903\u0904"+
		"\t\26\2\2\u0904\u0905\5\u020c\u0107\2\u0905\u00db\3\2\2\2\u0906\u0911"+
		"\5\u00dep\2\u0907\u0911\5\u00e0q\2\u0908\u0911\5\u00e2r\2\u0909\u0911"+
		"\5\u00e6t\2\u090a\u0911\5\u00e8u\2\u090b\u0911\5\u00f0y\2\u090c\u0911"+
		"\5$\23\2\u090d\u0911\5&\24\2\u090e\u0911\5\60\31\2\u090f\u0911\5.\30\2"+
		"\u0910\u0906\3\2\2\2\u0910\u0907\3\2\2\2\u0910\u0908\3\2\2\2\u0910\u0909"+
		"\3\2\2\2\u0910\u090a\3\2\2\2\u0910\u090b\3\2\2\2\u0910\u090c\3\2\2\2\u0910"+
		"\u090d\3\2\2\2\u0910\u090e\3\2\2\2\u0910\u090f\3\2\2\2\u0911\u00dd\3\2"+
		"\2\2\u0912\u0914\5\u0310\u0189\2\u0913\u0915\7D\2\2\u0914\u0913\3\2\2"+
		"\2\u0914\u0915\3\2\2\2\u0915\u0916\3\2\2\2\u0916\u0919\5\u02f8\u017d\2"+
		"\u0917\u0918\7\u00fe\2\2\u0918\u091a\7\u0100\2\2\u0919\u0917\3\2\2\2\u0919"+
		"\u091a\3\2\2\2\u091a\u091c\3\2\2\2\u091b\u091d\5\u00dan\2\u091c\u091b"+
		"\3\2\2\2\u091c\u091d\3\2\2\2\u091d\u091e\3\2\2\2\u091e\u091f\7\u020b\2"+
		"\2\u091f\u00df\3\2\2\2\u0920\u0921\7\u0180\2\2\u0921\u0922\5\u0310\u0189"+
		"\2\u0922\u0923\7\u00be\2\2\u0923\u0929\5\u02f8\u017d\2\u0924\u0925\7\u0134"+
		"\2\2\u0925\u0926\5\u020c\u0107\2\u0926\u0927\7\u01f7\2\2\u0927\u0928\5"+
		"\u020c\u0107\2\u0928\u092a\3\2\2\2\u0929\u0924\3\2\2\2\u0929\u092a\3\2"+
		"\2\2\u092a\u092d\3\2\2\2\u092b\u092c\7\u00fe\2\2\u092c\u092e\7\u0100\2"+
		"\2\u092d\u092b\3\2\2\2\u092d\u092e\3\2\2\2\u092e\u092f\3\2\2\2\u092f\u0930"+
		"\7\u020b\2\2\u0930\u00e1\3\2\2\2\u0931\u0932\7U\2\2\u0932\u093e\5\u0310"+
		"\u0189\2\u0933\u0934\7\u01ff\2\2\u0934\u0939\5\u00e4s\2\u0935\u0936\7"+
		"\u0205\2\2\u0936\u0938\5\u00e4s\2\u0937\u0935\3\2\2\2\u0938\u093b\3\2"+
		"\2\2\u0939\u0937\3\2\2\2\u0939\u093a\3\2\2\2\u093a\u093c\3\2\2\2\u093b"+
		"\u0939\3\2\2\2\u093c\u093d\7\u0200\2\2\u093d\u093f\3\2\2\2\u093e\u0933"+
		"\3\2\2\2\u093e\u093f\3\2\2\2\u093f\u0942\3\2\2\2\u0940\u0941\7\u0145\2"+
		"\2\u0941\u0943\5\u02f8\u017d\2\u0942\u0940\3\2\2\2\u0942\u0943\3\2\2\2"+
		"\u0943\u0946\3\2\2\2\u0944\u0945\7\u00be\2\2\u0945\u0947\5\u014e\u00a8"+
		"\2\u0946\u0944\3\2\2\2\u0946\u0947\3\2\2\2\u0947\u0948\3\2\2\2\u0948\u0949"+
		"\7\u020b\2\2\u0949\u00e3\3\2\2\2\u094a\u094f\5\u02bc\u015f\2\u094b\u094d"+
		"\7\u00a8\2\2\u094c\u094b\3\2\2\2\u094c\u094d\3\2\2\2\u094d\u094e\3\2\2"+
		"\2\u094e\u0950\5\u02f8\u017d\2\u094f\u094c\3\2\2\2\u094f\u0950\3\2\2\2"+
		"\u0950\u0952\3\2\2\2\u0951\u0953\5\u00dan\2\u0952\u0951\3\2\2\2\u0952"+
		"\u0953\3\2\2\2\u0953\u00e5\3\2\2\2\u0954\u0955\5\u0310\u0189\2\u0955\u0956"+
		"\7\u0082\2\2\u0956\u0957\7\u020b\2\2\u0957\u00e7\3\2\2\2\u0958\u0977\7"+
		"\u012c\2\2\u0959\u0978\7\u0160\2\2\u095a\u0978\7\27\2\2\u095b\u095c\7"+
		"\u0083\2\2\u095c\u095d\7\u01ff\2\2\u095d\u095e\5\u02ce\u0168\2\u095e\u095f"+
		"\7\u0205\2\2\u095f\u0960\5\u030c\u0187\2\u0960\u0961\7\u0200\2\2\u0961"+
		"\u0978\3\2\2\2\u0962\u0963\7\u00b2\2\2\u0963\u0964\7\u01ff\2\2\u0964\u0965"+
		"\5\u0310\u0189\2\u0965\u0966\7\u0205\2\2\u0966\u0967\5\u020c\u0107\2\u0967"+
		"\u0968\7\u0200\2\2\u0968\u0978\3\2\2\2\u0969\u096a\7\u0142\2\2\u096a\u096d"+
		"\7\u01ff\2\2\u096b\u096e\5\u0310\u0189\2\u096c\u096e\7e\2\2\u096d\u096b"+
		"\3\2\2\2\u096d\u096c\3\2\2\2\u096e\u0971\3\2\2\2\u096f\u0970\7\u0205\2"+
		"\2\u0970\u0972\5\u0310\u0189\2\u0971\u096f\3\2\2\2\u0972\u0973\3\2\2\2"+
		"\u0973\u0971\3\2\2\2\u0973\u0974\3\2\2\2\u0974\u0975\3\2\2\2\u0975\u0976"+
		"\7\u0200\2\2\u0976\u0978\3\2\2\2\u0977\u0959\3\2\2\2\u0977\u095a\3\2\2"+
		"\2\u0977\u095b\3\2\2\2\u0977\u0962\3\2\2\2\u0977\u0969\3\2\2\2\u0978\u0979"+
		"\3\2\2\2\u0979\u097a\7\u020b\2\2\u097a\u00e9\3\2\2\2\u097b\u097c\7\u0138"+
		"\2\2\u097c\u097d\7\u01ff\2\2\u097d\u0982\5\u00ecw\2\u097e\u097f\7\u0205"+
		"\2\2\u097f\u0981\5\u00ecw\2\u0980\u097e\3\2\2\2\u0981\u0984\3\2\2\2\u0982"+
		"\u0980\3\2\2\2\u0982\u0983\3\2\2\2\u0983\u0985\3\2\2\2\u0984\u0982\3\2"+
		"\2\2\u0985\u0986\7\u0200\2\2\u0986\u00eb\3\2\2\2\u0987\u0989\5\u02e2\u0172"+
		"\2\u0988\u098a\5\u02f8\u017d\2\u0989\u0988\3\2\2\2\u0989\u098a\3\2\2\2"+
		"\u098a\u098d\3\2\2\2\u098b\u098c\7\u00fe\2\2\u098c\u098e\7\u0100\2\2\u098d"+
		"\u098b\3\2\2\2\u098d\u098e\3\2\2\2\u098e\u0990\3\2\2\2\u098f\u0991\5\u00da"+
		"n\2\u0990\u098f\3\2\2\2\u0990\u0991\3\2\2\2\u0991\u00ed\3\2\2\2\u0992"+
		"\u0993\7\u0139\2\2\u0993\u0996\7U\2\2\u0994\u0995\7\u0145\2\2\u0995\u0997"+
		"\5\u02f8\u017d\2\u0996\u0994\3\2\2\2\u0996\u0997\3\2\2\2\u0997\u00ef\3"+
		"\2\2\2\u0998\u0999\7\u0198\2\2\u0999\u099a\5\u0310\u0189\2\u099a\u099f"+
		"\7\u00be\2\2\u099b\u09a0\5\u00f2z\2\u099c\u09a0\5\u00f6|\2\u099d\u09a0"+
		"\5\u00eav\2\u099e\u09a0\5\u00eex\2\u099f\u099b\3\2\2\2\u099f\u099c\3\2"+
		"\2\2\u099f\u099d\3\2\2\2\u099f\u099e\3\2\2\2\u09a0\u09a1\3\2\2\2\u09a1"+
		"\u09a2\7\u020b\2\2\u09a2\u00f1\3\2\2\2\u09a3\u09a4\7\u0184\2\2\u09a4\u09a5"+
		"\7\u0106\2\2\u09a5\u09a7\5\u02f8\u017d\2\u09a6\u09a8\5\u00f4{\2\u09a7"+
		"\u09a6\3\2\2\2\u09a7\u09a8\3\2\2\2\u09a8\u09ab\3\2\2\2\u09a9\u09aa\7\u00fe"+
		"\2\2\u09aa\u09ac\7\u0100\2\2\u09ab\u09a9\3\2\2\2\u09ab\u09ac\3\2\2\2\u09ac"+
		"\u00f3\3\2\2\2\u09ad\u09b0\7\u00ae\2\2\u09ae\u09b0\7\u00ad\2\2\u09af\u09ad"+
		"\3\2\2\2\u09af\u09ae\3\2\2\2\u09b0\u09b1\3\2\2\2\u09b1\u09b2\7\'\2\2\u09b2"+
		"\u09b3\5\u02f8\u017d\2\u09b3\u00f5\3\2\2\2\u09b4\u09b8\7\u01ac\2\2\u09b5"+
		"\u09b6\7\u01ad\2\2\u09b6\u09b8\7\r\2\2\u09b7\u09b4\3\2\2\2\u09b7\u09b5"+
		"\3\2\2\2\u09b8\u09b9\3\2\2\2\u09b9\u09ba\7\u01ff\2\2\u09ba\u09bb\5\u020c"+
		"\u0107\2\u09bb\u09bc\7\u0200\2\2\u09bc\u09bd\7\u0106\2\2\u09bd\u09c0\5"+
		"\u02f8\u017d\2\u09be\u09bf\7\u00fe\2\2\u09bf\u09c1\7\u0100\2\2\u09c0\u09be"+
		"\3\2\2\2\u09c0\u09c1\3\2\2\2\u09c1\u00f7\3\2\2\2\u09c2\u09c3\5\u00fc\177"+
		"\2\u09c3\u09c4\t\27\2\2\u09c4\u09c7\3\2\2\2\u09c5\u09c7\5\u00fa~\2\u09c6"+
		"\u09c2\3\2\2\2\u09c6\u09c5\3\2\2\2\u09c7\u09c8\3\2\2\2\u09c8\u09c6\3\2"+
		"\2\2\u09c8\u09c9\3\2\2\2\u09c9\u00f9\3\2\2\2\u09ca\u09cb\7\u020d\2\2\u09cb"+
		"\u09cc\7\u020d\2\2\u09cc\u09cd\5\u02c8\u0165\2\u09cd\u09ce\7\u0213\2\2"+
		"\u09ce\u09cf\7\u0213\2\2\u09cf\u00fb\3\2\2\2\u09d0\u09d1\7P\2\2\u09d1"+
		"\u09ec\5\2\2\2\u09d2\u09d3\7\t\2\2\u09d3\u09ec\5\2\2\2\u09d4\u09d6\7\u009e"+
		"\2\2\u09d5\u09d7\7\b\2\2\u09d6\u09d5\3\2\2\2\u09d6\u09d7\3\2\2\2\u09d7"+
		"\u09d8\3\2\2\2\u09d8\u09ec\5\2\2\2\u09d9\u09da\7\u0197\2\2\u09da\u09ec"+
		"\5\2\2\2\u09db\u09ec\5\u0124\u0093\2\u09dc\u09ec\5\u012a\u0096\2\u09dd"+
		"\u09ec\5\u00fe\u0080\2\u09de\u09ec\5\u0100\u0081\2\u09df\u09ec\5\u0102"+
		"\u0082\2\u09e0\u09ec\5\u0104\u0083\2\u09e1\u09ec\5\u0106\u0084\2\u09e2"+
		"\u09ec\5\u010c\u0087\2\u09e3\u09ec\5\u0110\u0089\2\u09e4\u09ec\5\u011a"+
		"\u008e\2\u09e5\u09ec\5\u011c\u008f\2\u09e6\u09ec\5\u011e\u0090\2\u09e7"+
		"\u09ec\5\u0240\u0121\2\u09e8\u09ec\5\u012c\u0097\2\u09e9\u09ec\5\u0120"+
		"\u0091\2\u09ea\u09ec\5\u0122\u0092\2\u09eb\u09d0\3\2\2\2\u09eb\u09d2\3"+
		"\2\2\2\u09eb\u09d4\3\2\2\2\u09eb\u09d9\3\2\2\2\u09eb\u09db\3\2\2\2\u09eb"+
		"\u09dc\3\2\2\2\u09eb\u09dd\3\2\2\2\u09eb\u09de\3\2\2\2\u09eb\u09df\3\2"+
		"\2\2\u09eb\u09e0\3\2\2\2\u09eb\u09e1\3\2\2\2\u09eb\u09e2\3\2\2\2\u09eb"+
		"\u09e3\3\2\2\2\u09eb\u09e4\3\2\2\2\u09eb\u09e5\3\2\2\2\u09eb\u09e6\3\2"+
		"\2\2\u09eb\u09e7\3\2\2\2\u09eb\u09e8\3\2\2\2\u09eb\u09e9\3\2\2\2\u09eb"+
		"\u09ea\3\2\2\2\u09ec\u00fd\3\2\2\2\u09ed\u09f0\5\u0302\u0182\2\u09ee\u09f0"+
		"\5\u0300\u0181\2\u09ef\u09ed\3\2\2\2\u09ef\u09ee\3\2\2\2\u09f0\u09f1\3"+
		"\2\2\2\u09f1\u09f2\7\u0208\2\2\u09f2\u09f3\5\u020c\u0107\2\u09f3\u00ff"+
		"\3\2\2\2\u09f4\u09f6\7J\2\2\u09f5\u09f7\5\u02c8\u0165\2\u09f6\u09f5\3"+
		"\2\2\2\u09f6\u09f7\3\2\2\2\u09f7\u09fa\3\2\2\2\u09f8\u09f9\7\u01b3\2\2"+
		"\u09f9\u09fb\5\u020a\u0106\2\u09fa\u09f8\3\2\2\2\u09fa\u09fb\3\2\2\2\u09fb"+
		"\u0101\3\2\2\2\u09fc\u09fe\7\u0089\2\2\u09fd\u09ff\5\u02c8\u0165\2\u09fe"+
		"\u09fd\3\2\2\2\u09fe\u09ff\3\2\2\2\u09ff\u0a02\3\2\2\2\u0a00\u0a01\7\u01b3"+
		"\2\2\u0a01\u0a03\5\u020a\u0106\2\u0a02\u0a00\3\2\2\2\u0a02\u0a03\3\2\2"+
		"\2\u0a03\u0103\3\2\2\2\u0a04\u0a05\7\u009d\2\2\u0a05\u0a06\5\u02c8\u0165"+
		"\2\u0a06\u0105\3\2\2\2\u0a07\u0a08\7\u00a5\2\2\u0a08\u0a09\5\u020a\u0106"+
		"\2\u0a09\u0a0a\7\u0186\2\2\u0a0a\u0a0e\5\u00f8}\2\u0a0b\u0a0d\5\u0108"+
		"\u0085\2\u0a0c\u0a0b\3\2\2\2\u0a0d\u0a10\3\2\2\2\u0a0e\u0a0c\3\2\2\2\u0a0e"+
		"\u0a0f\3\2\2\2\u0a0f\u0a12\3\2\2\2\u0a10\u0a0e\3\2\2\2\u0a11\u0a13\5\u010a"+
		"\u0086\2\u0a12\u0a11\3\2\2\2\u0a12\u0a13\3\2\2\2\u0a13\u0a14\3\2\2\2\u0a14"+
		"\u0a15\7|\2\2\u0a15\u0a16\7\u00a5\2\2\u0a16\u0107\3\2\2\2\u0a17\u0a18"+
		"\7x\2\2\u0a18\u0a19\5\u020a\u0106\2\u0a19\u0a1a\7\u0186\2\2\u0a1a\u0a1b"+
		"\5\u00f8}\2\u0a1b\u0109\3\2\2\2\u0a1c\u0a1d\7w\2\2\u0a1d\u0a1e\5\u00f8"+
		"}\2\u0a1e\u010b\3\2\2\2\u0a1f\u0a21\5\u02c8\u0165\2\u0a20\u0a1f\3\2\2"+
		"\2\u0a20\u0a21\3\2\2\2\u0a21\u0a26\3\2\2\2\u0a22\u0a23\7\u01b6\2\2\u0a23"+
		"\u0a27\5\u020a\u0106\2\u0a24\u0a25\7\u0096\2\2\u0a25\u0a27\5\u010e\u0088"+
		"\2\u0a26\u0a22\3\2\2\2\u0a26\u0a24\3\2\2\2\u0a26\u0a27\3\2\2\2\u0a27\u0a28"+
		"\3\2\2\2\u0a28\u0a29\7\u00d8\2\2\u0a29\u0a2a\5\u00f8}\2\u0a2a\u0a2b\7"+
		"|\2\2\u0a2b\u0a2d\7\u00d8\2\2\u0a2c\u0a2e\5\u02c8\u0165\2\u0a2d\u0a2c"+
		"\3\2\2\2\u0a2d\u0a2e\3\2\2\2\u0a2e\u010d\3\2\2\2\u0a2f\u0a30\5\u02d8\u016d"+
		"\2\u0a30\u0a32\7\u00a8\2\2\u0a31\u0a33\7\u0148\2\2\u0a32\u0a31\3\2\2\2"+
		"\u0a32\u0a33\3\2\2\2\u0a33\u0a34\3\2\2\2\u0a34\u0a35\5\u0116\u008c\2\u0a35"+
		"\u0a36\7\u01f7\2\2\u0a36\u0a37\5\u0118\u008d\2\u0a37\u0a45\3\2\2\2\u0a38"+
		"\u0a39\5\u02dc\u016f\2\u0a39\u0a42\7\u00a8\2\2\u0a3a\u0a3c\5\u02da\u016e"+
		"\2\u0a3b\u0a3d\5\u0208\u0105\2\u0a3c\u0a3b\3\2\2\2\u0a3c\u0a3d\3\2\2\2"+
		"\u0a3d\u0a43\3\2\2\2\u0a3e\u0a3f\7\u01ff\2\2\u0a3f\u0a40\5\u014e\u00a8"+
		"\2\u0a40\u0a41\7\u0200\2\2\u0a41\u0a43\3\2\2\2\u0a42\u0a3a\3\2\2\2\u0a42"+
		"\u0a3e\3\2\2\2\u0a43\u0a45\3\2\2\2\u0a44\u0a2f\3\2\2\2\u0a44\u0a38\3\2"+
		"\2\2\u0a45\u010f\3\2\2\2\u0a46\u0a47\7\u0097\2\2\u0a47\u0a48\5\u02d8\u016d"+
		"\2\u0a48\u0a49\7\u00a8\2\2\u0a49\u0a4a\5\u0112\u008a\2\u0a4a\u0a4d\5\u012c"+
		"\u0097\2\u0a4b\u0a4c\7\u0152\2\2\u0a4c\u0a4e\7\u0084\2\2\u0a4d\u0a4b\3"+
		"\2\2\2\u0a4d\u0a4e\3\2\2\2\u0a4e\u0111\3\2\2\2\u0a4f\u0a50\5\u0116\u008c"+
		"\2\u0a50\u0a51\7\u01f7\2\2\u0a51\u0a52\5\u0118\u008d\2\u0a52\u0a5d\3\2"+
		"\2\2\u0a53\u0a54\7\u00b0\2\2\u0a54\u0a55\7\u0106\2\2\u0a55\u0a57\5\u02de"+
		"\u0170\2\u0a56\u0a58\5\u0114\u008b\2\u0a57\u0a56\3\2\2\2\u0a57\u0a58\3"+
		"\2\2\2\u0a58\u0a5d\3\2\2\2\u0a59\u0a5a\7\u01a8\2\2\u0a5a\u0a5b\7\u0106"+
		"\2\2\u0a5b\u0a5d\5\u02d8\u016d\2\u0a5c\u0a4f\3\2\2\2\u0a5c\u0a53\3\2\2"+
		"\2\u0a5c\u0a59\3\2\2\2\u0a5d\u0113\3\2\2\2\u0a5e\u0a5f\7\33\2\2\u0a5f"+
		"\u0a60\5\u0116\u008c\2\u0a60\u0a61\7\13\2\2\u0a61\u0a62\5\u0118\u008d"+
		"\2\u0a62\u0115\3\2\2\2\u0a63\u0a64\5\u0228\u0115\2\u0a64\u0117\3\2\2\2"+
		"\u0a65\u0a66\5\u0228\u0115\2\u0a66\u0119\3\2\2\2\u0a67\u0a68\7\u0100\2"+
		"\2\u0a68\u011b\3\2\2\2\u0a69\u0a6b\7\u0133\2\2\u0a6a\u0a6c\5\u02ce\u0168"+
		"\2\u0a6b\u0a6a\3\2\2\2\u0a6b\u0a6c\3\2\2\2\u0a6c\u011d\3\2\2\2\u0a6d\u0a6f"+
		"\7\u0145\2\2\u0a6e\u0a70\5\u020c\u0107\2\u0a6f\u0a6e\3\2\2\2\u0a6f\u0a70"+
		"\3\2\2\2\u0a70\u011f\3\2\2\2\u0a71\u0a73\7+\2\2\u0a72\u0a71\3\2\2\2\u0a72"+
		"\u0a73\3\2\2\2\u0a73\u0a74\3\2\2\2\u0a74\u0a76\5\u02b6\u015c\2\u0a75\u0a77"+
		"\5\u02ee\u0178\2\u0a76\u0a75\3\2\2\2\u0a76\u0a77\3\2\2\2\u0a77\u0121\3"+
		"\2\2\2\u0a78\u0a79\7\u0124\2\2\u0a79\u0a7a\7\u014d\2\2\u0a7a\u0a7b\7\u01ff"+
		"\2\2\u0a7b\u0a7c\5\u020c\u0107\2\u0a7c\u0a7d\7\u0200\2\2\u0a7d\u0123\3"+
		"\2\2\2\u0a7e\u0a7f\7\32\2\2\u0a7f\u0a86\5\u00f8}\2\u0a80\u0a82\7\u0082"+
		"\2\2\u0a81\u0a83\5\u0126\u0094\2\u0a82\u0a81\3\2\2\2\u0a83\u0a84\3\2\2"+
		"\2\u0a84\u0a82\3\2\2\2\u0a84\u0a85\3\2\2\2\u0a85\u0a87\3\2\2\2\u0a86\u0a80"+
		"\3\2\2\2\u0a86\u0a87\3\2\2\2\u0a87\u0a88\3\2\2\2\u0a88\u0a8a\7|\2\2\u0a89"+
		"\u0a8b\5\u02c8\u0165\2\u0a8a\u0a89\3\2\2\2\u0a8a\u0a8b\3\2\2\2\u0a8b\u0125"+
		"\3\2\2\2\u0a8c\u0a8d\7\u01b3\2\2\u0a8d\u0a92\5\u02ce\u0168\2\u0a8e\u0a8f"+
		"\7\u010e\2\2\u0a8f\u0a91\5\u02ce\u0168\2\u0a90\u0a8e\3\2\2\2\u0a91\u0a94"+
		"\3\2\2\2\u0a92\u0a90\3\2\2\2\u0a92\u0a93\3\2\2\2\u0a93\u0a95\3\2\2\2\u0a94"+
		"\u0a92\3\2\2\2\u0a95\u0a96\7\u0186\2\2\u0a96\u0a97\5\u00f8}\2\u0a97\u0127"+
		"\3\2\2\2\u0a98\u0a9a\7b\2\2\u0a99\u0a98\3\2\2\2\u0a99\u0a9a\3\2\2\2\u0a9a"+
		"\u0a9c\3\2\2\2\u0a9b\u0a9d\5\u00dco\2\u0a9c\u0a9b\3\2\2\2\u0a9d\u0a9e"+
		"\3\2\2\2\u0a9e\u0a9c\3\2\2\2\u0a9e\u0a9f\3\2\2\2\u0a9f\u0aa1\3\2\2\2\u0aa0"+
		"\u0a99\3\2\2\2\u0aa0\u0aa1\3\2\2\2\u0aa1\u0aa2\3\2\2\2\u0aa2\u0aa3\5\u0124"+
		"\u0093\2\u0aa3\u0129\3\2\2\2\u0aa4\u0aa6\7b\2\2\u0aa5\u0aa4\3\2\2\2\u0aa5"+
		"\u0aa6\3\2\2\2\u0aa6\u0aa8\3\2\2\2\u0aa7\u0aa9\5\u00dco\2\u0aa8\u0aa7"+
		"\3\2\2\2\u0aa9\u0aaa\3\2\2\2\u0aaa\u0aa8\3\2\2\2\u0aaa\u0aab\3\2\2\2\u0aab"+
		"\u0aac\3\2\2\2\u0aac\u0aad\5\u0124\u0093\2\u0aad\u012b\3\2\2\2\u0aae\u0ab3"+
		"\5\u012e\u0098\2\u0aaf\u0ab3\5\u0132\u009a\2\u0ab0\u0ab3\5\u0134\u009b"+
		"\2\u0ab1\u0ab3\5\u013e\u00a0\2\u0ab2\u0aae\3\2\2\2\u0ab2\u0aaf\3\2\2\2"+
		"\u0ab2\u0ab0\3\2\2\2\u0ab2\u0ab1\3\2\2\2\u0ab3\u012d\3\2\2\2\u0ab4\u0ab5"+
		"\7\u0087\2\2\u0ab5\u0ab6\7\u00a7\2\2\u0ab6\u0ac0\5\u020c\u0107\2\u0ab7"+
		"\u0ab9\5\u02a6\u0154\2\u0ab8\u0aba\5\u026c\u0137\2\u0ab9\u0ab8\3\2\2\2"+
		"\u0ab9\u0aba\3\2\2\2\u0aba\u0ac1\3\2\2\2\u0abb\u0abd\5\u026c\u0137\2\u0abc"+
		"\u0abe\5\u0130\u0099\2\u0abd\u0abc\3\2\2\2\u0abd\u0abe\3\2\2\2\u0abe\u0ac1"+
		"\3\2\2\2\u0abf\u0ac1\5\u0130\u0099\2\u0ac0\u0ab7\3\2\2\2\u0ac0\u0abb\3"+
		"\2\2\2\u0ac0\u0abf\3\2\2\2\u0ac0\u0ac1\3\2\2\2\u0ac1\u012f\3\2\2\2\u0ac2"+
		"\u0ac3\t\30\2\2\u0ac3\u0ac4\5\u02a6\u0154\2\u0ac4\u0131\3\2\2\2\u0ac5"+
		"\u0acd\5\u01de\u00f0\2\u0ac6\u0acd\5\u01ea\u00f6\2\u0ac7\u0acd\5\u014e"+
		"\u00a8\2\u0ac8\u0acd\5\u01c4\u00e3\2\u0ac9\u0acd\5\u01ca\u00e6\2\u0aca"+
		"\u0acd\5\u01cc\u00e7\2\u0acb\u0acd\5\u014c\u00a7\2\u0acc\u0ac5\3\2\2\2"+
		"\u0acc\u0ac6\3\2\2\2\u0acc\u0ac7\3\2\2\2\u0acc\u0ac8\3\2\2\2\u0acc\u0ac9"+
		"\3\2\2\2\u0acc\u0aca\3\2\2\2\u0acc\u0acb\3\2\2\2\u0acd\u0133\3\2\2\2\u0ace"+
		"\u0ad3\5\u0136\u009c\2\u0acf\u0ad3\5\u0138\u009d\2\u0ad0\u0ad3\5\u013a"+
		"\u009e\2\u0ad1\u0ad3\5\u013c\u009f\2\u0ad2\u0ace\3\2\2\2\u0ad2\u0acf\3"+
		"\2\2\2\u0ad2\u0ad0\3\2\2\2\u0ad2\u0ad1\3\2\2\2\u0ad3\u0135\3\2\2\2\u0ad4"+
		"\u0ad5\7\66\2\2\u0ad5\u0ad6\5\u02da\u016e\2\u0ad6\u0137\3\2\2\2\u0ad7"+
		"\u0ad8\7\u010c\2\2\u0ad8\u0ada\5\u02da\u016e\2\u0ad9\u0adb\5\u0208\u0105"+
		"\2\u0ada\u0ad9\3\2\2\2\u0ada\u0adb\3\2\2\2\u0adb\u0139\3\2\2\2\u0adc\u0add"+
		"\7\u008f\2\2\u0add\u0af2\5\u02da\u016e\2\u0ade\u0adf\7\u00bc\2\2\u0adf"+
		"\u0ae4\5\u02d6\u016c\2\u0ae0\u0ae1\7\u0205\2\2\u0ae1\u0ae3\5\u02d6\u016c"+
		"\2\u0ae2\u0ae0\3\2\2\2\u0ae3\u0ae6\3\2\2\2\u0ae4\u0ae2\3\2\2\2\u0ae4\u0ae5"+
		"\3\2\2\2\u0ae5\u0af3\3\2\2\2\u0ae6\u0ae4\3\2\2\2\u0ae7\u0ae8\7&\2\2\u0ae8"+
		"\u0ae9\79\2\2\u0ae9\u0aea\7\u00bc\2\2\u0aea\u0aef\5\u02d6\u016c\2\u0aeb"+
		"\u0aec\7\u0205\2\2\u0aec\u0aee\5\u02d6\u016c\2\u0aed\u0aeb\3\2\2\2\u0aee"+
		"\u0af1\3\2\2\2\u0aef\u0aed\3\2\2\2\u0aef\u0af0\3\2\2\2\u0af0\u0af3\3\2"+
		"\2\2\u0af1\u0aef\3\2\2\2\u0af2\u0ade\3\2\2\2\u0af2\u0ae7\3\2\2\2\u0af3"+
		"\u013b\3\2\2\2\u0af4\u0af5\7\u010c\2\2\u0af5\u0af6\5\u02d6\u016c\2\u0af6"+
		"\u0af9\7\u0096\2\2\u0af7\u0afa\5\u014e\u00a8\2\u0af8\u0afa\5\u020c\u0107"+
		"\2\u0af9\u0af7\3\2\2\2\u0af9\u0af8\3\2\2\2\u0afa\u0afc\3\2\2\2\u0afb\u0afd"+
		"\5\u026c\u0137\2\u0afc\u0afb\3\2\2\2\u0afc\u0afd\3\2\2\2\u0afd\u013d\3"+
		"\2\2\2\u0afe\u0b04\5\u0140\u00a1\2\u0aff\u0b04\5\u0142\u00a2\2\u0b00\u0b04"+
		"\5\u0144\u00a3\2\u0b01\u0b04\5\u0148\u00a5\2\u0b02\u0b04\5\u014a\u00a6"+
		"\2\u0b03\u0afe\3\2\2\2\u0b03\u0aff\3\2\2\2\u0b03\u0b00\3\2\2\2\u0b03\u0b01"+
		"\3\2\2\2\u0b03\u0b02\3\2\2\2\u0b04\u013f\3\2\2\2\u0b05\u0b06\7\u0163\2"+
		"\2\u0b06\u0b14\7\u0192\2\2\u0b07\u0b08\7\u0136\2\2\u0b08\u0b15\t\31\2"+
		"\2\u0b09\u0b0a\7\u00bf\2\2\u0b0a\u0b0e\7\u00ca\2\2\u0b0b\u0b0f\7\u015f"+
		"\2\2\u0b0c\u0b0d\7\u0136\2\2\u0b0d\u0b0f\7>\2\2\u0b0e\u0b0b\3\2\2\2\u0b0e"+
		"\u0b0c\3\2\2\2\u0b0f\u0b15\3\2\2\2\u0b10\u0b11\7\u01a4\2\2\u0b11\u0b12"+
		"\7\u014b\2\2\u0b12\u0b13\7\u015a\2\2\u0b13\u0b15\5\u02b0\u0159\2\u0b14"+
		"\u0b07\3\2\2\2\u0b14\u0b09\3\2\2\2\u0b14\u0b10\3\2\2\2\u0b14\u0b15\3\2"+
		"\2\2\u0b15\u0b18\3\2\2\2\u0b16\u0b17\7\u00e9\2\2\u0b17\u0b19\5\u030e\u0188"+
		"\2\u0b18\u0b16\3\2\2\2\u0b18\u0b19\3\2\2\2\u0b19\u0141\3\2\2\2\u0b1a\u0b1b"+
		"\7\u0163\2\2\u0b1b\u0b25\t\32\2\2\u0b1c\u0b26\7\b\2\2\u0b1d\u0b22\5\u02c6"+
		"\u0164\2\u0b1e\u0b1f\7\u0205\2\2\u0b1f\u0b21\5\u02c6\u0164\2\u0b20\u0b1e"+
		"\3\2\2\2\u0b21\u0b24\3\2\2\2\u0b22\u0b20\3\2\2\2\u0b22\u0b23\3\2\2\2\u0b23"+
		"\u0b26\3\2\2\2\u0b24\u0b22\3\2\2\2\u0b25\u0b1c\3\2\2\2\u0b25\u0b1d\3\2"+
		"\2\2\u0b26\u0b27\3\2\2\2\u0b27\u0b28\t\33\2\2\u0b28\u0143\3\2\2\2\u0b29"+
		"\u0b2b\7=\2\2\u0b2a\u0b2c\7\u01b9\2\2\u0b2b\u0b2a\3\2\2\2\u0b2b\u0b2c"+
		"\3\2\2\2\u0b2c\u0b3a\3\2\2\2\u0b2d\u0b2e\7<\2\2\u0b2e\u0b3b\5\u020c\u0107"+
		"\2\u0b2f\u0b38\7\u0098\2\2\u0b30\u0b31\7L\2\2\u0b31\u0b39\5\u020c\u0107"+
		"\2\u0b32\u0b39\7M\2\2\u0b33\u0b36\5\u020c\u0107\2\u0b34\u0b35\7\u0205"+
		"\2\2\u0b35\u0b37\5\u020c\u0107\2\u0b36\u0b34\3\2\2\2\u0b36\u0b37\3\2\2"+
		"\2\u0b37\u0b39\3\2\2\2\u0b38\u0b30\3\2\2\2\u0b38\u0b32\3\2\2\2\u0b38\u0b33"+
		"\3\2\2\2\u0b39\u0b3b\3\2\2\2\u0b3a\u0b2d\3\2\2\2\u0b3a\u0b2f\3\2\2\2\u0b3a"+
		"\u0b3b\3\2\2\2\u0b3b\u0b3d\3\2\2\2\u0b3c\u0b3e\5\u0146\u00a4\2\u0b3d\u0b3c"+
		"\3\2\2\2\u0b3d\u0b3e\3\2\2\2\u0b3e\u0145\3\2\2\2\u0b3f\u0b41\7\u01ba\2"+
		"\2\u0b40\u0b42\t\34\2\2\u0b41\u0b40\3\2\2\2\u0b41\u0b42\3\2\2\2\u0b42"+
		"\u0b44\3\2\2\2\u0b43\u0b45\t\35\2\2\u0b44\u0b43\3\2\2\2\u0b44\u0b45\3"+
		"\2\2\2\u0b45\u0147\3\2\2\2\u0b46\u0b48\7\u014b\2\2\u0b47\u0b49\7\u01b9"+
		"\2\2\u0b48\u0b47\3\2\2\2\u0b48\u0b49\3\2\2\2\u0b49\u0b51\3\2\2\2\u0b4a"+
		"\u0b4c\7\u0190\2\2\u0b4b\u0b4d\7\u0153\2\2\u0b4c\u0b4b\3\2\2\2\u0b4c\u0b4d"+
		"\3\2\2\2\u0b4d\u0b4e\3\2\2\2\u0b4e\u0b52\5\u02ae\u0158\2\u0b4f\u0b50\7"+
		"\u0098\2\2\u0b50\u0b52\5\u030e\u0188\2\u0b51\u0b4a\3\2\2\2\u0b51\u0b4f"+
		"\3\2\2\2\u0b51\u0b52\3\2\2\2\u0b52\u0149\3\2\2\2\u0b53\u0b54\7\u0153\2"+
		"\2\u0b54\u0b55\5\u02ae\u0158\2\u0b55\u014b\3\2\2\2\u0b56\u0b57\7\u008a"+
		"\2\2\u0b57\u0b5c\7\u0127\2\2\u0b58\u0b59\7\u0163\2\2\u0b59\u0b5a\7\u0179"+
		"\2\2\u0b5a\u0b5b\7\u0216\2\2\u0b5b\u0b5d\5\u030e\u0188\2\u0b5c\u0b58\3"+
		"\2\2\2\u0b5c\u0b5d\3\2\2\2\u0b5d\u0b60\3\2\2\2\u0b5e\u0b5f\7\u00bc\2\2"+
		"\u0b5f\u0b61\5\u02e4\u0173\2\u0b60\u0b5e\3\2\2\2\u0b60\u0b61\3\2\2\2\u0b61"+
		"\u0b62\3\2\2\2\u0b62\u0b68\7\u0096\2\2\u0b63\u0b69\5\u014e\u00a8\2\u0b64"+
		"\u0b69\5\u01c4\u00e3\2\u0b65\u0b69\5\u01ca\u00e6\2\u0b66\u0b69\5\u01cc"+
		"\u00e7\2\u0b67\u0b69\5\u01de\u00f0\2\u0b68\u0b63\3\2\2\2\u0b68\u0b64\3"+
		"\2\2\2\u0b68\u0b65\3\2\2\2\u0b68\u0b66\3\2\2\2\u0b68\u0b67\3\2\2\2\u0b69"+
		"\u014d\3\2\2\2\u0b6a\u0b6c\5\u0150\u00a9\2\u0b6b\u0b6a\3\2\2\2\u0b6b\u0b6c"+
		"\3\2\2\2\u0b6c\u0b6d\3\2\2\2\u0b6d\u0b72\5\u0158\u00ad\2\u0b6e\u0b71\5"+
		"\u01be\u00e0\2\u0b6f\u0b71\5\u01ba\u00de\2\u0b70\u0b6e\3\2\2\2\u0b70\u0b6f"+
		"\3\2\2\2\u0b71\u0b74\3\2\2\2\u0b72\u0b70\3\2\2\2\u0b72\u0b73\3\2\2\2\u0b73"+
		"\u014f\3\2\2\2\u0b74\u0b72\3\2\2\2\u0b75\u0b76\7\u01b7\2\2\u0b76\u0b7b"+
		"\5\u0152\u00aa\2\u0b77\u0b78\7\u0205\2\2\u0b78\u0b7a\5\u0152\u00aa\2\u0b79"+
		"\u0b77\3\2\2\2\u0b7a\u0b7d\3\2\2\2\u0b7b\u0b79\3\2\2\2\u0b7b\u0b7c\3\2"+
		"\2\2\u0b7c\u0151\3\2\2\2\u0b7d\u0b7b\3\2\2\2\u0b7e\u0b8a\5\u02c4\u0163"+
		"\2\u0b7f\u0b80\7\u01ff\2\2\u0b80\u0b85\5\u02e2\u0172\2\u0b81\u0b82\7\u0205"+
		"\2\2\u0b82\u0b84\5\u02e2\u0172\2\u0b83\u0b81\3\2\2\2\u0b84\u0b87\3\2\2"+
		"\2\u0b85\u0b83\3\2\2\2\u0b85\u0b86\3\2\2\2\u0b86\u0b88\3\2\2\2\u0b87\u0b85"+
		"\3\2\2\2\u0b88\u0b89\7\u0200\2\2\u0b89\u0b8b\3\2\2\2\u0b8a\u0b7f\3\2\2"+
		"\2\u0b8a\u0b8b\3\2\2\2\u0b8b\u0b8c\3\2\2\2\u0b8c\u0b8d\7\16\2\2\u0b8d"+
		"\u0b8e\7\u01ff\2\2\u0b8e\u0b90\5\u0158\u00ad\2\u0b8f\u0b91\5\u01ba\u00de"+
		"\2\u0b90\u0b8f\3\2\2\2\u0b90\u0b91\3\2\2\2\u0b91\u0b92\3\2\2\2\u0b92\u0b94"+
		"\7\u0200\2\2\u0b93\u0b95\5\u0154\u00ab\2\u0b94\u0b93\3\2\2\2\u0b94\u0b95"+
		"\3\2\2\2\u0b95\u0b97\3\2\2\2\u0b96\u0b98\5\u0156\u00ac\2\u0b97\u0b96\3"+
		"\2\2\2\u0b97\u0b98\3\2\2\2\u0b98\u0153\3\2\2\2\u0b99\u0b9a\7\u0157\2\2"+
		"\u0b9a\u0b9b\t\36\2\2\u0b9b\u0b9c\7\u0091\2\2\u0b9c\u0b9d\7\'\2\2\u0b9d"+
		"\u0b9f\5\u02e2\u0172\2\u0b9e\u0ba0\7\17\2\2\u0b9f\u0b9e\3\2\2\2\u0b9f"+
		"\u0ba0\3\2\2\2\u0ba0\u0ba2\3\2\2\2\u0ba1\u0ba3\7k\2\2\u0ba2\u0ba1\3\2"+
		"\2\2\u0ba2\u0ba3\3\2\2\2\u0ba3\u0ba6\3\2\2\2\u0ba4\u0ba5\7\u0101\2\2\u0ba5"+
		"\u0ba7\7\u0091\2\2\u0ba6\u0ba4\3\2\2\2\u0ba6\u0ba7\3\2\2\2\u0ba7\u0baa"+
		"\3\2\2\2\u0ba8\u0ba9\7\u0101\2\2\u0ba9\u0bab\7\u00c6\2\2\u0baa\u0ba8\3"+
		"\2\2\2\u0baa\u0bab\3\2\2\2\u0bab\u0bbe\3\2\2\2\u0bac\u0bad\7\u0205\2\2"+
		"\u0bad\u0baf\5\u02e2\u0172\2\u0bae\u0bb0\7\17\2\2\u0baf\u0bae\3\2\2\2"+
		"\u0baf\u0bb0\3\2\2\2\u0bb0\u0bb2\3\2\2\2\u0bb1\u0bb3\7k\2\2\u0bb2\u0bb1"+
		"\3\2\2\2\u0bb2\u0bb3\3\2\2\2\u0bb3\u0bb6\3\2\2\2\u0bb4\u0bb5\7\u0101\2"+
		"\2\u0bb5\u0bb7\7\u0091\2\2\u0bb6\u0bb4\3\2\2\2\u0bb6\u0bb7\3\2\2\2\u0bb7"+
		"\u0bba\3\2\2\2\u0bb8\u0bb9\7\u0101\2\2\u0bb9\u0bbb\7\u00c6\2\2\u0bba\u0bb8"+
		"\3\2\2\2\u0bba\u0bbb\3\2\2\2\u0bbb\u0bbd\3\2\2\2\u0bbc\u0bac\3\2\2\2\u0bbd"+
		"\u0bc0\3\2\2\2\u0bbe\u0bbc\3\2\2\2\u0bbe\u0bbf\3\2\2\2\u0bbf\u0bc1\3\2"+
		"\2\2\u0bc0\u0bbe\3\2\2\2\u0bc1\u0bc2\7\u0163\2\2\u0bc2\u0bc3\5\u02e2\u0172"+
		"\2\u0bc3\u0155\3\2\2\2\u0bc4\u0bc5\7W\2\2\u0bc5\u0bca\5\u02e2\u0172\2"+
		"\u0bc6\u0bc7\7\u0205\2\2\u0bc7\u0bc9\5\u02e2\u0172\2\u0bc8\u0bc6\3\2\2"+
		"\2\u0bc9\u0bcc\3\2\2\2\u0bca\u0bc8\3\2\2\2\u0bca\u0bcb\3\2\2\2\u0bcb\u0bcd"+
		"\3\2\2\2\u0bcc\u0bca\3\2\2\2\u0bcd\u0bce\7\u0163\2\2\u0bce\u0bcf\5\u02e2"+
		"\u0172\2\u0bcf\u0bd0\7\u0190\2\2\u0bd0\u0bd1\5\u020c\u0107\2\u0bd1\u0bd2"+
		"\7e\2\2\u0bd2\u0bd3\5\u020c\u0107\2\u0bd3\u0157\3\2\2\2\u0bd4\u0bd8\5"+
		"\u015c\u00af\2\u0bd5\u0bd7\5\u015a\u00ae\2\u0bd6\u0bd5\3\2\2\2\u0bd7\u0bda"+
		"\3\2\2\2\u0bd8\u0bd6\3\2\2\2\u0bd8\u0bd9\3\2\2\2\u0bd9\u0159\3\2\2\2\u0bda"+
		"\u0bd8\3\2\2\2\u0bdb\u0bdd\7\u019b\2\2\u0bdc\u0bde\7\b\2\2\u0bdd\u0bdc"+
		"\3\2\2\2\u0bdd\u0bde\3\2\2\2\u0bde\u0be2\3\2\2\2\u0bdf\u0be2\7\u00ba\2"+
		"\2\u0be0\u0be2\7\u00e0\2\2\u0be1\u0bdb\3\2\2\2\u0be1\u0bdf\3\2\2\2\u0be1"+
		"\u0be0\3\2\2\2\u0be2\u0be3\3\2\2\2\u0be3\u0be4\5\u015c\u00af\2\u0be4\u015b"+
		"\3\2\2\2\u0be5\u0beb\5\u015e\u00b0\2\u0be6\u0be7\7\u01ff\2\2\u0be7\u0be8"+
		"\5\u0158\u00ad\2\u0be8\u0be9\7\u0200\2\2\u0be9\u0beb\3\2\2\2\u0bea\u0be5"+
		"\3\2\2\2\u0bea\u0be6\3\2\2\2\u0beb\u015d\3\2\2\2\u0bec\u0bee\7\u015b\2"+
		"\2\u0bed\u0bef\t\37\2\2\u0bee\u0bed\3\2\2\2\u0bee\u0bef\3\2\2\2\u0bef"+
		"\u0bf9\3\2\2\2\u0bf0\u0bfa\7\u0202\2\2\u0bf1\u0bf6\5\u0160\u00b1\2\u0bf2"+
		"\u0bf3\7\u0205\2\2\u0bf3\u0bf5\5\u0160\u00b1\2\u0bf4\u0bf2\3\2\2\2\u0bf5"+
		"\u0bf8\3\2\2\2\u0bf6\u0bf4\3\2\2\2\u0bf6\u0bf7\3\2\2\2\u0bf7\u0bfa\3\2"+
		"\2\2\u0bf8\u0bf6\3\2\2\2\u0bf9\u0bf0\3\2\2\2\u0bf9\u0bf1\3\2\2\2\u0bfa"+
		"\u0bfc\3\2\2\2\u0bfb\u0bfd\5\u02a6\u0154\2\u0bfc\u0bfb\3\2\2\2\u0bfc\u0bfd"+
		"\3\2\2\2\u0bfd\u0bfe\3\2\2\2\u0bfe\u0c00\5\u0162\u00b2\2\u0bff\u0c01\5"+
		"\u02a2\u0152\2\u0c00\u0bff\3\2\2\2\u0c00\u0c01\3\2\2\2\u0c01\u0c03\3\2"+
		"\2\2\u0c02\u0c04\5\u018c\u00c7\2\u0c03\u0c02\3\2\2\2\u0c03\u0c04\3\2\2"+
		"\2\u0c04\u0c06\3\2\2\2\u0c05\u0c07\5\u0190\u00c9\2\u0c06\u0c05\3\2\2\2"+
		"\u0c06\u0c07\3\2\2\2\u0c07\u0c09\3\2\2\2\u0c08\u0c0a\5\u019c\u00cf\2\u0c09"+
		"\u0c08\3\2\2\2\u0c09\u0c0a\3\2\2\2\u0c0a\u015f\3\2\2\2\u0c0b\u0c0d\5\u0164"+
		"\u00b3\2\u0c0c\u0c0e\5\u029c\u014f\2\u0c0d\u0c0c\3\2\2\2\u0c0d\u0c0e\3"+
		"\2\2\2\u0c0e\u0161\3\2\2\2\u0c0f\u0c10\7\u009a\2\2\u0c10\u0c11\5\u0166"+
		"\u00b4\2\u0c11\u0163\3\2\2\2\u0c12\u0c13\5\u02e4\u0173\2\u0c13\u0c14\7"+
		"\u01f8\2\2\u0c14\u0c15\7\u0202\2\2\u0c15\u0c1d\3\2\2\2\u0c16\u0c17\5\u031e"+
		"\u0190\2\u0c17\u0c18\7\u01f8\2\2\u0c18\u0c1a\3\2\2\2\u0c19\u0c16\3\2\2"+
		"\2\u0c19\u0c1a\3\2\2\2\u0c1a\u0c1b\3\2\2\2\u0c1b\u0c1d\5\u020c\u0107\2"+
		"\u0c1c\u0c12\3\2\2\2\u0c1c\u0c19\3\2\2\2\u0c1d\u0165\3\2\2\2\u0c1e\u0c23"+
		"\5\u0168\u00b5\2\u0c1f\u0c20\7\u0205\2\2\u0c20\u0c22\5\u0168\u00b5\2\u0c21"+
		"\u0c1f\3\2\2\2\u0c22\u0c25\3\2\2\2\u0c23\u0c21\3\2\2\2\u0c23\u0c24\3\2"+
		"\2\2\u0c24\u0167\3\2\2\2\u0c25\u0c23\3\2\2\2\u0c26\u0c2a\5\u016a\u00b6"+
		"\2\u0c27\u0c29\5\u016e\u00b8\2\u0c28\u0c27\3\2\2\2\u0c29\u0c2c\3\2\2\2"+
		"\u0c2a\u0c28\3\2\2\2\u0c2a\u0c2b\3\2\2\2\u0c2b\u0c2f\3\2\2\2\u0c2c\u0c2a"+
		"\3\2\2\2\u0c2d\u0c30\5\u017a\u00be\2\u0c2e\u0c30\5\u0186\u00c4\2\u0c2f"+
		"\u0c2d\3\2\2\2\u0c2f\u0c2e\3\2\2\2\u0c2f\u0c30\3\2\2\2\u0c30\u0169\3\2"+
		"\2\2\u0c31\u0c35\5\u016c\u00b7\2\u0c32\u0c34\5\u0178\u00bd\2\u0c33\u0c32"+
		"\3\2\2\2\u0c34\u0c37\3\2\2\2\u0c35\u0c33\3\2\2\2\u0c35\u0c36\3\2\2\2\u0c36"+
		"\u0c39\3\2\2\2\u0c37\u0c35\3\2\2\2\u0c38\u0c3a\5\u029e\u0150\2\u0c39\u0c38"+
		"\3\2\2\2\u0c39\u0c3a\3\2\2\2\u0c3a\u016b\3\2\2\2\u0c3b\u0c3e\5\u01fc\u00ff"+
		"\2\u0c3c\u0c3f\5\u017a\u00be\2\u0c3d\u0c3f\5\u0186\u00c4\2\u0c3e\u0c3c"+
		"\3\2\2\2\u0c3e\u0c3d\3\2\2\2\u0c3e\u0c3f\3\2\2\2\u0c3f\u0c53\3\2\2\2\u0c40"+
		"\u0c41\7\u01ff\2\2\u0c41\u0c45\5\u0168\u00b5\2\u0c42\u0c44\5\u015a\u00ae"+
		"\2\u0c43\u0c42\3\2\2\2\u0c44\u0c47\3\2\2\2\u0c45\u0c43\3\2\2\2\u0c45\u0c46"+
		"\3\2\2\2\u0c46\u0c48\3\2\2\2\u0c47\u0c45\3\2\2\2\u0c48\u0c4b\7\u0200\2"+
		"\2\u0c49\u0c4c\5\u017a\u00be\2\u0c4a\u0c4c\5\u0186\u00c4\2\u0c4b\u0c49"+
		"\3\2\2\2\u0c4b\u0c4a\3\2\2\2\u0c4b\u0c4c\3\2\2\2\u0c4c\u0c53\3\2\2\2\u0c4d"+
		"\u0c4e\7\u010b\2\2\u0c4e\u0c4f\7\u01ff\2\2\u0c4f\u0c50\5\u01fc\u00ff\2"+
		"\u0c50\u0c51\7\u0200\2\2\u0c51\u0c53\3\2\2\2\u0c52\u0c3b\3\2\2\2\u0c52"+
		"\u0c40\3\2\2\2\u0c52\u0c4d\3\2\2\2\u0c53\u016d\3\2\2\2\u0c54\u0c56\5\u0176"+
		"\u00bc\2\u0c55\u0c54\3\2\2\2\u0c55\u0c56\3\2\2\2\u0c56\u0c58\3\2\2\2\u0c57"+
		"\u0c59\t \2\2\u0c58\u0c57\3\2\2\2\u0c58\u0c59\3\2\2\2\u0c59\u0c5c\3\2"+
		"\2\2\u0c5a\u0c5d\7\u00b3\2\2\u0c5b\u0c5d\5\u0174\u00bb\2\u0c5c\u0c5a\3"+
		"\2\2\2\u0c5c\u0c5b\3\2\2\2\u0c5c\u0c5d\3\2\2\2\u0c5d\u0c5e\3\2\2\2\u0c5e"+
		"\u0c5f\7\u00c2\2\2\u0c5f\u0c61\5\u016a\u00b6\2\u0c60\u0c62\5\u0176\u00bc"+
		"\2\u0c61\u0c60\3\2\2\2\u0c61\u0c62\3\2\2\2\u0c62\u0c67\3\2\2\2\u0c63\u0c66"+
		"\5\u0170\u00b9\2\u0c64\u0c66\5\u0172\u00ba\2\u0c65\u0c63\3\2\2\2\u0c65"+
		"\u0c64\3\2\2\2\u0c66\u0c69\3\2\2\2\u0c67\u0c65\3\2\2\2\u0c67\u0c68\3\2"+
		"\2\2\u0c68\u016f\3\2\2\2\u0c69\u0c67\3\2\2\2\u0c6a\u0c6b\7\u010a\2\2\u0c6b"+
		"\u0c6c\5\u020a\u0106\2\u0c6c\u0171\3\2\2\2\u0c6d\u0c6e\7\u01a5\2\2\u0c6e"+
		"\u0c6f\7\u01ff\2\2\u0c6f\u0c74\5\u02e2\u0172\2\u0c70\u0c71\7\u0205\2\2"+
		"\u0c71\u0c73\5\u02e2\u0172\2\u0c72\u0c70\3\2\2\2\u0c73\u0c76\3\2\2\2\u0c74"+
		"\u0c72\3\2\2\2\u0c74\u0c75\3\2\2\2\u0c75\u0c77\3\2\2\2\u0c76\u0c74\3\2"+
		"\2\2\u0c77\u0c78\7\u0200\2\2\u0c78\u0173\3\2\2\2\u0c79\u0c7b\t!\2\2\u0c7a"+
		"\u0c7c\7\u0114\2\2\u0c7b\u0c7a\3\2\2\2\u0c7b\u0c7c\3\2\2\2\u0c7c\u0175"+
		"\3\2\2\2\u0c7d\u0c7e\7\u011b\2\2\u0c7e\u0c8c\7\'\2\2\u0c7f\u0c80\7\u01ff"+
		"\2\2\u0c80\u0c81\5\u0158\u00ad\2\u0c81\u0c82\7\u0200\2\2\u0c82\u0c8d\3"+
		"\2\2\2\u0c83\u0c8d\5\u0208\u0105\2\u0c84\u0c89\5\u020c\u0107\2\u0c85\u0c86"+
		"\7\u0205\2\2\u0c86\u0c88\5\u020c\u0107\2\u0c87\u0c85\3\2\2\2\u0c88\u0c8b"+
		"\3\2\2\2\u0c89\u0c87\3\2\2\2\u0c89\u0c8a\3\2\2\2\u0c8a\u0c8d\3\2\2\2\u0c8b"+
		"\u0c89\3\2\2\2\u0c8c\u0c7f\3\2\2\2\u0c8c\u0c83\3\2\2\2\u0c8c\u0c84\3\2"+
		"\2\2\u0c8d\u0177\3\2\2\2\u0c8e\u0c8f\7\u01af\2\2\u0c8f\u0c90\7\33\2\2"+
		"\u0c90\u0c91\t\"\2\2\u0c91\u0c97\5\u020c\u0107\2\u0c92\u0c93\7\16\2\2"+
		"\u0c93\u0c94\7\u0106\2\2\u0c94\u0c95\t#\2\2\u0c95\u0c97\5\u020c\u0107"+
		"\2\u0c96\u0c8e\3\2\2\2\u0c96\u0c92\3\2\2\2\u0c97\u0179\3\2\2\2\u0c98\u0c9a"+
		"\7\u0126\2\2\u0c99\u0c9b\7\u01bb\2\2\u0c9a\u0c99\3\2\2\2\u0c9a\u0c9b\3"+
		"\2\2\2\u0c9b\u0c9c\3\2\2\2\u0c9c\u0c9d\7\u01ff\2\2\u0c9d\u0ca2\5\u017c"+
		"\u00bf\2\u0c9e\u0c9f\7\u0205\2\2\u0c9f\u0ca1\5\u017c\u00bf\2\u0ca0\u0c9e"+
		"\3\2\2\2\u0ca1\u0ca4\3\2\2\2\u0ca2\u0ca0\3\2\2\2\u0ca2\u0ca3\3\2\2\2\u0ca3"+
		"\u0ca5\3\2\2\2\u0ca4\u0ca2\3\2\2\2\u0ca5\u0ca6\5\u017e\u00c0\2\u0ca6\u0ca7"+
		"\5\u0180\u00c1\2\u0ca7\u0ca8\7\u0200\2\2\u0ca8\u017b\3\2\2\2\u0ca9\u0caa"+
		"\5\u02c2\u0162\2\u0caa\u0cab\7\u01ff\2\2\u0cab\u0cac\5\u020c\u0107\2\u0cac"+
		"\u0cae\7\u0200\2\2\u0cad\u0caf\5\u029c\u014f\2\u0cae\u0cad\3\2\2\2\u0cae"+
		"\u0caf\3\2\2\2\u0caf\u017d\3\2\2\2\u0cb0\u0cbd\7\u0096\2\2\u0cb1\u0cbe"+
		"\5\u02e2\u0172\2\u0cb2\u0cb3\7\u01ff\2\2\u0cb3\u0cb8\5\u02e2\u0172\2\u0cb4"+
		"\u0cb5\7\u0205\2\2\u0cb5\u0cb7\5\u02e2\u0172\2\u0cb6\u0cb4\3\2\2\2\u0cb7"+
		"\u0cba\3\2\2\2\u0cb8\u0cb6\3\2\2\2\u0cb8\u0cb9\3\2\2\2\u0cb9\u0cbb\3\2"+
		"\2\2\u0cba\u0cb8\3\2\2\2\u0cbb\u0cbc\7\u0200\2\2\u0cbc\u0cbe\3\2\2\2\u0cbd"+
		"\u0cb1\3\2\2\2\u0cbd\u0cb2\3\2\2\2\u0cbe\u017f\3\2\2\2\u0cbf\u0cc0\7\u00a8"+
		"\2\2\u0cc0\u0cd2\7\u01ff\2\2\u0cc1\u0cd3\5\u0158\u00ad\2\u0cc2\u0cc7\7"+
		"\f\2\2\u0cc3\u0cc4\7\u0205\2\2\u0cc4\u0cc6\7\f\2\2\u0cc5\u0cc3\3\2\2\2"+
		"\u0cc6\u0cc9\3\2\2\2\u0cc7\u0cc5\3\2\2\2\u0cc7\u0cc8\3\2\2\2\u0cc8\u0cd3"+
		"\3\2\2\2\u0cc9\u0cc7\3\2\2\2\u0cca\u0ccf\5\u0182\u00c2\2\u0ccb\u0ccc\7"+
		"\u0205\2\2\u0ccc\u0cce\5\u0182\u00c2\2\u0ccd\u0ccb\3\2\2\2\u0cce\u0cd1"+
		"\3\2\2\2\u0ccf\u0ccd\3\2\2\2\u0ccf\u0cd0\3\2\2\2\u0cd0\u0cd3\3\2\2\2\u0cd1"+
		"\u0ccf\3\2\2\2\u0cd2\u0cc1\3\2\2\2\u0cd2\u0cc2\3\2\2\2\u0cd2\u0cca\3\2"+
		"\2\2\u0cd3\u0cd4\3\2\2\2\u0cd4\u0cd5\7\u0200\2\2\u0cd5\u0181\3\2\2\2\u0cd6"+
		"\u0cd8\5\u0184\u00c3\2\u0cd7\u0cd9\5\u029c\u014f\2\u0cd8\u0cd7\3\2\2\2"+
		"\u0cd8\u0cd9\3\2\2\2\u0cd9\u0183\3\2\2\2\u0cda\u0cdd\5\u020c\u0107\2\u0cdb"+
		"\u0cdd\5\u0208\u0105\2\u0cdc\u0cda\3\2\2\2\u0cdc\u0cdb\3\2\2\2\u0cdd\u0185"+
		"\3\2\2\2\u0cde\u0ce1\7\u019e\2\2\u0cdf\u0ce0\t$\2\2\u0ce0\u0ce2\7\u0101"+
		"\2\2\u0ce1\u0cdf\3\2\2\2\u0ce1\u0ce2\3\2\2\2\u0ce2\u0ce3\3\2\2\2\u0ce3"+
		"\u0cf0\7\u01ff\2\2\u0ce4\u0cf1\5\u02e2\u0172\2\u0ce5\u0ce6\7\u01ff\2\2"+
		"\u0ce6\u0ceb\5\u02e2\u0172\2\u0ce7\u0ce8\7\u0205\2\2\u0ce8\u0cea\5\u02e2"+
		"\u0172\2\u0ce9\u0ce7\3\2\2\2\u0cea\u0ced\3\2\2\2\u0ceb\u0ce9\3\2\2\2\u0ceb"+
		"\u0cec\3\2\2\2\u0cec\u0cee\3\2\2\2\u0ced\u0ceb\3\2\2\2\u0cee\u0cef\7\u0200"+
		"\2\2\u0cef\u0cf1\3\2\2\2\u0cf0\u0ce4\3\2\2\2\u0cf0\u0ce5\3\2\2\2\u0cf1"+
		"\u0cf2\3\2\2\2\u0cf2\u0cf3\5\u017e\u00c0\2\u0cf3\u0cf4\5\u0188\u00c5\2"+
		"\u0cf4\u0cf5\7\u0200\2\2\u0cf5\u0187\3\2\2\2\u0cf6\u0cf7\7\u00a8\2\2\u0cf7"+
		"\u0cf8\7\u01ff\2\2\u0cf8\u0cfd\5\u018a\u00c6\2\u0cf9\u0cfa\7\u0205\2\2"+
		"\u0cfa\u0cfc\5\u018a\u00c6\2\u0cfb\u0cf9\3\2\2\2\u0cfc\u0cff\3\2\2\2\u0cfd"+
		"\u0cfb\3\2\2\2\u0cfd\u0cfe\3\2\2\2\u0cfe\u0d00\3\2\2\2\u0cff\u0cfd\3\2"+
		"\2\2\u0d00\u0d01\7\u0200\2\2\u0d01\u0189\3\2\2\2\u0d02\u0d0f\5\u02e2\u0172"+
		"\2\u0d03\u0d04\7\u01ff\2\2\u0d04\u0d09\5\u02e2\u0172\2\u0d05\u0d06\7\u0205"+
		"\2\2\u0d06\u0d08\5\u02e2\u0172\2\u0d07\u0d05\3\2\2\2\u0d08\u0d0b\3\2\2"+
		"\2\u0d09\u0d07\3\2\2\2\u0d09\u0d0a\3\2\2\2\u0d0a\u0d0c\3\2\2\2\u0d0b\u0d09"+
		"\3\2\2\2\u0d0c\u0d0d\7\u0200\2\2\u0d0d\u0d0f\3\2\2\2\u0d0e\u0d02\3\2\2"+
		"\2\u0d0e\u0d03\3\2\2\2\u0d0f\u0d1f\3\2\2\2\u0d10\u0d1d\7\16\2\2\u0d11"+
		"\u0d1e\5\u0308\u0185\2\u0d12\u0d13\7\u01ff\2\2\u0d13\u0d18\5\u0308\u0185"+
		"\2\u0d14\u0d15\7\u0205\2\2\u0d15\u0d17\5\u0308\u0185\2\u0d16\u0d14\3\2"+
		"\2\2\u0d17\u0d1a\3\2\2\2\u0d18\u0d16\3\2\2\2\u0d18\u0d19\3\2\2\2\u0d19"+
		"\u0d1b\3\2\2\2\u0d1a\u0d18\3\2\2\2\u0d1b\u0d1c\7\u0200\2\2\u0d1c\u0d1e"+
		"\3\2\2\2\u0d1d\u0d11\3\2\2\2\u0d1d\u0d12\3\2\2\2\u0d1e\u0d20\3\2\2\2\u0d1f"+
		"\u0d10\3\2\2\2\u0d1f\u0d20\3\2\2\2\u0d20\u018b\3\2\2\2\u0d21\u0d22\7B"+
		"\2\2\u0d22\u0d24\7\'\2\2\u0d23\u0d25\7\u00f7\2\2\u0d24\u0d23\3\2\2\2\u0d24"+
		"\u0d25\3\2\2\2\u0d25\u0d26\3\2\2\2\u0d26\u0d28\5\u020a\u0106\2\u0d27\u0d29"+
		"\5\u018e\u00c8\2\u0d28\u0d27\3\2\2\2\u0d28\u0d29\3\2\2\2\u0d29\u0d33\3"+
		"\2\2\2\u0d2a\u0d2b\5\u018e\u00c8\2\u0d2b\u0d2c\7B\2\2\u0d2c\u0d2e\7\'"+
		"\2\2\u0d2d\u0d2f\7\u00f7\2\2\u0d2e\u0d2d\3\2\2\2\u0d2e\u0d2f\3\2\2\2\u0d2f"+
		"\u0d30\3\2\2\2\u0d30\u0d31\5\u020a\u0106\2\u0d31\u0d33\3\2\2\2\u0d32\u0d21"+
		"\3\2\2\2\u0d32\u0d2a\3\2\2\2\u0d33\u018d\3\2\2\2\u0d34\u0d35\7\u0176\2"+
		"\2\u0d35\u0d36\7\u01b7\2\2\u0d36\u0d37\5\u020a\u0106\2\u0d37\u018f\3\2"+
		"\2\2\u0d38\u0d39\7\u009f\2\2\u0d39\u0d3a\7\'\2\2\u0d3a\u0d3f\5\u0192\u00ca"+
		"\2\u0d3b\u0d3c\7\u0205\2\2\u0d3c\u0d3e\5\u0192\u00ca\2\u0d3d\u0d3b\3\2"+
		"\2\2\u0d3e\u0d41\3\2\2\2\u0d3f\u0d3d\3\2\2\2\u0d3f\u0d40\3\2\2\2\u0d40"+
		"\u0d43\3\2\2\2\u0d41\u0d3f\3\2\2\2\u0d42\u0d44\5\u019a\u00ce\2\u0d43\u0d42"+
		"\3\2\2\2\u0d43\u0d44\3\2\2\2\u0d44\u0d53\3\2\2\2\u0d45\u0d50\5\u019a\u00ce"+
		"\2\u0d46\u0d47\7\u009f\2\2\u0d47\u0d48\7\'\2\2\u0d48\u0d4d\5\u0192\u00ca"+
		"\2\u0d49\u0d4a\7\u0205\2\2\u0d4a\u0d4c\5\u0192\u00ca\2\u0d4b\u0d49\3\2"+
		"\2\2\u0d4c\u0d4f\3\2\2\2\u0d4d\u0d4b\3\2\2\2\u0d4d\u0d4e\3\2\2\2\u0d4e"+
		"\u0d51\3\2\2\2\u0d4f\u0d4d\3\2\2\2\u0d50\u0d46\3\2\2\2\u0d50\u0d51\3\2"+
		"\2\2\u0d51\u0d53\3\2\2\2\u0d52\u0d38\3\2\2\2\u0d52\u0d45\3\2\2\2\u0d53"+
		"\u0191\3\2\2\2\u0d54\u0d58\5\u0196\u00cc\2\u0d55\u0d58\5\u0194\u00cb\2"+
		"\u0d56\u0d58\5\u020c\u0107\2\u0d57\u0d54\3\2\2\2\u0d57\u0d55\3\2\2\2\u0d57"+
		"\u0d56\3\2\2\2\u0d58\u0193\3\2\2\2\u0d59\u0d5a\t%\2\2\u0d5a\u0d5b\7\u01ff"+
		"\2\2\u0d5b\u0d60\5\u0198\u00cd\2\u0d5c\u0d5d\7\u0205\2\2\u0d5d\u0d5f\5"+
		"\u0198\u00cd\2\u0d5e\u0d5c\3\2\2\2\u0d5f\u0d62\3\2\2\2\u0d60\u0d5e\3\2"+
		"\2\2\u0d60\u0d61\3\2\2\2\u0d61\u0d63\3\2\2\2\u0d62\u0d60\3\2\2\2\u0d63"+
		"\u0d64\7\u0200\2\2\u0d64\u0195\3\2\2\2\u0d65\u0d66\7\u00a0\2\2\u0d66\u0d67"+
		"\7\u0164\2\2\u0d67\u0d68\7\u01ff\2\2\u0d68\u0d6d\5\u0198\u00cd\2\u0d69"+
		"\u0d6a\7\u0205\2\2\u0d6a\u0d6c\5\u0198\u00cd\2\u0d6b\u0d69\3\2\2\2\u0d6c"+
		"\u0d6f\3\2\2\2\u0d6d\u0d6b\3\2\2\2\u0d6d\u0d6e\3\2\2\2\u0d6e\u0d70\3\2"+
		"\2\2\u0d6f\u0d6d\3\2\2\2\u0d70\u0d71\7\u0200\2\2\u0d71\u0197\3\2\2\2\u0d72"+
		"\u0d76\5\u0194\u00cb\2\u0d73\u0d76\5\u0208\u0105\2\u0d74\u0d76\5\u020c"+
		"\u0107\2\u0d75\u0d72\3\2\2\2\u0d75\u0d73\3\2\2\2\u0d75\u0d74\3\2\2\2\u0d76"+
		"\u0199\3\2\2\2\u0d77\u0d78\7\u00a2\2\2\u0d78\u0d79\5\u020a\u0106\2\u0d79"+
		"\u019b\3\2\2\2\u0d7a\u0d7e\7\u00e5\2\2\u0d7b\u0d7d\5\u019e\u00d0\2\u0d7c"+
		"\u0d7b\3\2\2\2\u0d7d\u0d80\3\2\2\2\u0d7e\u0d7c\3\2\2\2\u0d7e\u0d7f\3\2"+
		"\2\2\u0d7f\u0d82\3\2\2\2\u0d80\u0d7e\3\2\2\2\u0d81\u0d83\5\u01a0\u00d1"+
		"\2\u0d82\u0d81\3\2\2\2\u0d82\u0d83\3\2\2\2\u0d83\u0d87\3\2\2\2\u0d84\u0d86"+
		"\5\u01a2\u00d2\2\u0d85\u0d84\3\2\2\2\u0d86\u0d89\3\2\2\2\u0d87\u0d85\3"+
		"\2\2\2\u0d87\u0d88\3\2\2\2\u0d88\u0d8a\3\2\2\2\u0d89\u0d87\3\2\2\2\u0d8a"+
		"\u0d8b\5\u01a4\u00d3\2\u0d8b\u019d\3\2\2\2\u0d8c\u0d8d\t&\2\2\u0d8d\u0d95"+
		"\7\u00ed\2\2\u0d8e\u0d92\7\u019c\2\2\u0d8f\u0d93\7m\2\2\u0d90\u0d91\7"+
		"\u016c\2\2\u0d91\u0d93\7\u013a\2\2\u0d92\u0d8f\3\2\2\2\u0d92\u0d90\3\2"+
		"\2\2\u0d93\u0d95\3\2\2\2\u0d94\u0d8c\3\2\2\2\u0d94\u0d8e\3\2\2\2\u0d95"+
		"\u019f\3\2\2\2\u0d96\u0d97\7\u0145\2\2\u0d97\u0d98\t\'\2\2\u0d98\u0d99"+
		"\7\u014f\2\2\u0d99\u01a1\3\2\2\2\u0d9a\u0d9b\7\u013a\2\2\u0d9b\u0d9c\5"+
		"\u02be\u0160\2\u0d9c\u0d9d\7\u010a\2\2\u0d9d\u0d9e\7\u01ff\2\2\u0d9e\u0d9f"+
		"\5\u0158\u00ad\2\u0d9f\u0da0\7\u0200\2\2\u0da0\u0da4\5\u01a6\u00d4\2\u0da1"+
		"\u0da3\5\u019e\u00d0\2\u0da2\u0da1\3\2\2\2\u0da3\u0da6\3\2\2\2\u0da4\u0da2"+
		"\3\2\2\2\u0da4\u0da5\3\2\2\2\u0da5\u01a3\3\2\2\2\u0da6\u0da4\3\2\2\2\u0da7"+
		"\u0da8\7\u00d9\2\2\u0da8\u0daa\5\u02c0\u0161\2\u0da9\u0da7\3\2\2\2\u0da9"+
		"\u0daa\3\2\2\2\u0daa\u0dab\3\2\2\2\u0dab\u0daf\5\u01a6\u00d4\2\u0dac\u0dae"+
		"\5\u019e\u00d0\2\u0dad\u0dac\3\2\2\2\u0dae\u0db1\3\2\2\2\u0daf\u0dad\3"+
		"\2\2\2\u0daf\u0db0\3\2\2\2\u0db0\u0db2\3\2\2\2\u0db1\u0daf\3\2\2\2\u0db2"+
		"\u0db3\5\u01ae\u00d8\2\u0db3\u01a5\3\2\2\2\u0db4\u0db6\5\u01a8\u00d5\2"+
		"\u0db5\u0db4\3\2\2\2\u0db5\u0db6\3\2\2\2\u0db6\u0db7\3\2\2\2\u0db7\u0db8"+
		"\7m\2\2\u0db8\u0db9\7\'\2\2\u0db9\u0dba\5\u01aa\u00d6\2\u0dba\u0dbb\7"+
		"\u00dd\2\2\u0dbb\u0dbc\5\u01aa\u00d6\2\u0dbc\u01a7\3\2\2\2\u0dbd\u0dbe"+
		"\7\u011b\2\2\u0dbe\u0dbf\7\'\2\2\u0dbf\u0dc0\5\u01aa\u00d6\2\u0dc0\u01a9"+
		"\3\2\2\2\u0dc1\u0dc2\7\u01ff\2\2\u0dc2\u0dc7\5\u01ac\u00d7\2\u0dc3\u0dc4"+
		"\7\u0205\2\2\u0dc4\u0dc6\5\u01ac\u00d7\2\u0dc5\u0dc3\3\2\2\2\u0dc6\u0dc9"+
		"\3\2\2\2\u0dc7\u0dc5\3\2\2\2\u0dc7\u0dc8\3\2\2\2\u0dc8\u0dca\3\2\2\2\u0dc9"+
		"\u0dc7\3\2\2\2\u0dca\u0dcb\7\u0200\2\2\u0dcb\u01ab\3\2\2\2\u0dcc\u0dcf"+
		"\5\u020c\u0107\2\u0dcd\u0dcf\5\u015e\u00b0\2\u0dce\u0dcc\3\2\2\2\u0dce"+
		"\u0dcd\3\2\2\2\u0dcf\u0dd1\3\2\2\2\u0dd0\u0dd2\5\u029c\u014f\2\u0dd1\u0dd0"+
		"\3\2\2\2\u0dd1\u0dd2\3\2\2\2\u0dd2\u01ad\3\2\2\2\u0dd3\u0dd5\5\u01b0\u00d9"+
		"\2\u0dd4\u0dd3\3\2\2\2\u0dd4\u0dd5\3\2\2\2\u0dd5\u0dd6\3\2\2\2\u0dd6\u0ddf"+
		"\7\u01ff\2\2\u0dd7\u0ddc\5\u01b2\u00da\2\u0dd8\u0dd9\7\u0205\2\2\u0dd9"+
		"\u0ddb\5\u01b2\u00da\2\u0dda\u0dd8\3\2\2\2\u0ddb\u0dde\3\2\2\2\u0ddc\u0dda"+
		"\3\2\2\2\u0ddc\u0ddd\3\2\2\2\u0ddd\u0de0\3\2\2\2\u0dde\u0ddc\3\2\2\2\u0ddf"+
		"\u0dd7\3\2\2\2\u0ddf\u0de0\3\2\2\2\u0de0\u0de1\3\2\2\2\u0de1\u0de2\7\u0200"+
		"\2\2\u0de2\u01af\3\2\2\2\u0de3\u0de9\7\u0150\2\2\u0de4\u0dea\7\u01a0\2"+
		"\2\u0de5\u0de7\7\u01a2\2\2\u0de6\u0de8\7\b\2\2\u0de7\u0de6\3\2\2\2\u0de7"+
		"\u0de8\3\2\2\2\u0de8\u0dea\3\2\2\2\u0de9\u0de4\3\2\2\2\u0de9\u0de5\3\2"+
		"\2\2\u0de9\u0dea\3\2\2\2\u0dea\u0ded\3\2\2\2\u0deb\u0dec\t(\2\2\u0dec"+
		"\u0dee\7\u0110\2\2\u0ded\u0deb\3\2\2\2\u0ded\u0dee\3\2\2\2\u0dee\u0df0"+
		"\3\2\2\2\u0def\u0df1\5\u01b6\u00dc\2\u0df0\u0def\3\2\2\2\u0df0\u0df1\3"+
		"\2\2\2\u0df1\u01b1\3\2\2\2\u0df2\u0df8\7\u01a0\2\2\u0df3\u0df5\7\u01a2"+
		"\2\2\u0df4\u0df6\7\b\2\2\u0df5\u0df4\3\2\2\2\u0df5\u0df6\3\2\2\2\u0df6"+
		"\u0df8\3\2\2\2\u0df7\u0df2\3\2\2\2\u0df7\u0df3\3\2\2\2\u0df7\u0df8\3\2"+
		"\2\2\u0df8\u0df9\3\2\2\2\u0df9\u0dfb\5\u01b4\u00db\2\u0dfa\u0dfc\5\u01ba"+
		"\u00de\2\u0dfb\u0dfa\3\2\2\2\u0dfb\u0dfc\3\2\2\2\u0dfc\u0dfd\3\2\2\2\u0dfd"+
		"\u0dfe\7\u0216\2\2\u0dfe\u0dff\5\u020c\u0107\2\u0dff\u01b3\3\2\2\2\u0e00"+
		"\u0e01\5\u0232\u011a\2\u0e01\u01b5\3\2\2\2\u0e02\u0e03\7\u00c0\2\2\u0e03"+
		"\u0e04\7\u01ff\2\2\u0e04\u0e05\5\u020c\u0107\2\u0e05\u0e07\7\u0200\2\2"+
		"\u0e06\u0e08\5\u01b8\u00dd\2\u0e07\u0e06\3\2\2\2\u0e07\u0e08\3\2\2\2\u0e08"+
		"\u01b7\3\2\2\2\u0e09\u0e0a\7\u019f\2\2\u0e0a\u0e0b\7\u01ff\2\2\u0e0b\u0e0c"+
		"\5\u020a\u0106\2\u0e0c\u0e0d\7\u0200\2\2\u0e0d\u01b9\3\2\2\2\u0e0e\u0e10"+
		"\7\u0110\2\2\u0e0f\u0e11\7\u0169\2\2\u0e10\u0e0f\3\2\2\2\u0e10\u0e11\3"+
		"\2\2\2\u0e11\u0e12\3\2\2\2\u0e12\u0e13\7\'\2\2\u0e13\u0e18\5\u01bc\u00df"+
		"\2\u0e14\u0e15\7\u0205\2\2\u0e15\u0e17\5\u01bc\u00df\2\u0e16\u0e14\3\2"+
		"\2\2\u0e17\u0e1a\3\2\2\2\u0e18\u0e16\3\2\2\2\u0e18\u0e19\3\2\2\2\u0e19"+
		"\u01bb\3\2\2\2\u0e1a\u0e18\3\2\2\2\u0e1b\u0e1d\5\u020c\u0107\2\u0e1c\u0e1e"+
		"\t)\2\2\u0e1d\u0e1c\3\2\2\2\u0e1d\u0e1e\3\2\2\2\u0e1e\u0e21\3\2\2\2\u0e1f"+
		"\u0e20\7\u0101\2\2\u0e20\u0e22\t*\2\2\u0e21\u0e1f\3\2\2\2\u0e21\u0e22"+
		"\3\2\2\2\u0e22\u01bd\3\2\2\2\u0e23\u0e24\7\u0096\2\2\u0e24\u0e26\7\u01a0"+
		"\2\2\u0e25\u0e27\5\u01c0\u00e1\2\u0e26\u0e25\3\2\2\2\u0e26\u0e27\3\2\2"+
		"\2\u0e27\u0e29\3\2\2\2\u0e28\u0e2a\5\u01c2\u00e2\2\u0e29\u0e28\3\2\2\2"+
		"\u0e29\u0e2a\3\2\2\2\u0e2a\u01bf\3\2\2\2\u0e2b\u0e2c\7\u0106\2\2\u0e2c"+
		"\u0e31\5\u02e2\u0172\2\u0e2d\u0e2e\7\u0205\2\2\u0e2e\u0e30\5\u02e2\u0172"+
		"\2\u0e2f\u0e2d\3\2\2\2\u0e30\u0e33\3\2\2\2\u0e31\u0e2f\3\2\2\2\u0e31\u0e32"+
		"\3\2\2\2\u0e32\u01c1\3\2\2\2\u0e33\u0e31\3\2\2\2\u0e34\u0e35\7\u016e\2"+
		"\2\u0e35\u0e3a\7\u00d3\2\2\u0e36\u0e3a\7\u00ff\2\2\u0e37\u0e38\7\u01b0"+
		"\2\2\u0e38\u0e3a\5\u020c\u0107\2\u0e39\u0e34\3\2\2\2\u0e39\u0e36\3\2\2"+
		"\2\u0e39\u0e37\3\2\2\2\u0e3a\u01c3\3\2\2\2\u0e3b\u0e3c\7\u01a0\2\2\u0e3c"+
		"\u0e3d\5\u01f2\u00fa\2\u0e3d\u0e3f\5\u01c6\u00e4\2\u0e3e\u0e40\5\u02a2"+
		"\u0152\2\u0e3f\u0e3e\3\2\2\2\u0e3f\u0e40\3\2\2\2\u0e40\u0e42\3\2\2\2\u0e41"+
		"\u0e43\5\u01f4\u00fb\2\u0e42\u0e41\3\2\2\2\u0e42\u0e43\3\2\2\2\u0e43\u0e45"+
		"\3\2\2\2\u0e44\u0e46\5\u01f6\u00fc\2\u0e45\u0e44\3\2\2\2\u0e45\u0e46\3"+
		"\2\2\2\u0e46\u01c5\3\2\2\2\u0e47\u0e57\7\u0163\2\2\u0e48\u0e4d\5\u01c8"+
		"\u00e5\2\u0e49\u0e4a\7\u0205\2\2\u0e4a\u0e4c\5\u01c8\u00e5\2\u0e4b\u0e49"+
		"\3\2\2\2\u0e4c\u0e4f\3\2\2\2\u0e4d\u0e4b\3\2\2\2\u0e4d\u0e4e\3\2\2\2\u0e4e"+
		"\u0e58\3\2\2\2\u0e4f\u0e4d\3\2\2\2\u0e50\u0e51\7\u01a7\2\2\u0e51\u0e52"+
		"\7\u01ff\2\2\u0e52\u0e53\5\u0310\u0189\2\u0e53\u0e54\7\u0200\2\2\u0e54"+
		"\u0e55\7\u0216\2\2\u0e55\u0e56\5\u020c\u0107\2\u0e56\u0e58\3\2\2\2\u0e57"+
		"\u0e48\3\2\2\2\u0e57\u0e50\3\2\2\2\u0e58\u01c7\3\2\2\2\u0e59\u0e5a\5\u02e2"+
		"\u0172\2\u0e5a\u0e5b\7\u0216\2\2\u0e5b\u0e5c\5\u020c\u0107\2\u0e5c\u0e6b"+
		"\3\2\2\2\u0e5d\u0e5e\7\u01ff\2\2\u0e5e\u0e63\5\u02e2\u0172\2\u0e5f\u0e60"+
		"\7\u0205\2\2\u0e60\u0e62\5\u02e2\u0172\2\u0e61\u0e5f\3\2\2\2\u0e62\u0e65"+
		"\3\2\2\2\u0e63\u0e61\3\2\2\2\u0e63\u0e64\3\2\2\2\u0e64\u0e66\3\2\2\2\u0e65"+
		"\u0e63\3\2\2\2\u0e66\u0e67\7\u0200\2\2\u0e67\u0e68\7\u0216\2\2\u0e68\u0e69"+
		"\5\u0158\u00ad\2\u0e69\u0e6b\3\2\2\2\u0e6a\u0e59\3\2\2\2\u0e6a\u0e5d\3"+
		"\2\2\2\u0e6b\u01c9\3\2\2\2\u0e6c\u0e6e\7i\2\2\u0e6d\u0e6f\7\u009a\2\2"+
		"\u0e6e\u0e6d\3\2\2\2\u0e6e\u0e6f\3\2\2\2\u0e6f\u0e70\3\2\2\2\u0e70\u0e72"+
		"\5\u01f2\u00fa\2\u0e71\u0e73\5\u02a2\u0152\2\u0e72\u0e71\3\2\2\2\u0e72"+
		"\u0e73\3\2\2\2\u0e73\u0e75\3\2\2\2\u0e74\u0e76\5\u01f4\u00fb\2\u0e75\u0e74"+
		"\3\2\2\2\u0e75\u0e76\3\2\2\2\u0e76\u0e78\3\2\2\2\u0e77\u0e79\5\u01f6\u00fc"+
		"\2\u0e78\u0e77\3\2\2\2\u0e78\u0e79\3\2\2\2\u0e79\u01cb\3\2\2\2\u0e7a\u0e7d"+
		"\7\u00b5\2\2\u0e7b\u0e7e\5\u01ce\u00e8\2\u0e7c\u0e7e\5\u01d0\u00e9\2\u0e7d"+
		"\u0e7b\3\2\2\2\u0e7d\u0e7c\3\2\2\2\u0e7e\u01cd\3\2\2\2\u0e7f\u0e85\5\u01da"+
		"\u00ee\2\u0e80\u0e82\5\u01dc\u00ef\2\u0e81\u0e83\5\u01f4\u00fb\2\u0e82"+
		"\u0e81\3\2\2\2\u0e82\u0e83\3\2\2\2\u0e83\u0e86\3\2\2\2\u0e84\u0e86\5\u014e"+
		"\u00a8\2\u0e85\u0e80\3\2\2\2\u0e85\u0e84\3\2\2\2\u0e86\u0e88\3\2\2\2\u0e87"+
		"\u0e89\5\u01f6\u00fc\2\u0e88\u0e87\3\2\2\2\u0e88\u0e89\3\2\2\2\u0e89\u01cf"+
		"\3\2\2\2\u0e8a\u0e8c\7\b\2\2\u0e8b\u0e8d\5\u01d2\u00ea\2\u0e8c\u0e8b\3"+
		"\2\2\2\u0e8d\u0e8e\3\2\2\2\u0e8e\u0e8c\3\2\2\2\u0e8e\u0e8f\3\2\2\2\u0e8f"+
		"\u0e92\3\2\2\2\u0e90\u0e92\5\u01d4\u00eb\2\u0e91\u0e8a\3\2\2\2\u0e91\u0e90"+
		"\3\2\2\2\u0e92\u0e93\3\2\2\2\u0e93\u0e94\5\u014e\u00a8\2\u0e94\u01d1\3"+
		"\2\2\2\u0e95\u0e97\5\u01da\u00ee\2\u0e96\u0e98\5\u01dc\u00ef\2\u0e97\u0e96"+
		"\3\2\2\2\u0e97\u0e98\3\2\2\2\u0e98\u0e9a\3\2\2\2\u0e99\u0e9b\5\u01f6\u00fc"+
		"\2\u0e9a\u0e99\3\2\2\2\u0e9a\u0e9b\3\2\2\2\u0e9b\u01d3\3\2\2\2\u0e9c\u0e9e"+
		"\t+\2\2\u0e9d\u0e9c\3\2\2\2\u0e9d\u0e9e\3\2\2\2\u0e9e\u0ea0\3\2\2\2\u0e9f"+
		"\u0ea1\5\u01d6\u00ec\2\u0ea0\u0e9f\3\2\2\2\u0ea1\u0ea2\3\2\2\2\u0ea2\u0ea0"+
		"\3\2\2\2\u0ea2\u0ea3\3\2\2\2\u0ea3\u0ea5\3\2\2\2\u0ea4\u0ea6\5\u01d8\u00ed"+
		"\2\u0ea5\u0ea4\3\2\2\2\u0ea5\u0ea6\3\2\2\2\u0ea6\u01d5\3\2\2\2\u0ea7\u0ea8"+
		"\7\u01b3\2\2\u0ea8\u0ea9\5\u020a\u0106\2\u0ea9\u0eab\7\u0186\2\2\u0eaa"+
		"\u0eac\5\u01d2\u00ea\2\u0eab\u0eaa\3\2\2\2\u0eac\u0ead\3\2\2\2\u0ead\u0eab"+
		"\3\2\2\2\u0ead\u0eae\3\2\2\2\u0eae\u01d7\3\2\2\2\u0eaf\u0eb1\7w\2\2\u0eb0"+
		"\u0eb2\5\u01d2\u00ea\2\u0eb1\u0eb0\3\2\2\2\u0eb2\u0eb3\3\2\2\2\u0eb3\u0eb1"+
		"\3\2\2\2\u0eb3\u0eb4\3\2\2\2\u0eb4\u01d9\3\2\2\2\u0eb5\u0eb6\7\u00bc\2"+
		"\2\u0eb6\u0ec2\5\u01f2\u00fa\2\u0eb7\u0eb8\7\u01ff\2\2\u0eb8\u0ebd\5\u02e2"+
		"\u0172\2\u0eb9\u0eba\7\u0205\2\2\u0eba\u0ebc\5\u02e2\u0172\2\u0ebb\u0eb9"+
		"\3\2\2\2\u0ebc\u0ebf\3\2\2\2\u0ebd\u0ebb\3\2\2\2\u0ebd\u0ebe\3\2\2\2\u0ebe"+
		"\u0ec0\3\2\2\2\u0ebf\u0ebd\3\2\2\2\u0ec0\u0ec1\7\u0200\2\2\u0ec1\u0ec3"+
		"\3\2\2\2\u0ec2\u0eb7\3\2\2\2\u0ec2\u0ec3\3\2\2\2\u0ec3\u01db\3\2\2\2\u0ec4"+
		"\u0ec5\7\u01a8\2\2\u0ec5\u0ec6\5\u0208\u0105\2\u0ec6\u01dd\3\2\2\2\u0ec7"+
		"\u0ec8\7\u00df\2\2\u0ec8\u0ec9\7\u00bc\2\2\u0ec9\u0ecb\5\u02e4\u0173\2"+
		"\u0eca\u0ecc\5\u029e\u0150\2\u0ecb\u0eca\3\2\2\2\u0ecb\u0ecc\3\2\2\2\u0ecc"+
		"\u0ecd\3\2\2\2\u0ecd\u0ece\7\u01a5\2\2\u0ece\u0ecf\5\u01e8\u00f5\2\u0ecf"+
		"\u0ed0\7\u010a\2\2\u0ed0\u0ed1\7\u01ff\2\2\u0ed1\u0ed2\5\u020a\u0106\2"+
		"\u0ed2\u0edb\7\u0200\2\2\u0ed3\u0ed5\5\u01e0\u00f1\2\u0ed4\u0ed6\5\u01e6"+
		"\u00f4\2\u0ed5\u0ed4\3\2\2\2\u0ed5\u0ed6\3\2\2\2\u0ed6\u0edc\3\2\2\2\u0ed7"+
		"\u0ed9\5\u01e6\u00f4\2\u0ed8\u0eda\5\u01e0\u00f1\2\u0ed9\u0ed8\3\2\2\2"+
		"\u0ed9\u0eda\3\2\2\2\u0eda\u0edc\3\2\2\2\u0edb\u0ed3\3\2\2\2\u0edb\u0ed7"+
		"\3\2\2\2\u0edb\u0edc\3\2\2\2\u0edc\u0ede\3\2\2\2\u0edd\u0edf\5\u01f6\u00fc"+
		"\2\u0ede\u0edd\3\2\2\2\u0ede\u0edf\3\2\2\2\u0edf\u01df\3\2\2\2\u0ee0\u0ee1"+
		"\7\u01b3\2\2\u0ee1\u0ee2\7\u00db\2\2\u0ee2\u0ee3\7\u0186\2\2\u0ee3\u0ee4"+
		"\7\u01a0\2\2\u0ee4\u0ee5\7\u0163\2\2\u0ee5\u0eea\5\u01e2\u00f2\2\u0ee6"+
		"\u0ee7\7\u0205\2\2\u0ee7\u0ee9\5\u01e2\u00f2\2\u0ee8\u0ee6\3\2\2\2\u0ee9"+
		"\u0eec\3\2\2\2\u0eea\u0ee8\3\2\2\2\u0eea\u0eeb\3\2\2\2\u0eeb\u0eee\3\2"+
		"\2\2\u0eec\u0eea\3\2\2\2\u0eed\u0eef\5\u02a2\u0152\2\u0eee\u0eed\3\2\2"+
		"\2\u0eee\u0eef\3\2\2\2\u0eef\u0ef1\3\2\2\2\u0ef0\u0ef2\5\u01e4\u00f3\2"+
		"\u0ef1\u0ef0\3\2\2\2\u0ef1\u0ef2\3\2\2\2\u0ef2\u01e1\3\2\2\2\u0ef3\u0ef4"+
		"\5\u02e2\u0172\2\u0ef4\u0ef5\7\u0216\2\2\u0ef5\u0ef6\5\u020c\u0107\2\u0ef6"+
		"\u01e3\3\2\2\2\u0ef7\u0ef8\7i\2\2\u0ef8\u0ef9\5\u02a2\u0152\2\u0ef9\u01e5"+
		"\3\2\2\2\u0efa\u0efb\7\u01b3\2\2\u0efb\u0efc\7\u00fe\2\2\u0efc\u0efd\7"+
		"\u00db\2\2\u0efd\u0efe\7\u0186\2\2\u0efe\u0f0a\7\u00b5\2\2\u0eff\u0f00"+
		"\7\u01ff\2\2\u0f00\u0f05\5\u02e2\u0172\2\u0f01\u0f02\7\u0205\2\2\u0f02"+
		"\u0f04\5\u02e2\u0172\2\u0f03\u0f01\3\2\2\2\u0f04\u0f07\3\2\2\2\u0f05\u0f03"+
		"\3\2\2\2\u0f05\u0f06\3\2\2\2\u0f06\u0f08\3\2\2\2\u0f07\u0f05\3\2\2\2\u0f08"+
		"\u0f09\7\u0200\2\2\u0f09\u0f0b\3\2\2\2\u0f0a\u0eff\3\2\2\2\u0f0a\u0f0b"+
		"\3\2\2\2\u0f0b\u0f0c\3\2\2\2\u0f0c\u0f0d\7\u01a8\2\2\u0f0d\u0f0f\5\u0208"+
		"\u0105\2\u0f0e\u0f10\5\u02a2\u0152\2\u0f0f\u0f0e\3\2\2\2\u0f0f\u0f10\3"+
		"\2\2\2\u0f10\u01e7\3\2\2\2\u0f11\u0f17\5\u02e4\u0173\2\u0f12\u0f13\7\u01ff"+
		"\2\2\u0f13\u0f14\5\u014e\u00a8\2\u0f14\u0f15\7\u0200\2\2\u0f15\u0f17\3"+
		"\2\2\2\u0f16\u0f11\3\2\2\2\u0f16\u0f12\3\2\2\2\u0f17\u0f19\3\2\2\2\u0f18"+
		"\u0f1a\5\u029e\u0150\2\u0f19\u0f18\3\2\2\2\u0f19\u0f1a\3\2\2\2\u0f1a\u01e9"+
		"\3\2\2\2\u0f1b\u0f1c\7\u00d2\2\2\u0f1c\u0f1d\7\u0184\2\2\u0f1d\u0f22\5"+
		"\u01ee\u00f8\2\u0f1e\u0f1f\7\u0205\2\2\u0f1f\u0f21\5\u01ee\u00f8\2\u0f20"+
		"\u0f1e\3\2\2\2\u0f21\u0f24\3\2\2\2\u0f22\u0f20\3\2\2\2\u0f22\u0f23\3\2"+
		"\2\2\u0f23\u0f25\3\2\2\2\u0f24\u0f22\3\2\2\2\u0f25\u0f26\7\u00a8\2\2\u0f26"+
		"\u0f27\5\u01f0\u00f9\2\u0f27\u0f29\7\u00e4\2\2\u0f28\u0f2a\5\u01ec\u00f7"+
		"\2\u0f29\u0f28\3\2\2\2\u0f29\u0f2a\3\2\2\2\u0f2a\u01eb\3\2\2\2\u0f2b\u0f2c"+
		"\7\u01b0\2\2\u0f2c\u0f2f\5\u020c\u0107\2\u0f2d\u0f2f\7\u00ff\2\2\u0f2e"+
		"\u0f2b\3\2\2\2\u0f2e\u0f2d\3\2\2\2\u0f2f\u01ed\3\2\2\2\u0f30\u0f32\5\u02e4"+
		"\u0173\2\u0f31\u0f33\5\u029a\u014e\2\u0f32\u0f31\3\2\2\2\u0f32\u0f33\3"+
		"\2\2\2\u0f33\u01ef\3\2\2\2\u0f34\u0f35\7\u014d\2\2\u0f35\u0f41\7\u0166"+
		"\2\2\u0f36\u0f37\7\u014d\2\2\u0f37\u0f41\7\u0086\2\2\u0f38\u0f3a\7\u0166"+
		"\2\2\u0f39\u0f3b\7\u01a0\2\2\u0f3a\u0f39\3\2\2\2\u0f3a\u0f3b\3\2\2\2\u0f3b"+
		"\u0f41\3\2\2\2\u0f3c\u0f3d\7\u0166\2\2\u0f3d\u0f3e\7\u014d\2\2\u0f3e\u0f41"+
		"\7\u0086\2\2\u0f3f\u0f41\7\u0086\2\2\u0f40\u0f34\3\2\2\2\u0f40\u0f36\3"+
		"\2\2\2\u0f40\u0f38\3\2\2\2\u0f40\u0f3c\3\2\2\2\u0f40\u0f3f\3\2\2\2\u0f41"+
		"\u01f1\3\2\2\2\u0f42\u0f49\5\u01fc\u00ff\2\u0f43\u0f44\7\u010b\2\2\u0f44"+
		"\u0f45\7\u01ff\2\2\u0f45\u0f46\5\u01fc\u00ff\2\u0f46\u0f47\7\u0200\2\2"+
		"\u0f47\u0f49\3\2\2\2\u0f48\u0f42\3\2\2\2\u0f48\u0f43\3\2\2\2\u0f49\u0f4b"+
		"\3\2\2\2\u0f4a\u0f4c\5\u029e\u0150\2\u0f4b\u0f4a\3\2\2\2\u0f4b\u0f4c\3"+
		"\2\2\2\u0f4c\u01f3\3\2\2\2\u0f4d\u0f4e\t\30\2\2\u0f4e\u0f53\5\u020c\u0107"+
		"\2\u0f4f\u0f50\7\u0205\2\2\u0f50\u0f52\5\u020c\u0107\2\u0f51\u0f4f\3\2"+
		"\2\2\u0f52\u0f55\3\2\2\2\u0f53\u0f51\3\2\2\2\u0f53\u0f54\3\2\2\2\u0f54"+
		"\u0f56\3\2\2\2\u0f55\u0f53\3\2\2\2\u0f56\u0f57\5\u02a6\u0154\2\u0f57\u01f5"+
		"\3\2\2\2\u0f58\u0f59\7\u00d4\2\2\u0f59\u0f5b\7\177\2\2\u0f5a\u0f5c\5\u01f8"+
		"\u00fd\2\u0f5b\u0f5a\3\2\2\2\u0f5b\u0f5c\3\2\2\2\u0f5c\u0f5e\3\2\2\2\u0f5d"+
		"\u0f5f\5\u020c\u0107\2\u0f5e\u0f5d\3\2\2\2\u0f5e\u0f5f\3\2\2\2\u0f5f\u0f61"+
		"\3\2\2\2\u0f60\u0f62\5\u01fa\u00fe\2\u0f61\u0f60\3\2\2\2\u0f61\u0f62\3"+
		"\2\2\2\u0f62\u01f7\3\2\2\2\u0f63\u0f64\7\u00bc\2\2\u0f64\u0f65\5\u02e4"+
		"\u0173\2\u0f65\u01f9\3\2\2\2\u0f66\u0f67\7\u013d\2\2\u0f67\u0f6a\7\u00d0"+
		"\2\2\u0f68\u0f6b\7\u019d\2\2\u0f69\u0f6b\5\u020c\u0107\2\u0f6a\u0f68\3"+
		"\2\2\2\u0f6a\u0f69\3\2\2\2\u0f6b\u01fb\3\2\2\2\u0f6c\u0f79\5\u01fe\u0100"+
		"\2\u0f6d\u0f6e\7\u01ff\2\2\u0f6e\u0f70\5\u014e\u00a8\2\u0f6f\u0f71\5\u0200"+
		"\u0101\2\u0f70\u0f6f\3\2\2\2\u0f70\u0f71\3\2\2\2\u0f71\u0f72\3\2\2\2\u0f72"+
		"\u0f73\7\u0200\2\2\u0f73\u0f79\3\2\2\2\u0f74\u0f76\5\u02e4\u0173\2\u0f75"+
		"\u0f77\5\u0202\u0102\2\u0f76\u0f75\3\2\2\2\u0f76\u0f77\3\2\2\2\u0f77\u0f79"+
		"\3\2\2\2\u0f78\u0f6c\3\2\2\2\u0f78\u0f6d\3\2\2\2\u0f78\u0f74\3\2\2\2\u0f79"+
		"\u01fd\3\2\2\2\u0f7a\u0f87\t,\2\2\u0f7b\u0f7c\7\u01ff\2\2\u0f7c\u0f7d"+
		"\5\u0158\u00ad\2\u0f7d\u0f7e\7\u0200\2\2\u0f7e\u0f88\3\2\2\2\u0f7f\u0f80"+
		"\7\u01ff\2\2\u0f80\u0f81\5\u020c\u0107\2\u0f81\u0f85\7\u0200\2\2\u0f82"+
		"\u0f83\7\u01ff\2\2\u0f83\u0f84\7\u0203\2\2\u0f84\u0f86\7\u0200\2\2\u0f85"+
		"\u0f82\3\2\2\2\u0f85\u0f86\3\2\2\2\u0f86\u0f88\3\2\2\2\u0f87\u0f7b\3\2"+
		"\2\2\u0f87\u0f7f\3\2\2\2\u0f88\u01ff\3\2\2\2\u0f89\u0f92\7\u01b7\2\2\u0f8a"+
		"\u0f8b\7\u0136\2\2\u0f8b\u0f93\7\u010b\2\2\u0f8c\u0f8d\7\63\2\2\u0f8d"+
		"\u0f90\7\u010d\2\2\u0f8e\u0f8f\7E\2\2\u0f8f\u0f91\5\u02c6\u0164\2\u0f90"+
		"\u0f8e\3\2\2\2\u0f90\u0f91\3\2\2\2\u0f91\u0f93\3\2\2\2\u0f92\u0f8a\3\2"+
		"\2\2\u0f92\u0f8c\3\2\2\2\u0f93\u0201\3\2\2\2\u0f94\u0f96\7\u0151\2\2\u0f95"+
		"\u0f97\7!\2\2\u0f96\u0f95\3\2\2\2\u0f96\u0f97\3\2\2\2\u0f97\u0f98\3\2"+
		"\2\2\u0f98\u0f99\7\u01ff\2\2\u0f99\u0f9c\5\u020c\u0107\2\u0f9a\u0f9b\7"+
		"\u0205\2\2\u0f9b\u0f9d\5\u020c\u0107\2\u0f9c\u0f9a\3\2\2\2\u0f9c\u0f9d"+
		"\3\2\2\2\u0f9d\u0f9e\3\2\2\2\u0f9e\u0fa0\7\u0200\2\2\u0f9f\u0fa1\5\u0204"+
		"\u0103\2\u0fa0\u0f9f\3\2\2\2\u0fa0\u0fa1\3\2\2\2\u0fa1\u0203\3\2\2\2\u0fa2"+
		"\u0fa3\7\u0159\2\2\u0fa3\u0fa4\7\u01ff\2\2\u0fa4\u0fa5\5\u020c\u0107\2"+
		"\u0fa5\u0fa6\7\u0200\2\2\u0fa6\u0205\3\2\2\2\u0fa7\u0fa8\7U\2\2\u0fa8"+
		"\u0fa9\7\u01ff\2\2\u0fa9\u0faa\5\u0158\u00ad\2\u0faa\u0fab\7\u0200\2\2"+
		"\u0fab\u0207\3\2\2\2\u0fac\u0fae\7\u01ff\2\2\u0fad\u0faf\5\u020c\u0107"+
		"\2\u0fae\u0fad\3\2\2\2\u0fae\u0faf\3\2\2\2\u0faf\u0fb4\3\2\2\2\u0fb0\u0fb1"+
		"\7\u0205\2\2\u0fb1\u0fb3\5\u020c\u0107\2\u0fb2\u0fb0\3\2\2\2\u0fb3\u0fb6"+
		"\3\2\2\2\u0fb4\u0fb2\3\2\2\2\u0fb4\u0fb5\3\2\2\2\u0fb5\u0fb7\3\2\2\2\u0fb6"+
		"\u0fb4\3\2\2\2\u0fb7\u0fb8\7\u0200\2\2\u0fb8\u0209\3\2\2\2\u0fb9\u0fba"+
		"\5\u020c\u0107\2\u0fba\u020b\3\2\2\2\u0fbb\u0fbe\5\u0206\u0104\2\u0fbc"+
		"\u0fbe\5\u020e\u0108\2\u0fbd\u0fbb\3\2\2\2\u0fbd\u0fbc\3\2\2\2\u0fbe\u020d"+
		"\3\2\2\2\u0fbf\u0fc0\b\u0108\1\2\u0fc0\u0fc1\5\u0210\u0109\2\u0fc1\u0fc7"+
		"\3\2\2\2\u0fc2\u0fc3\f\3\2\2\u0fc3\u0fc4\7\u010e\2\2\u0fc4\u0fc6\5\u0210"+
		"\u0109\2\u0fc5\u0fc2\3\2\2\2\u0fc6\u0fc9\3\2\2\2\u0fc7\u0fc5\3\2\2\2\u0fc7"+
		"\u0fc8\3\2\2\2\u0fc8\u020f\3\2\2\2\u0fc9\u0fc7\3\2\2\2\u0fca\u0fcb\b\u0109"+
		"\1\2\u0fcb\u0fcc\5\u0212\u010a\2\u0fcc\u0fd2\3\2\2\2\u0fcd\u0fce\f\3\2"+
		"\2\u0fce\u0fcf\7\13\2\2\u0fcf\u0fd1\5\u0212\u010a\2\u0fd0\u0fcd\3\2\2"+
		"\2\u0fd1\u0fd4\3\2\2\2\u0fd2\u0fd0\3\2\2\2\u0fd2\u0fd3\3\2\2\2\u0fd3\u0211"+
		"\3\2\2\2\u0fd4\u0fd2\3\2\2\2\u0fd5\u0fd6\7\u00fe\2\2\u0fd6\u0fd9\5\u0212"+
		"\u010a\2\u0fd7\u0fd9\5\u0214\u010b\2\u0fd8\u0fd5\3\2\2\2\u0fd8\u0fd7\3"+
		"\2\2\2\u0fd9\u0213\3\2\2\2\u0fda\u0ffc\5\u0216\u010c\2\u0fdb\u0fdd\7\u00be"+
		"\2\2\u0fdc\u0fde\7\u00fe\2\2\u0fdd\u0fdc\3\2\2\2\u0fdd\u0fde\3\2\2\2\u0fde"+
		"\u0ff8\3\2\2\2\u0fdf\u0ff9\7\u0100\2\2\u0fe0\u0ff9\7\u00ea\2\2\u0fe1\u0ff9"+
		"\7\u012f\2\2\u0fe2\u0ff9\7\u00b1\2\2\u0fe3\u0fe4\7\3\2\2\u0fe4\u0ff9\7"+
		"\u0163\2\2\u0fe5\u0ff9\7y\2\2\u0fe6\u0fe8\7\u0106\2\2\u0fe7\u0fe9\7\u0198"+
		"\2\2\u0fe8\u0fe7\3\2\2\2\u0fe8\u0fe9\3\2\2\2\u0fe9\u0fea\3\2\2\2\u0fea"+
		"\u0fec\7\u01ff\2\2\u0feb\u0fed\7\u010b\2\2\u0fec\u0feb\3\2\2\2\u0fec\u0fed"+
		"\3\2\2\2\u0fed\u0fee\3\2\2\2\u0fee\u0ff3\5\u02f8\u017d\2\u0fef\u0ff0\7"+
		"\u0205\2\2\u0ff0\u0ff2\5\u02f8\u017d\2\u0ff1\u0fef\3\2\2\2\u0ff2\u0ff5"+
		"\3\2\2\2\u0ff3\u0ff1\3\2\2\2\u0ff3\u0ff4\3\2\2\2\u0ff4\u0ff6\3\2\2\2\u0ff5"+
		"\u0ff3\3\2\2\2\u0ff6\u0ff7\7\u0200\2\2\u0ff7\u0ff9\3\2\2\2\u0ff8\u0fdf"+
		"\3\2\2\2\u0ff8\u0fe0\3\2\2\2\u0ff8\u0fe1\3\2\2\2\u0ff8\u0fe2\3\2\2\2\u0ff8"+
		"\u0fe3\3\2\2\2\u0ff8\u0fe5\3\2\2\2\u0ff8\u0fe6\3\2\2\2\u0ff9\u0ffb\3\2"+
		"\2\2\u0ffa\u0fdb\3\2\2\2\u0ffb\u0ffe\3\2\2\2\u0ffc\u0ffa\3\2\2\2\u0ffc"+
		"\u0ffd\3\2\2\2\u0ffd\u0215\3\2\2\2\u0ffe\u0ffc\3\2\2\2\u0fff\u1006\5\u021a"+
		"\u010e\2\u1000\u1002\5\u0218\u010d\2\u1001\u1003\7\u0106\2\2\u1002\u1001"+
		"\3\2\2\2\u1002\u1003\3\2\2\2\u1003\u1004\3\2\2\2\u1004\u1005\5\u0228\u0115"+
		"\2\u1005\u1007\3\2\2\2\u1006\u1000\3\2\2\2\u1006\u1007\3\2\2\2\u1007\u0217"+
		"\3\2\2\2\u1008\u1009\t-\2\2\u1009\u0219\3\2\2\2\u100a\u100b\b\u010e\1"+
		"\2\u100b\u100c\5\u021c\u010f\2\u100c\u1013\3\2\2\2\u100d\u100e\f\4\2\2"+
		"\u100e\u100f\5\u021e\u0110\2\u100f\u1010\5\u021a\u010e\5\u1010\u1012\3"+
		"\2\2\2\u1011\u100d\3\2\2\2\u1012\u1015\3\2\2\2\u1013\u1011\3\2\2\2\u1013"+
		"\u1014\3\2\2\2\u1014\u021b\3\2\2\2\u1015\u1013\3\2\2\2\u1016\u1025\5\u0228"+
		"\u0115\2\u1017\u1019\7\u00fe\2\2\u1018\u1017\3\2\2\2\u1018\u1019\3\2\2"+
		"\2\u1019\u1023\3\2\2\2\u101a\u101b\7\u00a8\2\2\u101b\u1024\5\u0224\u0113"+
		"\2\u101c\u101d\7\33\2\2\u101d\u1024\5\u0226\u0114\2\u101e\u101f\5\u0220"+
		"\u0111\2\u101f\u1021\5\u0228\u0115\2\u1020\u1022\5\u0222\u0112\2\u1021"+
		"\u1020\3\2\2\2\u1021\u1022\3\2\2\2\u1022\u1024\3\2\2\2\u1023\u101a\3\2"+
		"\2\2\u1023\u101c\3\2\2\2\u1023\u101e\3\2\2\2\u1024\u1026\3\2\2\2\u1025"+
		"\u1018\3\2\2\2\u1025\u1026\3\2\2\2\u1026\u021d\3\2\2\2\u1027\u102e\7\u0216"+
		"\2\2\u1028\u102e\5\u0314\u018b\2\u1029\u102e\7\u020d\2\2\u102a\u102e\7"+
		"\u0213\2\2\u102b\u102e\5\u0318\u018d\2\u102c\u102e\5\u0316\u018c\2\u102d"+
		"\u1027\3\2\2\2\u102d\u1028\3\2\2\2\u102d\u1029\3\2\2\2\u102d\u102a\3\2"+
		"\2\2\u102d\u102b\3\2\2\2\u102d\u102c\3\2\2\2\u102e\u021f\3\2\2\2\u102f"+
		"\u1030\t.\2\2\u1030\u0221\3\2\2\2\u1031\u1032\7\u0080\2\2\u1032\u1033"+
		"\5\u0228\u0115\2\u1033\u0223\3\2\2\2\u1034\u1035\7\u01ff\2\2\u1035\u1036"+
		"\5\u0158\u00ad\2\u1036\u1037\7\u0200\2\2\u1037\u1047\3\2\2\2\u1038\u1039"+
		"\7\u01ff\2\2\u1039\u103e\5\u0228\u0115\2\u103a\u103b\7\u0205\2\2\u103b"+
		"\u103d\5\u0228\u0115\2\u103c\u103a\3\2\2\2\u103d\u1040\3\2\2\2\u103e\u103c"+
		"\3\2\2\2\u103e\u103f\3\2\2\2\u103f\u1041\3\2\2\2\u1040\u103e\3\2\2\2\u1041"+
		"\u1042\7\u0200\2\2\u1042\u1047\3\2\2\2\u1043\u1047\5\u0308\u0185\2\u1044"+
		"\u1047\5\u0300\u0181\2\u1045\u1047\5\u0302\u0182\2\u1046\u1034\3\2\2\2"+
		"\u1046\u1038\3\2\2\2\u1046\u1043\3\2\2\2\u1046\u1044\3\2\2\2\u1046\u1045"+
		"\3\2\2\2\u1047\u0225\3\2\2\2\u1048\u1049\5\u0228\u0115\2\u1049\u104a\7"+
		"\13\2\2\u104a\u104b\5\u0228\u0115\2\u104b\u0227\3\2\2\2\u104c\u1052\5"+
		"\u022a\u0116\2\u104d\u104e\5\u031a\u018e\2\u104e\u104f\5\u022a\u0116\2"+
		"\u104f\u1051\3\2\2\2\u1050\u104d\3\2\2\2\u1051\u1054\3\2\2\2\u1052\u1050"+
		"\3\2\2\2\u1052\u1053\3\2\2\2\u1053\u0229\3\2\2\2\u1054\u1052\3\2\2\2\u1055"+
		"\u105a\5\u022c\u0117\2\u1056\u1057\t/\2\2\u1057\u1059\5\u022c\u0117\2"+
		"\u1058\u1056\3\2\2\2\u1059\u105c\3\2\2\2\u105a\u1058\3\2\2\2\u105a\u105b"+
		"\3\2\2\2\u105b\u022b\3\2\2\2\u105c\u105a\3\2\2\2\u105d\u1062\5\u022e\u0118"+
		"\2\u105e\u105f\t\60\2\2\u105f\u1061\5\u022e\u0118\2\u1060\u105e\3\2\2"+
		"\2\u1061\u1064\3\2\2\2\u1062\u1060\3\2\2\2\u1062\u1063\3\2\2\2\u1063\u022d"+
		"\3\2\2\2\u1064\u1062\3\2\2\2\u1065\u106e\5\u0232\u011a\2\u1066\u106b\7"+
		"\21\2\2\u1067\u106c\7\u00d1\2\2\u1068\u1069\7\u0187\2\2\u1069\u106a\7"+
		"\u01cd\2\2\u106a\u106c\5\u0228\u0115\2\u106b\u1067\3\2\2\2\u106b\u1068"+
		"\3\2\2\2\u106c\u106f\3\2\2\2\u106d\u106f\5\u0230\u0119\2\u106e\u1066\3"+
		"\2\2\2\u106e\u106d\3\2\2\2\u106e\u106f\3\2\2\2\u106f\u022f\3\2\2\2\u1070"+
		"\u1075\7[\2\2\u1071\u1072\7\u01ff\2\2\u1072\u1073\5\u0228\u0115\2\u1073"+
		"\u1074\7\u0200\2\2\u1074\u1076\3\2\2\2\u1075\u1071\3\2\2\2\u1075\u1076"+
		"\3\2\2\2\u1076\u1077\3\2\2\2\u1077\u1078\7\u0190\2\2\u1078\u107d\7\u0158"+
		"\2\2\u1079\u107a\7\u01ff\2\2\u107a\u107b\5\u0228\u0115\2\u107b\u107c\7"+
		"\u0200\2\2\u107c\u107e\3\2\2\2\u107d\u1079\3\2\2\2\u107d\u107e\3\2\2\2"+
		"\u107e\u1089\3\2\2\2\u107f\u1084\7\u01ca\2\2\u1080\u1081\7\u01ff\2\2\u1081"+
		"\u1082\5\u0228\u0115\2\u1082\u1083\7\u0200\2\2\u1083\u1085\3\2\2\2\u1084"+
		"\u1080\3\2\2\2\u1084\u1085\3\2\2\2\u1085\u1086\3\2\2\2\u1086\u1087\7\u0190"+
		"\2\2\u1087\u1089\7\u00e7\2\2\u1088\u1070\3\2\2\2\u1088\u107f\3\2\2\2\u1089"+
		"\u0231\3\2\2\2\u108a\u108f\5\u023e\u0120\2\u108b\u108c\7\u0217\2\2\u108c"+
		"\u108d\5\u0234\u011b\2\u108d\u108e\7\u0218\2\2\u108e\u1090\3\2\2\2\u108f"+
		"\u108b\3\2\2\2\u108f\u1090\3\2\2\2\u1090\u0233\3\2\2\2\u1091\u1094\7\f"+
		"\2\2\u1092\u1094\5\u020c\u0107\2\u1093\u1091\3\2\2\2\u1093\u1092\3\2\2"+
		"\2\u1094\u109c\3\2\2\2\u1095\u1098\7\u0205\2\2\u1096\u1099\7\f\2\2\u1097"+
		"\u1099\5\u020c\u0107\2\u1098\u1096\3\2\2\2\u1098\u1097\3\2\2\2\u1099\u109b"+
		"\3\2\2\2\u109a\u1095\3\2\2\2\u109b\u109e\3\2\2\2\u109c\u109a\3\2\2\2\u109c"+
		"\u109d\3\2\2\2\u109d\u10a9\3\2\2\2\u109e\u109c\3\2\2\2\u109f\u10a4\5\u0236"+
		"\u011c\2\u10a0\u10a1\7\u0205\2\2\u10a1\u10a3\5\u0236\u011c\2\u10a2\u10a0"+
		"\3\2\2\2\u10a3\u10a6\3\2\2\2\u10a4\u10a2\3\2\2\2\u10a4\u10a5\3\2\2\2\u10a5"+
		"\u10a9\3\2\2\2\u10a6\u10a4\3\2\2\2\u10a7\u10a9\5\u023c\u011f\2\u10a8\u1093"+
		"\3\2\2\2\u10a8\u109f\3\2\2\2\u10a8\u10a7\3\2\2\2\u10a9\u0235\3\2\2\2\u10aa"+
		"\u10ab\7\u0096\2\2\u10ab\u10b8\5\u02e2\u0172\2\u10ac\u10ad\7\u00a8\2\2"+
		"\u10ad\u10b9\5\u0208\u0105\2\u10ae\u10b0\5\u0238\u011d\2\u10af\u10ae\3"+
		"\2\2\2\u10af\u10b0\3\2\2\2\u10b0\u10b1\3\2\2\2\u10b1\u10b2\7\u009a\2\2"+
		"\u10b2\u10b3\5\u020c\u0107\2\u10b3\u10b4\7\u0190\2\2\u10b4\u10b5\5\u020c"+
		"\u0107\2\u10b5\u10b6\5\u023a\u011e\2\u10b6\u10b7\5\u020c\u0107\2\u10b7"+
		"\u10b9\3\2\2\2\u10b8\u10ac\3\2\2\2\u10b8\u10af\3\2\2\2\u10b9\u0237\3\2"+
		"\2\2\u10ba\u10bb\7\u00cc\2\2\u10bb\u10bc\5\u020c\u0107\2\u10bc\u0239\3"+
		"\2\2\2\u10bd\u10be\t\61\2\2\u10be\u023b\3\2\2\2\u10bf\u10c0\7\u0096\2"+
		"\2\u10c0\u10c1\7\u01ff\2\2\u10c1\u10c6\5\u02e2\u0172\2\u10c2\u10c3\7\u0205"+
		"\2\2\u10c3\u10c5\5\u02e2\u0172\2\u10c4\u10c2\3\2\2\2\u10c5\u10c8\3\2\2"+
		"\2\u10c6\u10c4\3\2\2\2\u10c6\u10c7\3\2\2\2\u10c7\u10c9\3\2\2\2\u10c8\u10c6"+
		"\3\2\2\2\u10c9\u10ca\7\u0200\2\2\u10ca\u10cb\7\u00a8\2\2\u10cb\u10d8\7"+
		"\u01ff\2\2\u10cc\u10d9\5\u0158\u00ad\2\u10cd\u10ce\7\u01ff\2\2\u10ce\u10d3"+
		"\5\u0208\u0105\2\u10cf\u10d0\7\u0205\2\2\u10d0\u10d2\5\u0208\u0105\2\u10d1"+
		"\u10cf\3\2\2\2\u10d2\u10d5\3\2\2\2\u10d3\u10d1\3\2\2\2\u10d3\u10d4\3\2"+
		"\2\2\u10d4\u10d6\3\2\2\2\u10d5\u10d3\3\2\2\2\u10d6\u10d7\7\u0200\2\2\u10d7"+
		"\u10d9\3\2\2\2\u10d8\u10cc\3\2\2\2\u10d8\u10cd\3\2\2\2\u10d9\u10da\3\2"+
		"\2\2\u10da\u10db\7\u0200\2\2\u10db\u023d\3\2\2\2\u10dc\u10dd\t/\2\2\u10dd"+
		"\u10ed\5\u023e\u0120\2\u10de\u10df\7\u0131\2\2\u10df\u10ed\5\u023e\u0120"+
		"\2\u10e0\u10e1\7C\2\2\u10e1\u10ed\5\u023e\u0120\2\u10e2\u10e3\7\u00f2"+
		"\2\2\u10e3\u10ed\5\u023e\u0120\2\u10e4\u10e5\7p\2\2\u10e5\u10ed\5\u023e"+
		"\u0120\2\u10e6\u10e7\7\b\2\2\u10e7\u10ed\5\u023e\u0120\2\u10e8\u10ed\5"+
		"\u0240\u0121\2\u10e9\u10ed\5\u0252\u012a\2\u10ea\u10ed\5\u0256\u012c\2"+
		"\u10eb\u10ed\5\u024c\u0127\2\u10ec\u10dc\3\2\2\2\u10ec\u10de\3\2\2\2\u10ec"+
		"\u10e0\3\2\2\2\u10ec\u10e2\3\2\2\2\u10ec\u10e4\3\2\2\2\u10ec\u10e6\3\2"+
		"\2\2\u10ec\u10e8\3\2\2\2\u10ec\u10e9\3\2\2\2\u10ec\u10ea\3\2\2\2\u10ec"+
		"\u10eb\3\2\2\2\u10ed\u023f\3\2\2\2\u10ee\u10f1\5\u0246\u0124\2\u10ef\u10f1"+
		"\5\u0242\u0122\2\u10f0\u10ee\3\2\2\2\u10f0\u10ef\3\2\2\2\u10f1\u0241\3"+
		"\2\2\2\u10f2\u10f4\5\u02c8\u0165\2\u10f3\u10f2\3\2\2\2\u10f3\u10f4\3\2"+
		"\2\2\u10f4\u10f5\3\2\2\2\u10f5\u10f6\7.\2\2\u10f6\u10f8\5\u020c\u0107"+
		"\2\u10f7\u10f9\5\u0244\u0123\2\u10f8\u10f7\3\2\2\2\u10f9\u10fa\3\2\2\2"+
		"\u10fa\u10f8\3\2\2\2\u10fa\u10fb\3\2\2\2\u10fb\u10fd\3\2\2\2\u10fc\u10fe"+
		"\5\u024a\u0126\2\u10fd\u10fc\3\2\2\2\u10fd\u10fe\3\2\2\2\u10fe\u10ff\3"+
		"\2\2\2\u10ff\u1101\7|\2\2\u1100\u1102\7.\2\2\u1101\u1100\3\2\2\2\u1101"+
		"\u1102\3\2\2\2\u1102\u1104\3\2\2\2\u1103\u1105\5\u02c8\u0165\2\u1104\u1103"+
		"\3\2\2\2\u1104\u1105\3\2\2\2\u1105\u0243\3\2\2\2\u1106\u1107\7\u01b3\2"+
		"\2\u1107\u1108\5\u020c\u0107\2\u1108\u110b\7\u0186\2\2\u1109\u110c\5\u00f8"+
		"}\2\u110a\u110c\5\u020c\u0107\2\u110b\u1109\3\2\2\2\u110b\u110a\3\2\2"+
		"\2\u110c\u0245\3\2\2\2\u110d\u110f\5\u02c8\u0165\2\u110e\u110d\3\2\2\2"+
		"\u110e\u110f\3\2\2\2\u110f\u1110\3\2\2\2\u1110\u1112\7.\2\2\u1111\u1113"+
		"\5\u0248\u0125\2\u1112\u1111\3\2\2\2\u1113\u1114\3\2\2\2\u1114\u1112\3"+
		"\2\2\2\u1114\u1115\3\2\2\2\u1115\u1117\3\2\2\2\u1116\u1118\5\u024a\u0126"+
		"\2\u1117\u1116\3\2\2\2\u1117\u1118\3\2\2\2\u1118\u1119\3\2\2\2\u1119\u111b"+
		"\7|\2\2\u111a\u111c\7.\2\2\u111b\u111a\3\2\2\2\u111b\u111c\3\2\2\2\u111c"+
		"\u111e\3\2\2\2\u111d\u111f\5\u02c8\u0165\2\u111e\u111d\3\2\2\2\u111e\u111f"+
		"\3\2\2\2\u111f\u0247\3\2\2\2\u1120\u1121\7\u01b3\2\2\u1121\u1122\5\u020c"+
		"\u0107\2\u1122\u1125\7\u0186\2\2\u1123\u1126\5\u00f8}\2\u1124\u1126\5"+
		"\u020c\u0107\2\u1125\u1123\3\2\2\2\u1125\u1124\3\2\2\2\u1126\u0249\3\2"+
		"\2\2\u1127\u112a\7w\2\2\u1128\u112b\5\u00f8}\2\u1129\u112b\5\u020c\u0107"+
		"\2\u112a\u1128\3\2\2\2\u112a\u1129\3\2\2\2\u112b\u024b\3\2\2\2\u112c\u112d"+
		"\5\u0306\u0184\2\u112d\u112e\5\u031c\u018f\2\u112e\u1141\3\2\2\2\u112f"+
		"\u1141\5\u0300\u0181\2\u1130\u1141\5\u0308\u0185\2\u1131\u1141\5\u0302"+
		"\u0182\2\u1132\u113e\7\u01ff\2\2\u1133\u1134\5\u0158\u00ad\2\u1134\u1138"+
		"\7\u0200\2\2\u1135\u1137\5\u015a\u00ae\2\u1136\u1135\3\2\2\2\u1137\u113a"+
		"\3\2\2\2\u1138\u1136\3\2\2\2\u1138\u1139\3\2\2\2\u1139\u113f\3\2\2\2\u113a"+
		"\u1138\3\2\2\2\u113b\u113c\5\u024e\u0128\2\u113c\u113d\7\u0200\2\2\u113d"+
		"\u113f\3\2\2\2\u113e\u1133\3\2\2\2\u113e\u113b\3\2\2\2\u113f\u1141\3\2"+
		"\2\2\u1140\u112c\3\2\2\2\u1140\u112f\3\2\2\2\u1140\u1130\3\2\2\2\u1140"+
		"\u1131\3\2\2\2\u1140\u1132\3\2\2\2\u1141\u024d\3\2\2\2\u1142\u1144\5\u020c"+
		"\u0107\2\u1143\u1145\5\u0250\u0129\2\u1144\u1143\3\2\2\2\u1144\u1145\3"+
		"\2\2\2\u1145\u024f\3\2\2\2\u1146\u1147\7\u0205\2\2\u1147\u114c\5\u020c"+
		"\u0107\2\u1148\u1149\7\u0205\2\2\u1149\u114b\5\u020c\u0107\2\u114a\u1148"+
		"\3\2\2\2\u114b\u114e\3\2\2\2\u114c\u114a\3\2\2\2\u114c\u114d\3\2\2\2\u114d"+
		"\u0251\3\2\2\2\u114e\u114c\3\2\2\2\u114f\u1158\t\62\2\2\u1150\u1151\7"+
		"\u01ff\2\2\u1151\u1152\5\u0158\u00ad\2\u1152\u1153\7\u0200\2\2\u1153\u1159"+
		"\3\2\2\2\u1154\u1155\7\u01ff\2\2\u1155\u1156\5\u020c\u0107\2\u1156\u1157"+
		"\7\u0200\2\2\u1157\u1159\3\2\2\2\u1158\u1150\3\2\2\2\u1158\u1154\3\2\2"+
		"\2\u1159\u0253\3\2\2\2\u115a\u115b\7\u01ea\2\2\u115b\u115c\7\u01ff\2\2"+
		"\u115c\u115d\5\u020c\u0107\2\u115d\u115e\7\u0205\2\2\u115e\u1161\5\u020c"+
		"\u0107\2\u115f\u1160\7\u0205\2\2\u1160\u1162\5\u020c\u0107\2\u1161\u115f"+
		"\3\2\2\2\u1161\u1162\3\2\2\2\u1162\u1163\3\2\2\2\u1163\u1164\7\u0200\2"+
		"\2\u1164\u11a8\3\2\2\2\u1165\u1166\7\u01eb\2\2\u1166\u116a\7\u01ff\2\2"+
		"\u1167\u116b\5\u0306\u0184\2\u1168\u116b\5\u0256\u012c\2\u1169\u116b\5"+
		"\u020c\u0107\2\u116a\u1167\3\2\2\2\u116a\u1168\3\2\2\2\u116a\u1169\3\2"+
		"\2\2\u116b\u116e\3\2\2\2\u116c\u116d\7\u0205\2\2\u116d\u116f\5\u030e\u0188"+
		"\2\u116e\u116c\3\2\2\2\u116e\u116f\3\2\2\2\u116f\u1172\3\2\2\2\u1170\u1171"+
		"\7\u0205\2\2\u1171\u1173\5\u030e\u0188\2\u1172\u1170\3\2\2\2\u1172\u1173"+
		"\3\2\2\2\u1173\u1174\3\2\2\2\u1174\u1175\7\u0200\2\2\u1175\u11a8\3\2\2"+
		"\2\u1176\u1177\7\u01de\2\2\u1177\u1178\7\u01ff\2\2\u1178\u117d\5\u020c"+
		"\u0107\2\u1179\u117a\7\u0205\2\2\u117a\u117c\5\u020c\u0107\2\u117b\u1179"+
		"\3\2\2\2\u117c\u117f\3\2\2\2\u117d\u117b\3\2\2\2\u117d\u117e\3\2\2\2\u117e"+
		"\u1180\3\2\2\2\u117f\u117d\3\2\2\2\u1180\u1181\7\u0200\2\2\u1181\u11a8"+
		"\3\2\2\2\u1182\u1183\7\64\2\2\u1183\u1184\7\u01ff\2\2\u1184\u1185\5\u0228"+
		"\u0115\2\u1185\u1186\7\u01a5\2\2\u1186\u1187\7\u00ef\2\2\u1187\u1188\7"+
		"\u0200\2\2\u1188\u11a8\3\2\2\2\u1189\u118a\7\u01e5\2\2\u118a\u118b\7\u01ff"+
		"\2\2\u118b\u118c\5\u020c\u0107\2\u118c\u118d\7\u0205\2\2\u118d\u118e\5"+
		"\u020c\u0107\2\u118e\u118f\7\u0200\2\2\u118f\u11a8\3\2\2\2\u1190\u1191"+
		"\7\u01ec\2\2\u1191\u1199\7\u01ff\2\2\u1192\u1194\t\63\2\2\u1193\u1192"+
		"\3\2\2\2\u1193\u1194\3\2\2\2\u1194\u1196\3\2\2\2\u1195\u1197\5\u030e\u0188"+
		"\2\u1196\u1195\3\2\2\2\u1196\u1197\3\2\2\2\u1197\u1198\3\2\2\2\u1198\u119a"+
		"\7\u009a\2\2\u1199\u1193\3\2\2\2\u1199\u119a\3\2\2\2\u119a\u119b\3\2\2"+
		"\2\u119b\u119c\5\u0228\u0115\2\u119c\u119d\7\u0200\2\2\u119d\u11a8\3\2"+
		"\2\2\u119e\u119f\7\u01f3\2\2\u119f\u11a0\7\u01ff\2\2\u11a0\u11a3\5\u020c"+
		"\u0107\2\u11a1\u11a2\7\u0205\2\2\u11a2\u11a4\5\u030e\u0188\2\u11a3\u11a1"+
		"\3\2\2\2\u11a3\u11a4\3\2\2\2\u11a4\u11a5\3\2\2\2\u11a5\u11a6\7\u0200\2"+
		"\2\u11a6\u11a8\3\2\2\2\u11a7\u115a\3\2\2\2\u11a7\u1165\3\2\2\2\u11a7\u1176"+
		"\3\2\2\2\u11a7\u1182\3\2\2\2\u11a7\u1189\3\2\2\2\u11a7\u1190\3\2\2\2\u11a7"+
		"\u119e\3\2\2\2\u11a8\u0255\3\2\2\2\u11a9\u11ad\5\u0254\u012b\2\u11aa\u11ad"+
		"\5\u0258\u012d\2\u11ab\u11ad\5\u025c\u012f\2\u11ac\u11a9\3\2\2\2\u11ac"+
		"\u11aa\3\2\2\2\u11ac\u11ab\3\2\2\2\u11ad\u0257\3\2\2\2\u11ae\u11b1\5\u025a"+
		"\u012e\2\u11af\u11b2\5\u0236\u011c\2\u11b0\u11b2\5\u023c\u011f\2\u11b1"+
		"\u11af\3\2\2\2\u11b1\u11b0\3\2\2\2\u11b1\u11b2\3\2\2\2\u11b2\u0259\3\2"+
		"\2\2\u11b3\u11b4\7\u01ed\2\2\u11b4\u11b6\7\u01ff\2\2\u11b5\u11b7\t\64"+
		"\2\2\u11b6\u11b5\3\2\2\2\u11b6\u11b7\3\2\2\2\u11b7\u11b8\3\2\2\2\u11b8"+
		"\u11b9\5\u020c\u0107\2\u11b9\u11ba\7\u0200\2\2\u11ba\u11fc\3\2\2\2\u11bb"+
		"\u11bc\7O\2\2\u11bc\u11c4\7\u01ff\2\2\u11bd\u11c5\7\u0202\2\2\u11be\u11c0"+
		"\t\37\2\2\u11bf\u11be\3\2\2\2\u11bf\u11c0\3\2\2\2\u11c0\u11c1\3\2\2\2"+
		"\u11c1\u11c3\5\u0228\u0115\2\u11c2\u11bf\3\2\2\2\u11c2\u11c3\3\2\2\2\u11c3"+
		"\u11c5\3\2\2\2\u11c4\u11bd\3\2\2\2\u11c4\u11c2\3\2\2\2\u11c5\u11c6\3\2"+
		"\2\2\u11c6\u11c8\7\u0200\2\2\u11c7\u11c9\5\u0264\u0133\2\u11c8\u11c7\3"+
		"\2\2\2\u11c8\u11c9\3\2\2\2\u11c9\u11fc\3\2\2\2\u11ca\u11cb\7\u01e8\2\2"+
		"\u11cb\u11cc\7\u01ff\2\2\u11cc\u11cf\5\u020c\u0107\2\u11cd\u11ce\7\u0205"+
		"\2\2\u11ce\u11d0\7\u01f9\2\2\u11cf\u11cd\3\2\2\2\u11cf\u11d0\3\2\2\2\u11d0"+
		"\u11d1\3\2\2\2\u11d1\u11d2\7\u0200\2\2\u11d2\u11fc\3\2\2\2\u11d3\u11d4"+
		"\7\u01db\2\2\u11d4\u11d6\7\u01ff\2\2\u11d5\u11d7\t\64\2\2\u11d6\u11d5"+
		"\3\2\2\2\u11d6\u11d7\3\2\2\2\u11d7\u11d8\3\2\2\2\u11d8\u11d9\5\u020c\u0107"+
		"\2\u11d9\u11da\7\u0200\2\2\u11da\u11fc\3\2\2\2\u11db\u11dc\7\u01e1\2\2"+
		"\u11dc\u11de\7\u01ff\2\2\u11dd\u11df\t\64\2\2\u11de\u11dd\3\2\2\2\u11de"+
		"\u11df\3\2\2\2\u11df\u11e0\3\2\2\2\u11e0\u11e1\5\u020c\u0107\2\u11e1\u11e2"+
		"\7\u0200\2\2\u11e2\u11fc\3\2\2\2\u11e3\u11e4\7\u01f1\2\2\u11e4\u11e5\7"+
		"\u01ff\2\2\u11e5\u11ea\5\u020c\u0107\2\u11e6\u11e7\7\u0205\2\2\u11e7\u11e9"+
		"\5\u020c\u0107\2\u11e8\u11e6\3\2\2\2\u11e9\u11ec\3\2\2\2\u11ea\u11e8\3"+
		"\2\2\2\u11ea\u11eb\3\2\2\2\u11eb\u11ed\3\2\2\2\u11ec\u11ea\3\2\2\2\u11ed"+
		"\u11ee\7\u0200\2\2\u11ee\u11fc\3\2\2\2\u11ef\u11f0\7\u01f2\2\2\u11f0\u11f1"+
		"\7\u01ff\2\2\u11f1\u11f6\5\u020c\u0107\2\u11f2\u11f3\7\u0205\2\2\u11f3"+
		"\u11f5\5\u020c\u0107\2\u11f4\u11f2\3\2\2\2\u11f5\u11f8\3\2\2\2\u11f6\u11f4"+
		"\3\2\2\2\u11f6\u11f7\3\2\2\2\u11f7\u11f9\3\2\2\2\u11f8\u11f6\3\2\2\2\u11f9"+
		"\u11fa\7\u0200\2\2\u11fa\u11fc\3\2\2\2\u11fb\u11b3\3\2\2\2\u11fb\u11bb"+
		"\3\2\2\2\u11fb\u11ca\3\2\2\2\u11fb\u11d3\3\2\2\2\u11fb\u11db\3\2\2\2\u11fb"+
		"\u11e3\3\2\2\2\u11fb\u11ef\3\2\2\2\u11fc\u025b\3\2\2\2\u11fd\u11fe\5\u025e"+
		"\u0130\2\u11fe\u1200\5\u02f0\u0179\2\u11ff\u1201\5\u0264\u0133\2\u1200"+
		"\u11ff\3\2\2\2\u1200\u1201\3\2\2\2\u1201\u1340\3\2\2\2\u1202\u1203\5\u031e"+
		"\u0190\2\u1203\u1205\5\u02f2\u017a\2\u1204\u1206\5\u026c\u0137\2\u1205"+
		"\u1204\3\2\2\2\u1205\u1206\3\2\2\2\u1206\u1340\3\2\2\2\u1207\u1208\7O"+
		"\2\2\u1208\u120e\7\u01ff\2\2\u1209\u120f\7\u0202\2\2\u120a\u120c\t\37"+
		"\2\2\u120b\u120a\3\2\2\2\u120b\u120c\3\2\2\2\u120c\u120d\3\2\2\2\u120d"+
		"\u120f\5\u0228\u0115\2\u120e\u1209\3\2\2\2\u120e\u120b\3\2\2\2\u120f\u1210"+
		"\3\2\2\2\u1210\u1212\7\u0200\2\2\u1211\u1213\5\u0264\u0133\2\u1212\u1211"+
		"\3\2\2\2\u1212\u1213\3\2\2\2\u1213\u1340\3\2\2\2\u1214\u1215\t\65\2\2"+
		"\u1215\u121c\7\u01ff\2\2\u1216\u1217\7\u00e8\2\2\u1217\u1218\7\u01ff\2"+
		"\2\u1218\u1219\5\u0158\u00ad\2\u1219\u121a\7\u0200\2\2\u121a\u121d\3\2"+
		"\2\2\u121b\u121d\5\u0228\u0115\2\u121c\u1216\3\2\2\2\u121c\u121b\3\2\2"+
		"\2\u121d\u121e\3\2\2\2\u121e\u121f\7\16\2\2\u121f\u1220\5\u02f8\u017d"+
		"\2\u1220\u1221\7\u0200\2\2\u1221\u1340\3\2\2\2\u1222\u1223\78\2\2\u1223"+
		"\u1224\7\u01ff\2\2\u1224\u122a\5\u0306\u0184\2\u1225\u1228\7\u0205\2\2"+
		"\u1226\u1229\5\u030a\u0186\2\u1227\u1229\5\u030e\u0188\2\u1228\u1226\3"+
		"\2\2\2\u1228";
	private static final String _serializedATNSegment2 =
		"\u1227\3\2\2\2\u1229\u122b\3\2\2\2\u122a\u1225\3\2\2\2\u122a\u122b\3\2"+
		"\2\2\u122b\u122c\3\2\2\2\u122c\u122d\7\u0200\2\2\u122d\u1340\3\2\2\2\u122e"+
		"\u122f\79\2\2\u122f\u1231\7\u01ff\2\2\u1230\u1232\t\66\2\2\u1231\u1230"+
		"\3\2\2\2\u1231\u1232\3\2\2\2\u1232\u1233\3\2\2\2\u1233\u1235\5\u0228\u0115"+
		"\2\u1234\u1236\5\u0270\u0139\2\u1235\u1234\3\2\2\2\u1235\u1236\3\2\2\2"+
		"\u1236\u1237\3\2\2\2\u1237\u1238\7\u0200\2\2\u1238\u1340\3\2\2\2\u1239"+
		"\u123a\5\u0260\u0131\2\u123a\u123c\5\u02ee\u0178\2\u123b\u123d\5\u0272"+
		"\u013a\2\u123c\u123b\3\2\2\2\u123d\u123e\3\2\2\2\u123e\u123c\3\2\2\2\u123e"+
		"\u123f\3\2\2\2\u123f\u1340\3\2\2\2\u1240\u1241\5\u02da\u016e\2\u1241\u1242"+
		"\t\67\2\2\u1242\u1340\3\2\2\2\u1243\u1244\7c\2\2\u1244\u1245\7\u01ff\2"+
		"\2\u1245\u1247\5\u0228\u0115\2\u1246\u1248\t8\2\2\u1247\u1246\3\2\2\2"+
		"\u1247\u1248\3\2\2\2\u1248\u1249\3\2\2\2\u1249\u124a\7\u0200\2\2\u124a"+
		"\u1340\3\2\2\2\u124b\u124c\7\u008c\2\2\u124c\u124d\7\u01ff\2\2\u124d\u124e"+
		"\5\u031e\u0190\2\u124e\u124f\7\u009a\2\2\u124f\u1250\5\u0228\u0115\2\u1250"+
		"\u1251\7\u0200\2\2\u1251\u1340\3\2\2\2\u1252\u1253\t9\2\2\u1253\u1255"+
		"\5\u02f0\u0179\2\u1254\u1256\5\u02f4\u017b\2\u1255\u1254\3\2\2\2\u1255"+
		"\u1256\3\2\2\2\u1256\u1257\3\2\2\2\u1257\u1258\5\u0264\u0133\2\u1258\u1340"+
		"\3\2\2\2\u1259\u125a\5\u0262\u0132\2\u125a\u125b\7\u01ff\2\2\u125b\u1260"+
		"\5\u020c\u0107\2\u125c\u125d\7\u0205\2\2\u125d\u125f\5\u020c\u0107\2\u125e"+
		"\u125c\3\2\2\2\u125f\u1262\3\2\2\2\u1260\u125e\3\2\2\2\u1260\u1261\3\2"+
		"\2\2\u1261\u1264\3\2\2\2\u1262\u1260\3\2\2\2\u1263\u1265\5\u0274\u013b"+
		"\2\u1264\u1263\3\2\2\2\u1264\u1265\3\2\2\2\u1265\u1267\3\2\2\2\u1266\u1268"+
		"\5\u026c\u0137\2\u1267\u1266\3\2\2\2\u1267\u1268\3\2\2\2\u1268\u1269\3"+
		"\2\2\2\u1269\u126a\7\u0200\2\2\u126a\u1340\3\2\2\2\u126b\u126c\7\u0193"+
		"\2\2\u126c\u126d\7\u01ff\2\2\u126d\u1270\5\u020c\u0107\2\u126e\u126f\7"+
		"\u01a5\2\2\u126f\u1271\t:\2\2\u1270\u126e\3\2\2\2\u1270\u1271\3\2\2\2"+
		"\u1271\u1276\3\2\2\2\u1272\u1273\7\u0205\2\2\u1273\u1275\5\u020c\u0107"+
		"\2\u1274\u1272\3\2\2\2\u1275\u1278\3\2\2\2\u1276\u1274\3\2\2\2\u1276\u1277"+
		"\3\2\2\2\u1277\u1279\3\2\2\2\u1278\u1276\3\2\2\2\u1279\u127a\7\u0200\2"+
		"\2\u127a\u1340\3\2\2\2\u127b\u127c\7\u0194\2\2\u127c\u127d\7\u01ff\2\2"+
		"\u127d\u127e\5\u020c\u0107\2\u127e\u1280\7\16\2\2\u127f\u1281\7\u0139"+
		"\2\2\u1280\u127f\3\2\2\2\u1280\u1281\3\2\2\2\u1281\u1282\3\2\2\2\u1282"+
		"\u1283\5\u02f8\u017d\2\u1283\u1284\7\u0200\2\2\u1284\u1340\3\2\2\2\u1285"+
		"\u1286\7\u01ec\2\2\u1286\u128e\7\u01ff\2\2\u1287\u1289\t\63\2\2\u1288"+
		"\u1287\3\2\2\2\u1288\u1289\3\2\2\2\u1289\u128b\3\2\2\2\u128a\u128c\5\u030e"+
		"\u0188\2\u128b\u128a\3\2\2\2\u128b\u128c\3\2\2\2\u128c\u128d\3\2\2\2\u128d"+
		"\u128f\7\u009a\2\2\u128e\u1288\3\2\2\2\u128e\u128f\3\2\2\2\u128f\u1290"+
		"\3\2\2\2\u1290\u1291\5\u0228\u0115\2\u1291\u1292\7\u0200\2\2\u1292\u1340"+
		"\3\2\2\2\u1293\u1294\7\u01bc\2\2\u1294\u1295\7\u01ff\2\2\u1295\u1297\5"+
		"\u020c\u0107\2\u1296\u1298\5\u01ba\u00de\2\u1297\u1296\3\2\2\2\u1297\u1298"+
		"\3\2\2\2\u1298\u1299\3\2\2\2\u1299\u129c\7\u0200\2\2\u129a\u129b\7\u01f8"+
		"\2\2\u129b\u129d\5\u0304\u0183\2\u129c\u129a\3\2\2\2\u129c\u129d\3\2\2"+
		"\2\u129d\u1340\3\2\2\2\u129e\u129f\t;\2\2\u129f\u12a0\7\u01ff\2\2\u12a0"+
		"\u12a5\5\u0280\u0141\2\u12a1\u12a2\7\u0205\2\2\u12a2\u12a4\5\u0280\u0141"+
		"\2\u12a3\u12a1\3\2\2\2\u12a4\u12a7\3\2\2\2\u12a5\u12a3\3\2\2\2\u12a5\u12a6"+
		"\3\2\2\2\u12a6\u12a8\3\2\2\2\u12a7\u12a5\3\2\2\2\u12a8\u12ab\7\u0200\2"+
		"\2\u12a9\u12aa\7\u01f8\2\2\u12aa\u12ac\5\u0304\u0183\2\u12ab\u12a9\3\2"+
		"\2\2\u12ab\u12ac\3\2\2\2\u12ac\u1340\3\2\2\2\u12ad\u12ae\7\u01c0\2\2\u12ae"+
		"\u12b0\7\u01ff\2\2\u12af\u12b1\t<\2\2\u12b0\u12af\3\2\2\2\u12b0\u12b1"+
		"\3\2\2\2\u12b1\u12b3\3\2\2\2\u12b2\u12b4\t=\2\2\u12b3\u12b2\3\2\2\2\u12b3"+
		"\u12b4\3\2\2\2\u12b4\u12b5\3\2\2\2\u12b5\u12b8\5\u020c\u0107\2\u12b6\u12b7"+
		"\7\u0205\2\2\u12b7\u12b9\5\u0278\u013d\2\u12b8\u12b6\3\2\2\2\u12b8\u12b9"+
		"\3\2\2\2\u12b9\u12c1\3\2\2\2\u12ba\u12bb\7\u0205\2\2\u12bb\u12bd\5\u020c"+
		"\u0107\2\u12bc\u12be\5\u029c\u014f\2\u12bd\u12bc\3\2\2\2\u12bd\u12be\3"+
		"\2\2\2\u12be\u12c0\3\2\2\2\u12bf\u12ba\3\2\2\2\u12c0\u12c3\3\2\2\2\u12c1"+
		"\u12bf\3\2\2\2\u12c1\u12c2\3\2\2\2\u12c2\u12c4\3\2\2\2\u12c3\u12c1\3\2"+
		"\2\2\u12c4\u12c7\7\u0200\2\2\u12c5\u12c6\7\u01f8\2\2\u12c6\u12c8\5\u0304"+
		"\u0183\2\u12c7\u12c5\3\2\2\2\u12c7\u12c8\3\2\2\2\u12c8\u1340\3\2\2\2\u12c9"+
		"\u12ca\7\u01c1\2\2\u12ca\u12cb\7\u01ff\2\2\u12cb\u12cd\5\u020c\u0107\2"+
		"\u12cc\u12ce\5\u0276\u013c\2\u12cd\u12cc\3\2\2\2\u12cd\u12ce\3\2\2\2\u12ce"+
		"\u12cf\3\2\2\2\u12cf\u12d0\7\u0200\2\2\u12d0\u1340\3\2\2\2\u12d1\u12d2"+
		"\7\u01c4\2\2\u12d2\u12d3\7\u01ff\2\2\u12d3\u12d4\t>\2\2\u12d4\u12d6\5"+
		"\u0228\u0115\2\u12d5\u12d7\7\u01b2\2\2\u12d6\u12d5\3\2\2\2\u12d6\u12d7"+
		"\3\2\2\2\u12d7\u12d8\3\2\2\2\u12d8\u12db\7\u0200\2\2\u12d9\u12da\7\u01f8"+
		"\2\2\u12da\u12dc\5\u0304\u0183\2\u12db\u12d9\3\2\2\2\u12db\u12dc\3\2\2"+
		"\2\u12dc\u1340\3\2\2\2\u12dd\u12de\7\u01c5\2\2\u12de\u12e3\7\u01ff\2\2"+
		"\u12df\u12e0\7\u00e9\2\2\u12e0\u12e4\5\u0310\u0189\2\u12e1\u12e2\7\u0081"+
		"\2\2\u12e2\u12e4\5\u0228\u0115\2\u12e3\u12df\3\2\2\2\u12e3\u12e1\3\2\2"+
		"\2\u12e4\u12e7\3\2\2\2\u12e5\u12e6\7\u0205\2\2\u12e6\u12e8\5\u0228\u0115"+
		"\2\u12e7\u12e5\3\2\2\2\u12e7\u12e8\3\2\2\2\u12e8\u12e9\3\2\2\2\u12e9\u12ec"+
		"\7\u0200\2\2\u12ea\u12eb\7\u01f8\2\2\u12eb\u12ed\5\u0304\u0183\2\u12ec"+
		"\u12ea\3\2\2\2\u12ec\u12ed\3\2\2\2\u12ed\u1340\3\2\2\2\u12ee\u12ef\7\u01c6"+
		"\2\2\u12ef\u12f0\7\u01ff\2\2\u12f0\u12f2\5\u0228\u0115\2\u12f1\u12f3\5"+
		"\u0276\u013c\2\u12f2\u12f1\3\2\2\2\u12f2\u12f3\3\2\2\2\u12f3\u12f4\3\2"+
		"\2\2\u12f4\u12f5\7\u0146\2\2\u12f5\u12f9\7H\2\2\u12f6\u12f7\7\u0100\2"+
		"\2\u12f7\u12f8\7\u010a\2\2\u12f8\u12fa\7y\2\2\u12f9\u12f6\3\2\2\2\u12f9"+
		"\u12fa\3\2\2\2\u12fa\u12fb\3\2\2\2\u12fb\u12fe\7\u0200\2\2\u12fc\u12fd"+
		"\7\u01f8\2\2\u12fd\u12ff\5\u0304\u0183\2\u12fe\u12fc\3\2\2\2\u12fe\u12ff"+
		"\3\2\2\2\u12ff\u1340\3\2\2\2\u1300\u1301\7\u01c7\2\2\u1301\u1302\7\u01ff"+
		"\2\2\u1302\u1305\5\u0228\u0115\2\u1303\u1304\7\u0205\2\2\u1304\u1306\5"+
		"\u0282\u0142\2\u1305\u1303\3\2\2\2\u1305\u1306\3\2\2\2\u1306\u1309\3\2"+
		"\2\2\u1307\u1308\7\u0205\2\2\u1308\u130a\5\u0284\u0143\2\u1309\u1307\3"+
		"\2\2\2\u1309\u130a\3\2\2\2\u130a\u130b\3\2\2\2\u130b\u130e\7\u0200\2\2"+
		"\u130c\u130d\7\u01f8\2\2\u130d\u130f\5\u0304\u0183\2\u130e\u130c\3\2\2"+
		"\2\u130e\u130f\3\2\2\2\u130f\u1340\3\2\2\2\u1310\u1311\7\u01c8\2\2\u1311"+
		"\u1312\7\u01ff\2\2\u1312\u1313\t>\2\2\u1313\u1316\5\u0228\u0115\2\u1314"+
		"\u1315\7\16\2\2\u1315\u1317\5\u02f8\u017d\2\u1316\u1314\3\2\2\2\u1316"+
		"\u1317\3\2\2\2\u1317\u1319\3\2\2\2\u1318\u131a\5\u0286\u0144\2\u1319\u1318"+
		"\3\2\2\2\u1319\u131a\3\2\2\2\u131a\u131c\3\2\2\2\u131b\u131d\5\u0288\u0145"+
		"\2\u131c\u131b\3\2\2\2\u131c\u131d\3\2\2\2\u131d\u131f\3\2\2\2\u131e\u1320"+
		"\5\u028a\u0146\2\u131f\u131e\3\2\2\2\u131f\u1320\3\2\2\2\u1320\u1323\3"+
		"\2\2\2\u1321\u1322\t?\2\2\u1322\u1324\7f\2\2\u1323\u1321\3\2\2\2\u1323"+
		"\u1324\3\2\2\2\u1324\u1325\3\2\2\2\u1325\u1328\7\u0200\2\2\u1326\u1327"+
		"\7\u01f8\2\2\u1327\u1329\5\u0304\u0183\2\u1328\u1326\3\2\2\2\u1328\u1329"+
		"\3\2\2\2\u1329\u1340\3\2\2\2\u132a\u132b\7\u01c9\2\2\u132b\u132d\7\u01ff"+
		"\2\2\u132c\u132e\5\u027a\u013e\2\u132d\u132c\3\2\2\2\u132d\u132e\3\2\2"+
		"\2\u132e\u132f\3\2\2\2\u132f\u1331\5\u0228\u0115\2\u1330\u1332\5\u0276"+
		"\u013c\2\u1331\u1330\3\2\2\2\u1331\u1332\3\2\2\2\u1332\u1338\3\2\2\2\u1333"+
		"\u1334\7;\2\2\u1334\u1335\5\u027c\u013f\2\u1335\u1336\7\u0205\2\2\u1336"+
		"\u1337\5\u027c\u013f\2\u1337\u1339\3\2\2\2\u1338\u1333\3\2\2\2\u1338\u1339"+
		"\3\2\2\2\u1339\u133a\3\2\2\2\u133a\u133d\7\u0200\2\2\u133b\u133c\7\u01f8"+
		"\2\2\u133c\u133e\5\u0304\u0183\2\u133d\u133b\3\2\2\2\u133d\u133e\3\2\2"+
		"\2\u133e\u1340\3\2\2\2\u133f\u11fd\3\2\2\2\u133f\u1202\3\2\2\2\u133f\u1207"+
		"\3\2\2\2\u133f\u1214\3\2\2\2\u133f\u1222\3\2\2\2\u133f\u122e\3\2\2\2\u133f"+
		"\u1239\3\2\2\2\u133f\u1240\3\2\2\2\u133f\u1243\3\2\2\2\u133f\u124b\3\2"+
		"\2\2\u133f\u1252\3\2\2\2\u133f\u1259\3\2\2\2\u133f\u126b\3\2\2\2\u133f"+
		"\u127b\3\2\2\2\u133f\u1285\3\2\2\2\u133f\u1293\3\2\2\2\u133f\u129e\3\2"+
		"\2\2\u133f\u12ad\3\2\2\2\u133f\u12c9\3\2\2\2\u133f\u12d1\3\2\2\2\u133f"+
		"\u12dd\3\2\2\2\u133f\u12ee\3\2\2\2\u133f\u1300\3\2\2\2\u133f\u1310\3\2"+
		"\2\2\u133f\u132a\3\2\2\2\u1340\u025d\3\2\2\2\u1341\u1342\t@\2\2\u1342"+
		"\u025f\3\2\2\2\u1343\u1344\tA\2\2\u1344\u0261\3\2\2\2\u1345\u1346\tB\2"+
		"\2\u1346\u0263\3\2\2\2\u1347\u1348\7\u0115\2\2\u1348\u134a\7\u01ff\2\2"+
		"\u1349\u134b\5\u0176\u00bc\2\u134a\u1349\3\2\2\2\u134a\u134b\3\2\2\2\u134b"+
		"\u1350\3\2\2\2\u134c\u134e\5\u01ba\u00de\2\u134d\u134f\5\u0266\u0134\2"+
		"\u134e\u134d\3\2\2\2\u134e\u134f\3\2\2\2\u134f\u1351\3\2\2\2\u1350\u134c"+
		"\3\2\2\2\u1350\u1351\3\2\2\2\u1351\u1352\3\2\2\2\u1352\u1353\7\u0200\2"+
		"\2\u1353\u0265\3\2\2\2\u1354\u135b\5\u0268\u0135\2\u1355\u1356\7\33\2"+
		"\2\u1356\u1357\5\u026a\u0136\2\u1357\u1358\7\13\2\2\u1358\u1359\5\u026a"+
		"\u0136\2\u1359\u135c\3\2\2\2\u135a\u135c\5\u026a\u0136\2\u135b\u1355\3"+
		"\2\2\2\u135b\u135a\3\2\2\2\u135c\u0267\3\2\2\2\u135d\u135e\tC\2\2\u135e"+
		"\u0269\3\2\2\2\u135f\u1360\7\u0199\2\2\u1360\u1367\7\u012d\2\2\u1361\u1362"+
		"\7S\2\2\u1362\u1367\7\u014d\2\2\u1363\u1364\5\u0228\u0115\2\u1364\u1365"+
		"\tD\2\2\u1365\u1367\3\2\2\2\u1366\u135f\3\2\2\2\u1366\u1361\3\2\2\2\u1366"+
		"\u1363\3\2\2\2\u1367\u026b\3\2\2\2\u1368\u1372\7\u01a5\2\2\u1369\u1373"+
		"\7\u0202\2\2\u136a\u136f\5\u026e\u0138\2\u136b\u136c\7\u0205\2\2\u136c"+
		"\u136e\5\u026e\u0138\2\u136d\u136b\3\2\2\2\u136e\u1371\3\2\2\2\u136f\u136d"+
		"\3\2\2\2\u136f\u1370\3\2\2\2\u1370\u1373\3\2\2\2\u1371\u136f\3\2\2\2\u1372"+
		"\u1369\3\2\2\2\u1372\u136a\3\2\2\2\u1373\u026d\3\2\2\2\u1374\u1376\7\u00a8"+
		"\2\2\u1375\u1377\7\u0113\2\2\u1376\u1375\3\2\2\2\u1376\u1377\3\2\2\2\u1377"+
		"\u137a\3\2\2\2\u1378\u137a\7\u0113\2\2\u1379\u1374\3\2\2\2\u1379\u1378"+
		"\3\2\2\2\u1379\u137a\3\2\2\2\u137a\u137b\3\2\2\2\u137b\u137d\5\u0164\u00b3"+
		"\2\u137c\u137e\5\u029c\u014f\2\u137d\u137c\3\2\2\2\u137d\u137e\3\2\2\2"+
		"\u137e\u026f\3\2\2\2\u137f\u1380\7\u0110\2\2\u1380\u1381\7\'\2\2\u1381"+
		"\u1382\5\u0228\u0115\2\u1382\u0271\3\2\2\2\u1383\u1384\7\u01b8\2\2\u1384"+
		"\u1385\7\u009f\2\2\u1385\u1386\7\u01ff\2\2\u1386\u1387\5\u01ba\u00de\2"+
		"\u1387\u1388\7\u0200\2\2\u1388\u138b\3\2\2\2\u1389\u138b\5\u0264\u0133"+
		"\2\u138a\u1383\3\2\2\2\u138a\u1389\3\2\2\2\u138b\u0273\3\2\2\2\u138c\u139e"+
		"\7N\2\2\u138d\u138f\7\u00e5\2\2\u138e\u1390\7\25\2\2\u138f\u138e\3\2\2"+
		"\2\u138f\u1390\3\2\2\2\u1390\u139f\3\2\2\2\u1391\u1392\7\u01ff\2\2\u1392"+
		"\u1397\5\u02aa\u0156\2\u1393\u1394\7\u0205\2\2\u1394\u1396\5\u02aa\u0156"+
		"\2\u1395\u1393\3\2\2\2\u1396\u1399\3\2\2\2\u1397\u1395\3\2\2\2\u1397\u1398"+
		"\3\2\2\2\u1398\u139a\3\2\2\2\u1399\u1397\3\2\2\2\u139a\u139b\7\u0200\2"+
		"\2\u139b\u139c\7\u01a8\2\2\u139c\u139d\5\u0208\u0105\2\u139d\u139f\3\2"+
		"\2\2\u139e\u138d\3\2\2\2\u139e\u1391\3\2\2\2\u139f\u0275\3\2\2\2\u13a0"+
		"\u13a3\7\u011c\2\2\u13a1\u13a2\7\'\2\2\u13a2\u13a4\7\u01a7\2\2\u13a3\u13a1"+
		"\3\2\2\2\u13a3\u13a4\3\2\2\2\u13a4\u13a5\3\2\2\2\u13a5\u13a7\5\u020c\u0107"+
		"\2\u13a6\u13a8\5\u029c\u014f\2\u13a7\u13a6\3\2\2\2\u13a7\u13a8\3\2\2\2"+
		"\u13a8\u13a9\3\2\2\2\u13a9\u13aa\7\u0205\2\2\u13aa\u13ac\5\u020c\u0107"+
		"\2\u13ab\u13ad\5\u029c\u014f\2\u13ac\u13ab\3\2\2\2\u13ac\u13ad\3\2\2\2"+
		"\u13ad\u0277\3\2\2\2\u13ae\u13af\7\u01bd\2\2\u13af\u13b1\7\u01ff\2\2\u13b0"+
		"\u13b2\t<\2\2\u13b1\u13b0\3\2\2\2\u13b1\u13b2\3\2\2\2\u13b2\u13b4\3\2"+
		"\2\2\u13b3\u13b5\tE\2\2\u13b4\u13b3\3\2\2\2\u13b4\u13b5\3\2\2\2\u13b5"+
		"\u13b6\3\2\2\2\u13b6\u13bb\5\u0280\u0141\2\u13b7\u13b8\7\u0205\2\2\u13b8"+
		"\u13ba\5\u0280\u0141\2\u13b9\u13b7\3\2\2\2\u13ba\u13bd\3\2\2\2\u13bb\u13b9"+
		"\3\2\2\2\u13bb\u13bc\3\2\2\2\u13bc\u13be\3\2\2\2\u13bd\u13bb\3\2\2\2\u13be"+
		"\u13bf\7\u0200\2\2\u13bf\u0279\3\2\2\2\u13c0\u13c1\7\u01c3\2\2\u13c1\u13c5"+
		"\7\u01ff\2\2\u13c2\u13c3\5\u0228\u0115\2\u13c3\u13c4\5\u029c\u014f\2\u13c4"+
		"\u13c6\3\2\2\2\u13c5\u13c2\3\2\2\2\u13c5\u13c6\3\2\2\2\u13c6\u13cd\3\2"+
		"\2\2\u13c7\u13c8\7\u0205\2\2\u13c8\u13c9\5\u0228\u0115\2\u13c9\u13ca\5"+
		"\u029c\u014f\2\u13ca\u13cc\3\2\2\2\u13cb\u13c7\3\2\2\2\u13cc\u13cf\3\2"+
		"\2\2\u13cd\u13cb\3\2\2\2\u13cd\u13ce\3\2\2\2\u13ce\u13d1\3\2\2\2\u13cf"+
		"\u13cd\3\2\2\2\u13d0\u13d2\5\u027e\u0140\2\u13d1\u13d0\3\2\2\2\u13d1\u13d2"+
		"\3\2\2\2\u13d2\u13d3\3\2\2\2\u13d3\u13d4\7\u0200\2\2\u13d4\u027b\3\2\2"+
		"\2\u13d5\u13e0\5\u02a8\u0155\2\u13d6\u13d7\7\u0096\2\2\u13d7\u13e1\7\u0111"+
		"\2\2\u13d8\u13db\5\u02f8\u017d\2\u13d9\u13da\7\u011d\2\2\u13da\u13dc\5"+
		"\u0228\u0115\2\u13db\u13d9\3\2\2\2\u13db\u13dc\3\2\2\2\u13dc\u13de\3\2"+
		"\2\2\u13dd\u13df\5\u027e\u0140\2\u13de\u13dd\3\2\2\2\u13de\u13df\3\2\2"+
		"\2\u13df\u13e1\3\2\2\2\u13e0\u13d6\3\2\2\2\u13e0\u13d8\3\2\2\2\u13e1\u027d"+
		"\3\2\2\2\u13e2\u13e3\7e\2\2\u13e3\u13e4\5\u0228\u0115\2\u13e4\u027f\3"+
		"\2\2\2\u13e5\u13ec\5\u020c\u0107\2\u13e6\u13ea\7\16\2\2\u13e7\u13eb\5"+
		"\u0312\u018a\2\u13e8\u13e9\7\u0081\2\2\u13e9\u13eb\5\u0228\u0115\2\u13ea"+
		"\u13e7\3\2\2\2\u13ea\u13e8\3\2\2\2\u13eb\u13ed\3\2\2\2\u13ec\u13e6\3\2"+
		"\2\2\u13ec\u13ed\3\2\2\2\u13ed\u0281\3\2\2\2\u13ee\u13f2\7\u01ae\2\2\u13ef"+
		"\u13f0\7\u00f3\2\2\u13f0\u13f3\7\u01a7\2\2\u13f1\u13f3\5\u020c\u0107\2"+
		"\u13f2\u13ef\3\2\2\2\u13f2\u13f1\3\2\2\2\u13f3\u0283\3\2\2\2\u13f4\u13fa"+
		"\7\u0175\2\2\u13f5\u13fb\7\u01cb\2\2\u13f6\u13f8\7\u00f3\2\2\u13f7\u13f9"+
		"\7\u01a7\2\2\u13f8\u13f7\3\2\2\2\u13f8\u13f9\3\2\2\2\u13f9\u13fb\3\2\2"+
		"\2\u13fa\u13f5\3\2\2\2\u13fa\u13f6\3\2\2\2\u13fb\u0285\3\2\2\2\u13fc\u13fd"+
		"\7{\2\2\u13fd\u13fe\5\u0228\u0115\2\u13fe\u0287\3\2\2\2\u13ff\u1400\7"+
		"\u01ae\2\2\u1400\u1401\5\u0228\u0115\2\u1401\u0289\3\2\2\2\u1402\u1403"+
		"\7\u00f3\2\2\u1403\u140b\7\u00ac\2\2\u1404\u1408\7\u00ac\2\2\u1405\u1406"+
		"\7\u016d\2\2\u1406\u1407\7\u0216\2\2\u1407\u1409\5\u0228\u0115\2\u1408"+
		"\u1405\3\2\2\2\u1408\u1409\3\2\2\2\u1409\u140b\3\2\2\2\u140a\u1402\3\2"+
		"\2\2\u140a\u1404\3\2\2\2\u140b\u028b\3\2\2\2\u140c\u1414\7\u0206\2\2\u140d"+
		"\u1414\5\u028e\u0148\2\u140e\u1414\5\u0292\u014a\2\u140f\u1414\5\u0294"+
		"\u014b\2\u1410\u1414\5\u0290\u0149\2\u1411\u1414\5\u0296\u014c\2\u1412"+
		"\u1414\5\u0298\u014d\2\u1413\u140c\3\2\2\2\u1413\u140d\3\2\2\2\u1413\u140e"+
		"\3\2\2\2\u1413\u140f\3\2\2\2\u1413\u1410\3\2\2\2\u1413\u1411\3\2\2\2\u1413"+
		"\u1412\3\2\2\2\u1414\u1416\3\2\2\2\u1415\u1417\7\u020b\2\2\u1416\u1415"+
		"\3\2\2\2\u1416\u1417\3\2\2\2\u1417\u028d\3\2\2\2\u1418\u1419\7\u01b4\2"+
		"\2\u1419\u141f\tF\2\2\u141a\u141b\7\u0089\2\2\u141b\u141c\tG\2\2\u141c"+
		"\u1420\tH\2\2\u141d\u141e\7J\2\2\u141e\u1420\tI\2\2\u141f\u141a\3\2\2"+
		"\2\u141f\u141d\3\2\2\2\u1420\u028f\3\2\2\2\u1421\u1422\7\u0163\2\2\u1422"+
		"\u1428\5\u031e\u0190\2\u1423\u1429\7\u01fb\2\2\u1424\u1429\7\u010a\2\2"+
		"\u1425\u1429\7\u0107\2\2\u1426\u1429\5\u030a\u0186\2\u1427\u1429\5\u031e"+
		"\u0190\2\u1428\u1423\3\2\2\2\u1428\u1424\3\2\2\2\u1428\u1425\3\2\2\2\u1428"+
		"\u1426\3\2\2\2\u1428\u1427\3\2\2\2\u1429\u0291\3\2\2\2\u142a\u142b\7\u0089"+
		"\2\2\u142b\u0293\3\2\2\2\u142c\u142d\7\u021d\2\2\u142d\u0295\3\2\2\2\u142e"+
		"\u142f\7\u0167\2\2\u142f\u1433\7~\2\2\u1430\u1431\7\u0167\2\2\u1431\u1433"+
		"\7\177\2\2\u1432\u142e\3\2\2\2\u1432\u1430\3\2\2\2\u1433\u0297\3\2\2\2"+
		"\u1434\u1435\7\u021e\2\2\u1435\u0299\3\2\2\2\u1436\u1438\tJ\2\2\u1437"+
		"\u1439\7\u0096\2\2\u1438\u1437\3\2\2\2\u1438\u1439\3\2\2\2\u1439\u143a"+
		"\3\2\2\2\u143a\u143b\5\u0208\u0105\2\u143b\u029b\3\2\2\2\u143c\u143e\7"+
		"\16\2\2\u143d\u143c\3\2\2\2\u143d\u143e\3\2\2\2\u143e\u1441\3\2\2\2\u143f"+
		"\u1442\5\u0310\u0189\2\u1440\u1442\5\u02a0\u0151\2\u1441\u143f\3\2\2\2"+
		"\u1441\u1440\3\2\2\2\u1442\u1445\3\2\2\2\u1443\u1445\7\16\2\2\u1444\u143d"+
		"\3\2\2\2\u1444\u1443\3\2\2\2\u1445\u029d\3\2\2\2\u1446\u1449\5\u0310\u0189"+
		"\2\u1447\u1449\5\u02a0\u0151\2\u1448\u1446\3\2\2\2\u1448\u1447\3\2\2\2"+
		"\u1449\u029f\3\2\2\2\u144a\u144b\5\u030e\u0188\2\u144b\u02a1\3\2\2\2\u144c"+
		"\u144f\7\u01b5\2\2\u144d\u1450\5\u02a4\u0153\2\u144e\u1450\5\u020c\u0107"+
		"\2\u144f\u144d\3\2\2\2\u144f\u144e\3\2\2\2\u1450\u02a3\3\2\2\2\u1451\u1452"+
		"\7S\2\2\u1452\u1453\7\u0106\2\2\u1453\u1454\5\u02da\u016e\2\u1454\u02a5"+
		"\3\2\2\2\u1455\u1456\7\u00bc\2\2\u1456\u145b\5\u02d6\u016c\2\u1457\u1458"+
		"\7\u0205\2\2\u1458\u145a\5\u02d6\u016c\2\u1459\u1457\3\2\2\2\u145a\u145d"+
		"\3\2\2\2\u145b\u1459\3\2\2\2\u145b\u145c\3\2\2\2\u145c\u146a\3\2\2\2\u145d"+
		"\u145b\3\2\2\2\u145e\u145f\7&\2\2\u145f\u1460\79\2\2\u1460\u1461\7\u00bc"+
		"\2\2\u1461\u1466\5\u02d6\u016c\2\u1462\u1463\7\u0205\2\2\u1463\u1465\5"+
		"\u02d6\u016c\2\u1464\u1462\3\2\2\2\u1465\u1468\3\2\2\2\u1466\u1464\3\2"+
		"\2\2\u1466\u1467\3\2\2\2\u1467\u146a\3\2\2\2\u1468\u1466\3\2\2\2\u1469"+
		"\u1455\3\2\2\2\u1469\u145e\3\2\2\2\u146a\u02a7\3\2\2\2\u146b\u146e\5\u0310"+
		"\u0189\2\u146c\u146e\5\u030e\u0188\2\u146d\u146b\3\2\2\2\u146d\u146c\3"+
		"\2\2\2\u146e\u02a9\3\2\2\2\u146f\u1470\5\u0310\u0189\2\u1470\u02ab\3\2"+
		"\2\2\u1471\u1472\5\u0310\u0189\2\u1472\u02ad\3\2\2\2\u1473\u1474\5\u0310"+
		"\u0189\2\u1474\u02af\3\2\2\2\u1475\u1476\5\u0310\u0189\2\u1476\u02b1\3"+
		"\2\2\2\u1477\u1478\5\u0310\u0189\2\u1478\u02b3\3\2\2\2\u1479\u147a\5\u0310"+
		"\u0189\2\u147a\u02b5\3\2\2\2\u147b\u1480\5\u0310\u0189\2\u147c\u147d\7"+
		"\u01f8\2\2\u147d\u147f\5\u0312\u018a\2\u147e\u147c\3\2\2\2\u147f\u1482"+
		"\3\2\2\2\u1480\u147e\3\2\2\2\u1480\u1481\3\2\2\2\u1481\u1485\3\2\2\2\u1482"+
		"\u1480\3\2\2\2\u1483\u1484\7\u0207\2\2\u1484\u1486\5\u02e0\u0171\2\u1485"+
		"\u1483\3\2\2\2\u1485\u1486\3\2\2\2\u1486\u02b7\3\2\2\2\u1487\u1488\5\u0310"+
		"\u0189\2\u1488\u02b9\3\2\2\2\u1489\u148c\5\u0310\u0189\2\u148a\u148b\7"+
		"\u01f8\2\2\u148b\u148d\5\u0312\u018a\2\u148c\u148a\3\2\2\2\u148c\u148d"+
		"\3\2\2\2\u148d\u02bb\3\2\2\2\u148e\u148f\5\u0310\u0189\2\u148f\u02bd\3"+
		"\2\2\2\u1490\u1491\5\u0310\u0189\2\u1491\u02bf\3\2\2\2\u1492\u1493\5\u0310"+
		"\u0189\2\u1493\u02c1\3\2\2\2\u1494\u1499\5\u0310\u0189\2\u1495\u1496\7"+
		"\u01f8\2\2\u1496\u1498\5\u0312\u018a\2\u1497\u1495\3\2\2\2\u1498\u149b"+
		"\3\2\2\2\u1499\u1497\3\2\2\2\u1499\u149a\3\2\2\2\u149a\u02c3\3\2\2\2\u149b"+
		"\u1499\3\2\2\2\u149c\u149d\5\u0310\u0189\2\u149d\u02c5\3\2\2\2\u149e\u14a3"+
		"\5\u0310\u0189\2\u149f\u14a0\7\u01f8\2\2\u14a0\u14a2\5\u0312\u018a\2\u14a1"+
		"\u149f\3\2\2\2\u14a2\u14a5\3\2\2\2\u14a3\u14a1\3\2\2\2\u14a3\u14a4\3\2"+
		"\2\2\u14a4\u14a8\3\2\2\2\u14a5\u14a3\3\2\2\2\u14a6\u14a7\7\u0207\2\2\u14a7"+
		"\u14a9\5\u02e0\u0171\2\u14a8\u14a6\3\2\2\2\u14a8\u14a9\3\2\2\2\u14a9\u02c7"+
		"\3\2\2\2\u14aa\u14ab\5\u0312\u018a\2\u14ab\u02c9\3\2\2\2\u14ac\u14b1\5"+
		"\u0312\u018a\2\u14ad\u14ae\7\u01f8\2\2\u14ae\u14b0\5\u0312\u018a\2\u14af"+
		"\u14ad\3\2\2\2\u14b0\u14b3\3\2\2\2\u14b1\u14af\3\2\2\2\u14b1\u14b2\3\2"+
		"\2\2\u14b2\u02cb\3\2\2\2\u14b3\u14b1\3\2\2\2\u14b4\u14b9\5\u0312\u018a"+
		"\2\u14b5\u14b6\7\u01f8\2\2\u14b6\u14b8\5\u0312\u018a\2\u14b7\u14b5\3\2"+
		"\2\2\u14b8\u14bb\3\2\2\2\u14b9\u14b7\3\2\2\2\u14b9\u14ba\3\2\2\2\u14ba"+
		"\u02cd\3\2\2\2\u14bb\u14b9\3\2\2\2\u14bc\u14c1\5\u0310\u0189\2\u14bd\u14be"+
		"\7\u01f8\2\2\u14be\u14c0\5\u0312\u018a\2\u14bf\u14bd\3\2\2\2\u14c0\u14c3"+
		"\3\2\2\2\u14c1\u14bf\3\2\2\2\u14c1\u14c2\3\2\2\2\u14c2\u02cf\3\2\2\2\u14c3"+
		"\u14c1\3\2\2\2\u14c4\u14c7\5\u0310\u0189\2\u14c5\u14c6\7\u01f8\2\2\u14c6"+
		"\u14c8\5\u0312\u018a\2\u14c7\u14c5\3\2\2\2\u14c7\u14c8\3\2\2\2\u14c8\u02d1"+
		"\3\2\2\2\u14c9\u14cc\5\u0310\u0189\2\u14ca\u14cb\7\u01f8\2\2\u14cb\u14cd"+
		"\5\u0312\u018a\2\u14cc\u14ca\3\2\2\2\u14cc\u14cd\3\2\2\2\u14cd\u02d3\3"+
		"\2\2\2\u14ce\u14d1\5\u0310\u0189\2\u14cf\u14d0\7\u01f8\2\2\u14d0\u14d2"+
		"\5\u0312\u018a\2\u14d1\u14cf\3\2\2\2\u14d1\u14d2\3\2\2\2\u14d2\u02d5\3"+
		"\2\2\2\u14d3\u14d4\7\u0219\2\2\u14d4\u14d6\5\u02e6\u0174\2\u14d5\u14d3"+
		"\3\2\2\2\u14d5\u14d6\3\2\2\2\u14d6\u14d7\3\2\2\2\u14d7\u14da\5\u0312\u018a"+
		"\2\u14d8\u14d9\7\u01f8\2\2\u14d9\u14db\5\u0312\u018a\2\u14da\u14d8\3\2"+
		"\2\2\u14da\u14db\3\2\2\2\u14db\u14de\3\2\2\2\u14dc\u14de\5\u0300\u0181"+
		"\2\u14dd\u14d5\3\2\2\2\u14dd\u14dc\3\2\2\2\u14de\u02d7\3\2\2\2\u14df\u14e0"+
		"\5\u0310\u0189\2\u14e0\u02d9\3\2\2\2\u14e1\u14e4\5\u0310\u0189\2\u14e2"+
		"\u14e4\5\u0300\u0181\2\u14e3\u14e1\3\2\2\2\u14e3\u14e2\3\2\2\2\u14e4\u02db"+
		"\3\2\2\2\u14e5\u14e8\5\u0310\u0189\2\u14e6\u14e8\5\u0300\u0181\2\u14e7"+
		"\u14e5\3\2\2\2\u14e7\u14e6\3\2\2\2\u14e8\u02dd\3\2\2\2\u14e9\u14ec\5\u0310"+
		"\u0189\2\u14ea\u14eb\7\u01f8\2\2\u14eb\u14ed\5\u0312\u018a\2\u14ec\u14ea"+
		"\3\2\2\2\u14ec\u14ed\3\2\2\2\u14ed\u02df\3\2\2\2\u14ee\u14ef\5\u0310\u0189"+
		"\2\u14ef\u02e1\3\2\2\2\u14f0\u14f5\5\u0310\u0189\2\u14f1\u14f2\7\u01f8"+
		"\2\2\u14f2\u14f4\5\u0312\u018a\2\u14f3\u14f1\3\2\2\2\u14f4\u14f7\3\2\2"+
		"\2\u14f5\u14f3\3\2\2\2\u14f5\u14f6\3\2\2\2\u14f6\u02e3\3\2\2\2\u14f7\u14f5"+
		"\3\2\2\2\u14f8\u14fb\5\u0310\u0189\2\u14f9\u14fa\7\u01f8\2\2\u14fa\u14fc"+
		"\5\u0312\u018a\2\u14fb\u14f9\3\2\2\2\u14fb\u14fc\3\2\2\2\u14fc\u1500\3"+
		"\2\2\2\u14fd\u14fe\7\u0207\2\2\u14fe\u1501\5\u02e0\u0171\2\u14ff\u1501"+
		"\5\u029a\u014e\2\u1500\u14fd\3\2\2\2\u1500\u14ff\3\2\2\2\u1500\u1501\3"+
		"\2\2\2\u1501\u02e5\3\2\2\2\u1502\u1507\5\u0312\u018a\2\u1503\u1504\7\u01f8"+
		"\2\2\u1504\u1506\5\u0312\u018a\2\u1505\u1503\3\2\2\2\u1506\u1509\3\2\2"+
		"\2\u1507\u1505\3\2\2\2\u1507\u1508\3\2\2\2\u1508\u02e7\3\2\2\2\u1509\u1507"+
		"\3\2\2\2\u150a\u150b\5\u0310\u0189\2\u150b\u02e9\3\2\2\2\u150c\u150d\5"+
		"\u0312\u018a\2\u150d\u02eb\3\2\2\2\u150e\u150f\7\u00c3\2\2\u150f\u1510"+
		"\7\u01ff\2\2\u1510\u1511\7\u01d5\2\2\u1511\u1512\t*\2\2\u1512\u1513\5"+
		"\u01ba\u00de\2\u1513\u1515\7\u0200\2\2\u1514\u1516\5\u0264\u0133\2\u1515"+
		"\u1514\3\2\2\2\u1515\u1516\3\2\2\2\u1516\u02ed\3\2\2\2\u1517\u1519\7\u01ff"+
		"\2\2\u1518\u151a\5\u02f6\u017c\2\u1519\u1518\3\2\2\2\u1519\u151a\3\2\2"+
		"\2\u151a\u151f\3\2\2\2\u151b\u151c\7\u0205\2\2\u151c\u151e\5\u02f6\u017c"+
		"\2\u151d\u151b\3\2\2\2\u151e\u1521\3\2\2\2\u151f\u151d\3\2\2\2\u151f\u1520"+
		"\3\2\2\2\u1520\u1522\3\2\2\2\u1521\u151f\3\2\2\2\u1522\u1524\7\u0200\2"+
		"\2\u1523\u1525\5\u02ec\u0177\2\u1524\u1523\3\2\2\2\u1524\u1525\3\2\2\2"+
		"\u1525\u02ef\3\2\2\2\u1526\u152b\7\u01ff\2\2\u1527\u1529\5\u02f6\u017c"+
		"\2\u1528\u152a\5\u02f4\u017b\2\u1529\u1528\3\2\2\2\u1529\u152a\3\2\2\2"+
		"\u152a\u152c\3\2\2\2\u152b\u1527\3\2\2\2\u152b\u152c\3\2\2\2\u152c\u1534"+
		"\3\2\2\2\u152d\u152e\7\u0205\2\2\u152e\u1530\5\u02f6\u017c\2\u152f\u1531"+
		"\5\u02f4\u017b\2\u1530\u152f\3\2\2\2\u1530\u1531\3\2\2\2\u1531\u1533\3"+
		"\2\2\2\u1532\u152d\3\2\2\2\u1533\u1536\3\2\2\2\u1534\u1532\3\2\2\2\u1534"+
		"\u1535\3\2\2\2\u1535\u1537\3\2\2\2\u1536\u1534\3\2\2\2\u1537\u1539\7\u0200"+
		"\2\2\u1538\u153a\5\u02ec\u0177\2\u1539\u1538\3\2\2\2\u1539\u153a\3\2\2"+
		"\2\u153a\u02f1\3\2\2\2\u153b\u153c\7\u01ff\2\2\u153c\u1549\5\u02e2\u0172"+
		"\2\u153d\u1540\7\u0205\2\2\u153e\u1541\5\u030a\u0186\2\u153f\u1541\7\u0100"+
		"\2\2\u1540\u153e\3\2\2\2\u1540\u153f\3\2\2\2\u1541\u1547\3\2\2\2\u1542"+
		"\u1545\7\u0205\2\2\u1543\u1546\5\u030a\u0186\2\u1544\u1546\7\u0100\2\2"+
		"\u1545\u1543\3\2\2\2\u1545\u1544\3\2\2\2\u1546\u1548\3\2\2\2\u1547\u1542"+
		"\3\2\2\2\u1547\u1548\3\2\2\2\u1548\u154a\3\2\2\2\u1549\u153d\3\2\2\2\u1549"+
		"\u154a\3\2\2\2\u154a\u154b\3\2\2\2\u154b\u155f\7\u01a5\2\2\u154c\u154d"+
		"\5\u02e4\u0173\2\u154d\u154e\7\u01f8\2\2\u154e\u154f\7\u0202\2\2\u154f"+
		"\u1560\3\2\2\2\u1550\u1560\7\u0202\2\2\u1551\u1553\5\u020c\u0107\2\u1552"+
		"\u1554\5\u029c\u014f\2\u1553\u1552\3\2\2\2\u1553\u1554\3\2\2\2\u1554\u155c"+
		"\3\2\2\2\u1555\u1556\7\u0205\2\2\u1556\u1558\5\u020c\u0107\2\u1557\u1559"+
		"\5\u029c\u014f\2\u1558\u1557\3\2\2\2\u1558\u1559\3\2\2\2\u1559\u155b\3"+
		"\2\2\2\u155a\u1555\3\2\2\2\u155b\u155e\3\2\2\2\u155c\u155a\3\2\2\2\u155c"+
		"\u155d\3\2\2\2\u155d\u1560\3\2\2\2\u155e\u155c\3\2\2\2\u155f\u154c\3\2"+
		"\2\2\u155f\u1550\3\2\2\2\u155f\u1551\3\2\2\2\u1560\u1561\3\2\2\2\u1561"+
		"\u1563\7\u0200\2\2\u1562\u1564\5\u02ec\u0177\2\u1563\u1562\3\2\2\2\u1563"+
		"\u1564\3\2\2\2\u1564\u02f3\3\2\2\2\u1565\u1566\tK\2\2\u1566\u1567\7\u0101"+
		"\2\2\u1567\u02f5\3\2\2\2\u1568\u1569\5\u0310\u0189\2\u1569\u156a\7\u0216"+
		"\2\2\u156a\u156b\7\u0213\2\2\u156b\u156d\3\2\2\2\u156c\u1568\3\2\2\2\u156c"+
		"\u156d\3\2\2\2\u156d\u156e\3\2\2\2\u156e\u156f\5\u020c\u0107\2\u156f\u02f7"+
		"\3\2\2\2\u1570\u1579\5\u02fa\u017e\2\u1571\u1573\7\u0139\2\2\u1572\u1571"+
		"\3\2\2\2\u1572\u1573\3\2\2\2\u1573\u1574\3\2\2\2\u1574\u1576\5\u02ca\u0166"+
		"\2\u1575\u1577\tL\2\2\u1576\u1575\3\2\2\2\u1576\u1577\3\2\2\2\u1577\u1579"+
		"\3\2\2\2\u1578\u1570\3\2\2\2\u1578\u1572\3\2\2\2\u1579\u02f9\3\2\2\2\u157a"+
		"\u157c\5\u02fe\u0180\2\u157b\u157d\5\u02fc\u017f\2\u157c\u157b\3\2\2\2"+
		"\u157c\u157d\3\2\2\2\u157d\u1587\3\2\2\2\u157e\u1580\7\u01b7\2\2\u157f"+
		"\u1581\7\u00d1\2\2\u1580\u157f\3\2\2\2\u1580\u1581\3\2\2\2\u1581\u1582"+
		"\3\2\2\2\u1582\u1583\7\u0187\2\2\u1583\u1588\7\u01cd\2\2\u1584\u1585\7"+
		"\62\2\2\u1585\u1586\7\u0163\2\2\u1586\u1588\5\u02e6\u0174\2\u1587\u157e"+
		"\3\2\2\2\u1587\u1584\3\2\2\2\u1587\u1588\3\2\2\2\u1588\u159a\3\2\2\2\u1589"+
		"\u158a\7\u00bb\2\2\u158a\u158f\tM\2\2\u158b\u158c\7\u01ff\2\2\u158c\u158d"+
		"\5\u020c\u0107\2\u158d\u158e\7\u0200\2\2\u158e\u1590\3\2\2\2\u158f\u158b"+
		"\3\2\2\2\u158f\u1590\3\2\2\2\u1590\u1591\3\2\2\2\u1591\u1592\7\u0190\2"+
		"\2\u1592\u1597\tN\2\2\u1593\u1594\7\u01ff\2\2\u1594\u1595\5\u020c\u0107"+
		"\2\u1595\u1596\7\u0200\2\2\u1596\u1598\3\2\2\2\u1597\u1593\3\2\2\2\u1597"+
		"\u1598\3\2\2\2\u1598\u159a\3\2\2\2\u1599\u157a\3\2\2\2\u1599\u1589\3\2"+
		"\2\2\u159a\u02fb\3\2\2\2\u159b\u159c\7\u01ff\2\2\u159c\u159f\5\u030a\u0186"+
		"\2\u159d\u159e\7\u0205\2\2\u159e\u15a0\5\u030a\u0186\2\u159f\u159d\3\2"+
		"\2\2\u159f\u15a0\3\2\2\2\u15a0\u15a2\3\2\2\2\u15a1\u15a3\tO\2\2\u15a2"+
		"\u15a1\3\2\2\2\u15a2\u15a3\3\2\2\2\u15a3\u15a4\3\2\2\2\u15a4\u15a5\7\u0200"+
		"\2\2\u15a5\u02fd\3\2\2\2\u15a6\u15e3\7\37\2\2\u15a7\u15e3\7\u0129\2\2"+
		"\u15a8\u15e3\7\u00eb\2\2\u15a9\u15e3\7\36\2\2\u15aa\u15e3\7\35\2\2\u15ab"+
		"\u15e3\7\u00ec\2\2\u15ac\u15e3\7\u012a\2\2\u15ad\u15e3\7\u012b\2\2\u15ae"+
		"\u15e3\7\u016a\2\2\u15af\u15e3\7\u016b\2\2\u15b0\u15e3\7\u0104\2\2\u15b1"+
		"\u15e3\7`\2\2\u15b2\u15e3\7\u00b9\2\2\u15b3\u15e3\7\u00b8\2\2\u15b4\u15e3"+
		"\7\u0103\2\2\u15b5\u15e3\7\u016f\2\2\u15b6\u15e3\7\u0102\2\2\u15b7\u15e3"+
		"\7a\2\2\u15b8\u15ba\7r\2\2\u15b9\u15bb\7\u012e\2\2\u15ba\u15b9\3\2\2\2"+
		"\u15ba\u15bb\3\2\2\2\u15bb\u15e3\3\2\2\2\u15bc\u15e3\7\u0093\2\2\u15bd"+
		"\u15e3\7\u0137\2\2\u15be\u15e3\7\u00ee\2\2\u15bf\u15c1\7\u00d7\2\2\u15c0"+
		"\u15c2\7\u0135\2\2\u15c1\u15c0\3\2\2\2\u15c1\u15c2\3\2\2\2\u15c2\u15e3"+
		"\3\2\2\2\u15c3\u15e3\7\60\2\2\u15c4\u15e3\7\62\2\2\u15c5\u15e3\7\u01aa"+
		"\2\2\u15c6\u15e3\7\u01a9\2\2\u15c7\u15e3\7\u017c\2\2\u15c8\u15e3\7\u0135"+
		"\2\2\u15c9\u15e3\7#\2\2\u15ca\u15e3\7Z\2\2\u15cb\u15e3\7\u014e\2\2\u15cc"+
		"\u15e3\7\u01a3\2\2\u15cd\u15e3\7\u01ca\2\2\u15ce\u15e3\7\u00e7\2\2\u15cf"+
		"\u15e3\7[\2\2\u15d0\u15e3\7\u00a4\2\2\u15d1\u15e3\7\u00e1\2\2\u15d2\u15e3"+
		"\7\u0158\2\2\u15d3\u15e3\7\u018d\2\2\u15d4\u15e3\7\u018e\2\2\u15d5\u15e3"+
		"\7\u018f\2\2\u15d6\u15e3\7\u018c\2\2\u15d7\u15e3\7\u0188\2\2\u15d8\u15e3"+
		"\7\u018b\2\2\u15d9\u15e3\7\u018a\2\2\u15da\u15e3\7\u0189\2\2\u15db\u15e3"+
		"\7\u01cc\2\2\u15dc\u15e3\7t\2\2\u15dd\u15e3\7\34\2\2\u15de\u15e3\7 \2"+
		"\2\u15df\u15e3\7\65\2\2\u15e0\u15e3\7\u00f0\2\2\u15e1\u15e3\7\u00e3\2"+
		"\2\u15e2\u15a6\3\2\2\2\u15e2\u15a7\3\2\2\2\u15e2\u15a8\3\2\2\2\u15e2\u15a9"+
		"\3\2\2\2\u15e2\u15aa\3\2\2\2\u15e2\u15ab\3\2\2\2\u15e2\u15ac\3\2\2\2\u15e2"+
		"\u15ad\3\2\2\2\u15e2\u15ae\3\2\2\2\u15e2\u15af\3\2\2\2\u15e2\u15b0\3\2"+
		"\2\2\u15e2\u15b1\3\2\2\2\u15e2\u15b2\3\2\2\2\u15e2\u15b3\3\2\2\2\u15e2"+
		"\u15b4\3\2\2\2\u15e2\u15b5\3\2\2\2\u15e2\u15b6\3\2\2\2\u15e2\u15b7\3\2"+
		"\2\2\u15e2\u15b8\3\2\2\2\u15e2\u15bc\3\2\2\2\u15e2\u15bd\3\2\2\2\u15e2"+
		"\u15be\3\2\2\2\u15e2\u15bf\3\2\2\2\u15e2\u15c3\3\2\2\2\u15e2\u15c4\3\2"+
		"\2\2\u15e2\u15c5\3\2\2\2\u15e2\u15c6\3\2\2\2\u15e2\u15c7\3\2\2\2\u15e2"+
		"\u15c8\3\2\2\2\u15e2\u15c9\3\2\2\2\u15e2\u15ca\3\2\2\2\u15e2\u15cb\3\2"+
		"\2\2\u15e2\u15cc\3\2\2\2\u15e2\u15cd\3\2\2\2\u15e2\u15ce\3\2\2\2\u15e2"+
		"\u15cf\3\2\2\2\u15e2\u15d0\3\2\2\2\u15e2\u15d1\3\2\2\2\u15e2\u15d2\3\2"+
		"\2\2\u15e2\u15d3\3\2\2\2\u15e2\u15d4\3\2\2\2\u15e2\u15d5\3\2\2\2\u15e2"+
		"\u15d6\3\2\2\2\u15e2\u15d7\3\2\2\2\u15e2\u15d8\3\2\2\2\u15e2\u15d9\3\2"+
		"\2\2\u15e2\u15da\3\2\2\2\u15e2\u15db\3\2\2\2\u15e2\u15dc\3\2\2\2\u15e2"+
		"\u15dd\3\2\2\2\u15e2\u15de\3\2\2\2\u15e2\u15df\3\2\2\2\u15e2\u15e0\3\2"+
		"\2\2\u15e2\u15e1\3\2\2\2\u15e3\u02ff\3\2\2\2\u15e4\u15e8\7\u0209\2\2\u15e5"+
		"\u15e6\7\u020a\2\2\u15e6\u15e8\7\u01f9\2\2\u15e7\u15e4\3\2\2\2\u15e7\u15e5"+
		"\3\2\2\2\u15e8\u15f1\3\2\2\2\u15e9\u15eb\7\u00af\2\2\u15ea\u15e9\3\2\2"+
		"\2\u15ea\u15eb\3\2\2\2\u15eb\u15ef\3\2\2\2\u15ec\u15f0\7\u0209\2\2\u15ed"+
		"\u15ee\7\u020a\2\2\u15ee\u15f0\7\u01f9\2\2\u15ef\u15ec\3\2\2\2\u15ef\u15ed"+
		"\3\2\2\2\u15f0\u15f2\3\2\2\2\u15f1\u15ea\3\2\2\2\u15f1\u15f2\3\2\2\2\u15f2"+
		"\u15f7\3\2\2\2\u15f3\u15f4\7\u01f8\2\2\u15f4\u15f6\5\u0304\u0183\2\u15f5"+
		"\u15f3\3\2\2\2\u15f6\u15f9\3\2\2\2\u15f7\u15f5\3\2\2\2\u15f7\u15f8\3\2"+
		"\2\2\u15f8\u0301\3\2\2\2\u15f9\u15f7\3\2\2\2\u15fa\u15ff\5\u0304\u0183"+
		"\2\u15fb\u15fc\7\u01f8\2\2\u15fc\u15fe\5\u0304\u0183\2\u15fd\u15fb\3\2"+
		"\2\2\u15fe\u1601\3\2\2\2\u15ff\u15fd\3\2\2\2\u15ff\u1600\3\2\2\2\u1600"+
		"\u0303\3\2\2\2\u1601\u15ff\3\2\2\2\u1602\u1603\7\u0219\2\2\u1603\u1605"+
		"\5\u02e6\u0174\2\u1604\u1602\3\2\2\2\u1604\u1605\3\2\2\2\u1605\u1606\3"+
		"\2\2\2\u1606\u160b\5\u0312\u018a\2\u1607\u1608\7\u01f8\2\2\u1608\u160a"+
		"\5\u0312\u018a\2\u1609\u1607\3\2\2\2\u160a\u160d\3\2\2\2\u160b\u1609\3"+
		"\2\2\2\u160b\u160c\3\2\2\2\u160c\u1610\3\2\2\2\u160d\u160b\3\2\2\2\u160e"+
		"\u160f\7\u0207\2\2\u160f\u1611\5\u02e0\u0171\2\u1610\u160e\3\2\2\2\u1610"+
		"\u1611\3\2\2\2\u1611\u1613\3\2\2\2\u1612\u1614\5\u02ee\u0178\2\u1613\u1612"+
		"\3\2\2\2\u1613\u1614\3\2\2\2\u1614\u0305\3\2\2\2\u1615\u1616\7\u0219\2"+
		"\2\u1616\u1618\5\u02e6\u0174\2\u1617\u1615\3\2\2\2\u1617\u1618\3\2\2\2"+
		"\u1618\u1619\3\2\2\2\u1619\u161e\5\u0312\u018a\2\u161a\u161b\7\u01f8\2"+
		"\2\u161b\u161d\5\u0312\u018a\2\u161c\u161a\3\2\2\2\u161d\u1620\3\2\2\2"+
		"\u161e\u161c\3\2\2\2\u161e\u161f\3\2\2\2\u161f\u0307\3\2\2\2\u1620\u161e"+
		"\3\2\2\2\u1621\u1624\7\u0188\2\2\u1622\u1625\5\u030e\u0188\2\u1623\u1625"+
		"\5\u0300\u0181\2\u1624\u1622\3\2\2\2\u1624\u1623\3\2\2\2\u1625\u162a\3"+
		"\2\2\2\u1626\u1627\7\21\2\2\u1627\u1628\7\u0187\2\2\u1628\u1629\7\u01cd"+
		"\2\2\u1629\u162b\5\u030e\u0188\2\u162a\u1626\3\2\2\2\u162a\u162b\3\2\2"+
		"\2\u162b\u1660\3\2\2\2\u162c\u1630\7\u00bb\2\2\u162d\u1631\5\u030e\u0188"+
		"\2\u162e\u1631\5\u0300\u0181\2\u162f\u1631\5\u0304\u0183\2\u1630\u162d"+
		"\3\2\2\2\u1630\u162e\3\2\2\2\u1630\u162f\3\2\2\2\u1631\u1632\3\2\2\2\u1632"+
		"\u1640\tP\2\2\u1633\u1636\7\u01ff\2\2\u1634\u1637\7\u01f9\2\2\u1635\u1637"+
		"\5\u0300\u0181\2\u1636\u1634\3\2\2\2\u1636\u1635\3\2\2\2\u1637\u163d\3"+
		"\2\2\2\u1638\u163b\7\u0205\2\2\u1639\u163c\7\u01f9\2\2\u163a\u163c\5\u0300"+
		"\u0181\2\u163b\u1639\3\2\2\2\u163b\u163a\3\2\2\2\u163c\u163e\3\2\2\2\u163d"+
		"\u1638\3\2\2\2\u163d\u163e\3\2\2\2\u163e\u163f\3\2\2\2\u163f\u1641\7\u0200"+
		"\2\2\u1640\u1633\3\2\2\2\u1640\u1641\3\2\2\2\u1641\u1651\3\2\2\2\u1642"+
		"\u164f\7\u0190\2\2\u1643\u1650\7[\2\2\u1644\u1650\7\u00a4\2\2\u1645\u1650"+
		"\7\u00e1\2\2\u1646\u164d\7\u0158\2\2\u1647\u164a\7\u01ff\2\2\u1648\u164b"+
		"\7\u01f9\2\2\u1649\u164b\5\u0300\u0181\2\u164a\u1648\3\2\2\2\u164a\u1649"+
		"\3\2\2\2\u164b\u164c\3\2\2\2\u164c\u164e\7\u0200\2\2\u164d\u1647\3\2\2"+
		"\2\u164d\u164e\3\2\2\2\u164e\u1650\3\2\2\2\u164f\u1643\3\2\2\2\u164f\u1644"+
		"\3\2\2\2\u164f\u1645\3\2\2\2\u164f\u1646\3\2\2\2\u1650\u1652\3\2\2\2\u1651"+
		"\u1642\3\2\2\2\u1651\u1652\3\2\2\2\u1652\u1660\3\2\2\2\u1653\u1660\5\u030a"+
		"\u0186\2\u1654\u1655\7Z\2\2\u1655\u1660\5\u030e\u0188\2\u1656\u1660\5"+
		"\u030e\u0188\2\u1657\u1660\7\u0100\2\2\u1658\u1660\7\u0196\2\2\u1659\u1660"+
		"\7\u008e\2\2\u165a\u1660\7]\2\2\u165b\u1660\7\u0162\2\2\u165c\u1660\7"+
		"\u00e2\2\2\u165d\u1660\7\u00dc\2\2\u165e\u1660\7e\2\2\u165f\u1621\3\2"+
		"\2\2\u165f\u162c\3\2\2\2\u165f\u1653\3\2\2\2\u165f\u1654\3\2\2\2\u165f"+
		"\u1656\3\2\2\2\u165f\u1657\3\2\2\2\u165f\u1658\3\2\2\2\u165f\u1659\3\2"+
		"\2\2\u165f\u165a\3\2\2\2\u165f\u165b\3\2\2\2\u165f\u165c\3\2\2\2\u165f"+
		"\u165d\3\2\2\2\u165f\u165e\3\2\2\2\u1660\u0309\3\2\2\2\u1661\u1662\tQ"+
		"\2\2\u1662\u030b\3\2\2\2\u1663\u1664\7\u0204\2\2\u1664\u1665\5\u030a\u0186"+
		"\2\u1665\u030d\3\2\2\2\u1666\u1667\tR\2\2\u1667\u030f\3\2\2\2\u1668\u1669"+
		"\7\u0219\2\2\u1669\u166b\5\u02e6\u0174\2\u166a\u1668\3\2\2\2\u166a\u166b"+
		"\3\2\2\2\u166b\u166c\3\2\2\2\u166c\u166d\5\u0312\u018a\2\u166d\u0311\3"+
		"\2\2\2\u166e\u1671\5\u031e\u0190\2\u166f\u1671\7\u01fc\2\2\u1670\u166e"+
		"\3\2\2\2\u1670\u166f\3\2\2\2\u1671\u0313\3\2\2\2\u1672\u167a\7\u020f\2"+
		"\2\u1673\u1674\7\u020d\2\2\u1674\u167a\7\u0213\2\2\u1675\u1676\7\u0212"+
		"\2\2\u1676\u167a\7\u0216\2\2\u1677\u1678\7\u0210\2\2\u1678\u167a\7\u0216"+
		"\2\2\u1679\u1672\3\2\2\2\u1679\u1673\3\2\2\2\u1679\u1675\3\2\2\2\u1679"+
		"\u1677\3\2\2\2\u167a\u0315\3\2\2\2\u167b\u167f\7\u020e\2\2\u167c\u167d"+
		"\7\u0213\2\2\u167d\u167f\7\u0216\2\2\u167e\u167b\3\2\2\2\u167e\u167c\3"+
		"\2\2\2\u167f\u0317\3\2\2\2\u1680\u1684\7\u020c\2\2\u1681\u1682\7\u020d"+
		"\2\2\u1682\u1684\7\u0216\2\2\u1683\u1680\3\2\2\2\u1683\u1681\3\2\2\2\u1684"+
		"\u0319\3\2\2\2\u1685\u1689\7\u0214\2\2\u1686\u1687\7\u0215\2\2\u1687\u1689"+
		"\7\u0215\2\2\u1688\u1685\3\2\2\2\u1688\u1686\3\2\2\2\u1689\u031b\3\2\2"+
		"\2\u168a\u168b\7\u01ff\2\2\u168b\u168c\7\u0203\2\2\u168c\u168d\7\u0200"+
		"\2\2\u168d\u031d\3\2\2\2\u168e\u168f\tS\2\2\u168f\u031f\3\2\2\2\u1690"+
		"\u1691\tT\2\2\u1691\u0321\3\2\2\2\u1692\u1693\tU\2\2\u1693\u0323\3\2\2"+
		"\2\u02f3\u0327\u032c\u0333\u0336\u033a\u035a\u0366\u036b\u0370\u0377\u0381"+
		"\u0386\u038e\u0390\u0394\u0398\u039d\u03a2\u03a7\u03ad\u03bb\u03c0\u03c3"+
		"\u03c9\u03d2\u03e0\u03e8\u03ed\u03f7\u03fa\u03ff\u0404\u040b\u0411\u0415"+
		"\u041b\u0420\u0427\u042e\u0435\u043c\u043e\u044a\u0454\u0459\u0465\u046a"+
		"\u046f\u0472\u047f\u048b\u0490\u0495\u04a1\u04a6\u04ae\u04b0\u04b4\u04b8"+
		"\u04bd\u04c2\u04c7\u04d3\u04d8\u04dc\u04e1\u04e7\u04ee\u04f8\u04fd\u0500"+
		"\u0504\u0509\u050f\u0521\u0526\u052b\u052d\u0534\u053b\u053e\u0541\u0544"+
		"\u054f\u055b\u055f\u0562\u056b\u0573\u057b\u057e\u0585\u0589\u0590\u0596"+
		"\u05bf\u05db\u05e2\u05e7\u05f2\u05f5\u0600\u0608\u060c\u0618\u061b\u0621"+
		"\u0624\u0629\u062e\u0632\u063c\u0646\u064c\u0657\u065c\u0660\u0668\u0670"+
		"\u0675\u0678\u067a\u067d\u0686\u068b\u0692\u0695\u0698\u069c\u069f\u06a7"+
		"\u06ac\u06b1\u06b8\u06c2\u06d2\u06d8\u06e2\u06ec\u06f3\u06f8\u06fe\u0708"+
		"\u070d\u0714\u0719\u071f\u0722\u0725\u0736\u073b\u0744\u0749\u074f\u0752"+
		"\u0759\u075c\u0763\u0768\u076c\u0771\u0776\u0780\u0786\u0790\u0795\u079c"+
		"\u07a2\u07a6\u07a9\u07ac\u07bd\u07c2\u07ca\u07d8\u07df\u07ef\u07f8\u07fa"+
		"\u080f\u0821\u0836\u083f\u0844\u0849\u084f\u0856\u085b\u085d\u086e\u0873"+
		"\u087d\u0883\u088d\u0897\u08a0\u08ad\u08c1\u08ca\u08cf\u08d3\u08d6\u08e0"+
		"\u08ec\u08f2\u08fa\u08fe\u0901\u0910\u0914\u0919\u091c\u0929\u092d\u0939"+
		"\u093e\u0942\u0946\u094c\u094f\u0952\u096d\u0973\u0977\u0982\u0989\u098d"+
		"\u0990\u0996\u099f\u09a7\u09ab\u09af\u09b7\u09c0\u09c6\u09c8\u09d6\u09eb"+
		"\u09ef\u09f6\u09fa\u09fe\u0a02\u0a0e\u0a12\u0a20\u0a26\u0a2d\u0a32\u0a3c"+
		"\u0a42\u0a44\u0a4d\u0a57\u0a5c\u0a6b\u0a6f\u0a72\u0a76\u0a84\u0a86\u0a8a"+
		"\u0a92\u0a99\u0a9e\u0aa0\u0aa5\u0aaa\u0ab2\u0ab9\u0abd\u0ac0\u0acc\u0ad2"+
		"\u0ada\u0ae4\u0aef\u0af2\u0af9\u0afc\u0b03\u0b0e\u0b14\u0b18\u0b22\u0b25"+
		"\u0b2b\u0b36\u0b38\u0b3a\u0b3d\u0b41\u0b44\u0b48\u0b4c\u0b51\u0b5c\u0b60"+
		"\u0b68\u0b6b\u0b70\u0b72\u0b7b\u0b85\u0b8a\u0b90\u0b94\u0b97\u0b9f\u0ba2"+
		"\u0ba6\u0baa\u0baf\u0bb2\u0bb6\u0bba\u0bbe\u0bca\u0bd8\u0bdd\u0be1\u0bea"+
		"\u0bee\u0bf6\u0bf9\u0bfc\u0c00\u0c03\u0c06\u0c09\u0c0d\u0c19\u0c1c\u0c23"+
		"\u0c2a\u0c2f\u0c35\u0c39\u0c3e\u0c45\u0c4b\u0c52\u0c55\u0c58\u0c5c\u0c61"+
		"\u0c65\u0c67\u0c74\u0c7b\u0c89\u0c8c\u0c96\u0c9a\u0ca2\u0cae\u0cb8\u0cbd"+
		"\u0cc7\u0ccf\u0cd2\u0cd8\u0cdc\u0ce1\u0ceb\u0cf0\u0cfd\u0d09\u0d0e\u0d18"+
		"\u0d1d\u0d1f\u0d24\u0d28\u0d2e\u0d32\u0d3f\u0d43\u0d4d\u0d50\u0d52\u0d57"+
		"\u0d60\u0d6d\u0d75\u0d7e\u0d82\u0d87\u0d92\u0d94\u0da4\u0da9\u0daf\u0db5"+
		"\u0dc7\u0dce\u0dd1\u0dd4\u0ddc\u0ddf\u0de7\u0de9\u0ded\u0df0\u0df5\u0df7"+
		"\u0dfb\u0e07\u0e10\u0e18\u0e1d\u0e21\u0e26\u0e29\u0e31\u0e39\u0e3f\u0e42"+
		"\u0e45\u0e4d\u0e57\u0e63\u0e6a\u0e6e\u0e72\u0e75\u0e78\u0e7d\u0e82\u0e85"+
		"\u0e88\u0e8e\u0e91\u0e97\u0e9a\u0e9d\u0ea2\u0ea5\u0ead\u0eb3\u0ebd\u0ec2"+
		"\u0ecb\u0ed5\u0ed9\u0edb\u0ede\u0eea\u0eee\u0ef1\u0f05\u0f0a\u0f0f\u0f16"+
		"\u0f19\u0f22\u0f29\u0f2e\u0f32\u0f3a\u0f40\u0f48\u0f4b\u0f53\u0f5b\u0f5e"+
		"\u0f61\u0f6a\u0f70\u0f76\u0f78\u0f85\u0f87\u0f90\u0f92\u0f96\u0f9c\u0fa0"+
		"\u0fae\u0fb4\u0fbd\u0fc7\u0fd2\u0fd8\u0fdd\u0fe8\u0fec\u0ff3\u0ff8\u0ffc"+
		"\u1002\u1006\u1013\u1018\u1021\u1023\u1025\u102d\u103e\u1046\u1052\u105a"+
		"\u1062\u106b\u106e\u1075\u107d\u1084\u1088\u108f\u1093\u1098\u109c\u10a4"+
		"\u10a8\u10af\u10b8\u10c6\u10d3\u10d8\u10ec\u10f0\u10f3\u10fa\u10fd\u1101"+
		"\u1104\u110b\u110e\u1114\u1117\u111b\u111e\u1125\u112a\u1138\u113e\u1140"+
		"\u1144\u114c\u1158\u1161\u116a\u116e\u1172\u117d\u1193\u1196\u1199\u11a3"+
		"\u11a7\u11ac\u11b1\u11b6\u11bf\u11c2\u11c4\u11c8\u11cf\u11d6\u11de\u11ea"+
		"\u11f6\u11fb\u1200\u1205\u120b\u120e\u1212\u121c\u1228\u122a\u1231\u1235"+
		"\u123e\u1247\u1255\u1260\u1264\u1267\u1270\u1276\u1280\u1288\u128b\u128e"+
		"\u1297\u129c\u12a5\u12ab\u12b0\u12b3\u12b8\u12bd\u12c1\u12c7\u12cd\u12d6"+
		"\u12db\u12e3\u12e7\u12ec\u12f2\u12f9\u12fe\u1305\u1309\u130e\u1316\u1319"+
		"\u131c\u131f\u1323\u1328\u132d\u1331\u1338\u133d\u133f\u134a\u134e\u1350"+
		"\u135b\u1366\u136f\u1372\u1376\u1379\u137d\u138a\u138f\u1397\u139e\u13a3"+
		"\u13a7\u13ac\u13b1\u13b4\u13bb\u13c5\u13cd\u13d1\u13db\u13de\u13e0\u13ea"+
		"\u13ec\u13f2\u13f8\u13fa\u1408\u140a\u1413\u1416\u141f\u1428\u1432\u1438"+
		"\u143d\u1441\u1444\u1448\u144f\u145b\u1466\u1469\u146d\u1480\u1485\u148c"+
		"\u1499\u14a3\u14a8\u14b1\u14b9\u14c1\u14c7\u14cc\u14d1\u14d5\u14da\u14dd"+
		"\u14e3\u14e7\u14ec\u14f5\u14fb\u1500\u1507\u1515\u1519\u151f\u1524\u1529"+
		"\u152b\u1530\u1534\u1539\u1540\u1545\u1547\u1549\u1553\u1558\u155c\u155f"+
		"\u1563\u156c\u1572\u1576\u1578\u157c\u1580\u1587\u158f\u1597\u1599\u159f"+
		"\u15a2\u15ba\u15c1\u15e2\u15e7\u15ea\u15ef\u15f1\u15f7\u15ff\u1604\u160b"+
		"\u1610\u1613\u1617\u161e\u1624\u162a\u1630\u1636\u163b\u163d\u1640\u164a"+
		"\u164d\u164f\u1651\u165f\u166a\u1670\u1679\u167e\u1683\u1688";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}